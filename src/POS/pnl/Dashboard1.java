/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package POS.pnl;

import POS.Main;
import POS.Main.ImgPath;
import POS.addtl_cashins.Dlg_addtl_cashins;
import POS.advance_payment.Dlg_advance_payment;
import POS.advance_payment.S1_cash_advance;
import POS.billing_history.Dlg_billing_history;
import POS.billing_history.S1_billing_history;
import POS.billing_history.S1_billing_history_items;
import POS.cashout.Dlg_cashout;
import POS.category_discounts.S1_category_discounts;
import POS.category_type.S1_category_type;
import POS.category_type.S1_category_type.to_category_type;
import POS.currency.S1_currency;
import POS.dlg.*;
import POS.dlg.Dlg_login1.OutputData;
import POS.dlg2.Dlg_voider;
import POS.dlg3.Dlg_add_discount;
import POS.expenses.Dlg_expenses;
import POS.guests.Dlg_guest;
import POS.guests.S1_guest;
import POS.guests.S2_guest_charges;
import POS.inventory.*;
import POS.printing.S1_prepare_order1;
import POS.printing2.rpt_orders;
import POS.printing2.rpt_orders1;
import POS.rooms.S1_check_in;
import POS.rpt2.rpt_report;
import POS.rpt2.to_date_from;
import POS.sales.Dlg_sales_report;
import POS.svc.S12_retval_user_level;
import POS.svc.S15_save_new_pen_orders;
import POS.svc.S3_insert_new_user;
import POS.svc.Svc_1;
import POS.svc2.S12_cashier_sessions;
import POS.svc3.S2_update_pending;
import POS.svc3.S3_getpending;
import POS.table_location.S1_table_location;
import POS.to.to_order;
import POS.to.to_pay;
import POS.to.to_users;
import POS.to2.to_credit;
import POS.to2.to_disc;
import POS.utl.*;
import POS.utl.Center;
import POS.voider.Dlg_void_table_order;
import POS_dlg4.Dlg_report_endorsements;
import POS_dlg4.Dlg_table;
import POS.category_types.S1_categories;
import POS.category_types.S1_categories.to_name_cat;
import POS.credit_card.Dlg_credit_card_ins;
import POS.dlg.Dlg_pay.to_print_save;
import POS.guests.*;
import POS.prepaid_employees.Dlg_employee_advance_payment;
import POS.printing2.Dlg_print_orders;
import POS.printing2.Srpt_billing_statement;
import POS.redo_receipts.Dlg_receipts;
import POS.sales.Dlg_cashier_sales_all;
import POS_svc4.S2_search;
import POS_svc4.S2_search.to_items;
import POS_svc4.S2_search.to_items_status;
import POS_svc4.S5_tables;
import com.jgoodies.binding.adapter.AbstractTableAdapter;
import com.jgoodies.binding.list.ArrayListModel;
import de.jgrid.JGrid;
import de.jgrid.renderer.GridCellRenderer;

import java.awt.*;
import java.awt.event.*;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.lang.Runnable;
import java.text.DecimalFormat;
import java.text.ParseException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.*;

import org.jdesktop.swingx.JXLabel;
import org.jdesktop.swingx.combobox.ListComboBoxModel;
import org.netbeans.lib.awtextra.AbsoluteLayout;
import mijzcx.synapse.desk.utils.*;
import net.sf.jasperreports.engine.JRException;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperPrintManager;
import net.sf.jasperreports.engine.JasperReport;
import rpt_liquid.*;

import test.*;

/**
 *
 * @author i1
 */
public class Dashboard1 extends javax.swing.JFrame {

    /**
     * Creates new form Dashboard
     */
    public Dashboard1() {
        initComponents();
        myInit();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jGrid1 = new de.jgrid.JGrid();
        jPanel1 = new javax.swing.JPanel();
        pm_category = new javax.swing.JPopupMenu();
        pm_add_item = new javax.swing.JMenuItem();
        pm_category1 = new javax.swing.JMenu();
        pum_sub_category = new javax.swing.JPopupMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        pnl_holder_orders = new javax.swing.JPanel();
        pnl_holder_items = new javax.swing.JPanel();
        pnl_category = new javax.swing.JPanel();
        jButton6 = new javax.swing.JButton();
        sp_cat = new javax.swing.JScrollPane();
        jg_categories = new de.jgrid.JGrid();
        jButton7 = new javax.swing.JButton();
        btn_back = new javax.swing.JButton();
        btn_add_order = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbl_category = new javax.swing.JTable();
        jButton4 = new javax.swing.JButton();
        lbl_split = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        pnl_holder_guest_details = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        lbl_guest_total = new javax.swing.JLabel();
        lbl_rate = new javax.swing.JLabel();
        lbl_oders_payment = new javax.swing.JLabel();
        lbl_check_date = new javax.swing.JLabel();
        lbl_guest_no = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        cb_guest = new javax.swing.JComboBox();
        lbl_bill = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        lbl_advance_payment = new javax.swing.JLabel();
        lbl_payment = new javax.swing.JLabel();
        lbl_prepare = new javax.swing.JLabel();
        lbl_advance_payment1 = new javax.swing.JLabel();
        sp_items = new javax.swing.JScrollPane();
        jg_items = new de.jgrid.JGrid();
        js_orders = new javax.swing.JScrollPane();
        tbl_items = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        lbl_cashier_name = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        lbl_table_no = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        lbl_or_no = new javax.swing.JLabel();
        pnl_holder_search = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jPanel8 = new javax.swing.JPanel();
        btn_expenses = new javax.swing.JButton();
        btn_remit = new javax.swing.JButton();
        tf_search = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        btn_charge_to_room = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        btn_stockin_out = new javax.swing.JButton();
        btn_voider = new javax.swing.JButton();
        btn_menu = new javax.swing.JButton();
        jLabel15 = new javax.swing.JLabel();
        btn_credit_card_reflenish = new javax.swing.JButton();
        btn_billings = new javax.swing.JButton();
        btn_outside_cash = new javax.swing.JButton();
        btn_inventory = new javax.swing.JButton();
        btn_staff_prepaid = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jButton8 = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        lbl_amount = new javax.swing.JLabel();
        lbl_order_count = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        js_items = new javax.swing.JScrollPane();
        tbl_orders = new javax.swing.JTable();
        sp_orders = new javax.swing.JScrollPane();
        jg_orders = new de.jgrid.JGrid();
        jButton9 = new javax.swing.JButton();
        pnl_holder_rooms = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel6 = new javax.swing.JPanel();
        btn_clear_all = new javax.swing.JButton();
        btn_logout = new javax.swing.JButton();
        btn_standby = new javax.swing.JButton();
        btn_pay = new javax.swing.JButton();
        tf_barcode = new javax.swing.JTextField();
        jButton11 = new javax.swing.JButton();
        cb_table_location = new javax.swing.JComboBox();
        lbl_next_customer = new javax.swing.JLabel();

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        pm_category.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N

        pm_add_item.setText("ADD ITEM");
        pm_add_item.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pm_add_itemActionPerformed(evt);
            }
        });
        pm_category.add(pm_add_item);

        pm_category1.setText("CATEGORY");
        pm_category1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        pm_category.add(pm_category1);

        pum_sub_category.setBackground(new java.awt.Color(0, 153, 255));

        jMenuItem1.setText("jMenuItem1");
        pum_sub_category.add(jMenuItem1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        pnl_holder_orders.setBackground(new java.awt.Color(102, 204, 255));

        pnl_holder_items.setBackground(new java.awt.Color(255, 255, 255));
        pnl_holder_items.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                pnl_holder_itemsMouseEntered(evt);
            }
        });

        pnl_category.setBackground(new java.awt.Color(204, 204, 204));

        jButton6.setText("^");
        jButton6.setFocusable(false);
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        sp_cat.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        jg_categories.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jg_categories.setFocusable(false);
        jg_categories.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jg_categoriesMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jg_categoriesMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jg_categoriesMouseReleased(evt);
            }
        });
        sp_cat.setViewportView(jg_categories);

        jButton7.setText("v");
        jButton7.setFocusable(false);
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        btn_back.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btn_back.setText("BACK");
        btn_back.setFocusable(false);
        btn_back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_backActionPerformed(evt);
            }
        });

        btn_add_order.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btn_add_order.setText("ADD");
        btn_add_order.setFocusable(false);
        btn_add_order.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_add_orderActionPerformed(evt);
            }
        });

        jScrollPane2.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        tbl_category.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tbl_category.setSelectionBackground(new java.awt.Color(255, 255, 255));
        tbl_category.setSelectionForeground(new java.awt.Color(0, 51, 204));
        tbl_category.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbl_categoryMouseClicked(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                tbl_categoryMousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                tbl_categoryMouseReleased(evt);
            }
        });
        jScrollPane2.setViewportView(tbl_category);

        jButton4.setText("SPLIT ORDER");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        lbl_split.setBackground(new java.awt.Color(51, 204, 255));
        lbl_split.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        lbl_split.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_split.setText("0");
        lbl_split.setOpaque(true);

        javax.swing.GroupLayout pnl_categoryLayout = new javax.swing.GroupLayout(pnl_category);
        pnl_category.setLayout(pnl_categoryLayout);
        pnl_categoryLayout.setHorizontalGroup(
            pnl_categoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_categoryLayout.createSequentialGroup()
                .addComponent(btn_back, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addComponent(btn_add_order, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jButton7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(pnl_categoryLayout.createSequentialGroup()
                .addGroup(pnl_categoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnl_categoryLayout.createSequentialGroup()
                        .addComponent(sp_cat, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                    .addGroup(pnl_categoryLayout.createSequentialGroup()
                        .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lbl_split, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(2, 2, 2))
        );
        pnl_categoryLayout.setVerticalGroup(
            pnl_categoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_categoryLayout.createSequentialGroup()
                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnl_categoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 576, Short.MAX_VALUE)
                    .addComponent(sp_cat))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnl_categoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE)
                    .addComponent(lbl_split, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnl_categoryLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_back, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_add_order, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );

        jPanel7.setBackground(new java.awt.Color(204, 204, 204));

        jPanel5.setBackground(new java.awt.Color(204, 204, 204));

        jButton2.setText("^");
        jButton2.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton2.setBorderPainted(false);
        jButton2.setFocusable(false);
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        pnl_holder_guest_details.setBackground(new java.awt.Color(227, 225, 225));
        pnl_holder_guest_details.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("GUEST NO:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("NAME:");

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setText("DATE:");

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel10.setText("ADDT. CHARGES:");

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel11.setText("ACCOMODATION:");

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel12.setText("TO PAY:");

        lbl_guest_total.setBackground(new java.awt.Color(255, 255, 255));
        lbl_guest_total.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lbl_guest_total.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_guest_total.setText("0");
        lbl_guest_total.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        lbl_guest_total.setOpaque(true);

        lbl_rate.setBackground(new java.awt.Color(255, 255, 255));
        lbl_rate.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lbl_rate.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_rate.setText("0");
        lbl_rate.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        lbl_rate.setOpaque(true);

        lbl_oders_payment.setBackground(new java.awt.Color(255, 255, 255));
        lbl_oders_payment.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lbl_oders_payment.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_oders_payment.setText("0");
        lbl_oders_payment.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        lbl_oders_payment.setOpaque(true);

        lbl_check_date.setBackground(new java.awt.Color(255, 255, 255));
        lbl_check_date.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lbl_check_date.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_check_date.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        lbl_check_date.setOpaque(true);

        lbl_guest_no.setBackground(new java.awt.Color(255, 255, 255));
        lbl_guest_no.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lbl_guest_no.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_guest_no.setText("00000");
        lbl_guest_no.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        lbl_guest_no.setOpaque(true);

        jButton3.setText("-");
        jButton3.setFocusable(false);
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        cb_guest.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        cb_guest.setFocusable(false);
        cb_guest.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_guestActionPerformed(evt);
            }
        });

        lbl_bill.setBackground(new java.awt.Color(255, 255, 255));
        lbl_bill.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lbl_bill.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_bill.setText("BILL");
        lbl_bill.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        lbl_bill.setOpaque(true);
        lbl_bill.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbl_billMouseClicked(evt);
            }
        });

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel14.setText("ADVANCE PAYMENT:");

        lbl_advance_payment.setBackground(new java.awt.Color(255, 255, 255));
        lbl_advance_payment.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lbl_advance_payment.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_advance_payment.setText("0");
        lbl_advance_payment.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        lbl_advance_payment.setOpaque(true);

        lbl_payment.setBackground(new java.awt.Color(255, 255, 255));
        lbl_payment.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lbl_payment.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_payment.setText("PAY");
        lbl_payment.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        lbl_payment.setOpaque(true);
        lbl_payment.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbl_paymentMouseClicked(evt);
            }
        });

        lbl_prepare.setBackground(new java.awt.Color(255, 255, 255));
        lbl_prepare.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lbl_prepare.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_prepare.setText("PREPARE ( 0 )");
        lbl_prepare.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        lbl_prepare.setOpaque(true);
        lbl_prepare.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbl_prepareMouseClicked(evt);
            }
        });

        lbl_advance_payment1.setBackground(new java.awt.Color(255, 255, 255));
        lbl_advance_payment1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lbl_advance_payment1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_advance_payment1.setText("0");
        lbl_advance_payment1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        lbl_advance_payment1.setOpaque(true);

        javax.swing.GroupLayout pnl_holder_guest_detailsLayout = new javax.swing.GroupLayout(pnl_holder_guest_details);
        pnl_holder_guest_details.setLayout(pnl_holder_guest_detailsLayout);
        pnl_holder_guest_detailsLayout.setHorizontalGroup(
            pnl_holder_guest_detailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_holder_guest_detailsLayout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(pnl_holder_guest_detailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnl_holder_guest_detailsLayout.createSequentialGroup()
                        .addGroup(pnl_holder_guest_detailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel11)
                            .addComponent(jLabel10))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnl_holder_guest_detailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lbl_rate, javax.swing.GroupLayout.DEFAULT_SIZE, 99, Short.MAX_VALUE)
                            .addComponent(lbl_oders_payment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(18, 18, Short.MAX_VALUE)
                        .addComponent(lbl_prepare, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lbl_payment, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(lbl_bill, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnl_holder_guest_detailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(lbl_guest_total, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, 105, Short.MAX_VALUE))
                        .addContainerGap())
                    .addGroup(pnl_holder_guest_detailsLayout.createSequentialGroup()
                        .addGroup(pnl_holder_guest_detailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnl_holder_guest_detailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnl_holder_guest_detailsLayout.createSequentialGroup()
                                .addComponent(lbl_guest_no, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(39, 39, 39)
                                .addComponent(jLabel14)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(lbl_advance_payment, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pnl_holder_guest_detailsLayout.createSequentialGroup()
                                .addGroup(pnl_holder_guest_detailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(pnl_holder_guest_detailsLayout.createSequentialGroup()
                                        .addComponent(cb_guest, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(lbl_advance_payment1, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(lbl_check_date, javax.swing.GroupLayout.PREFERRED_SIZE, 226, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addContainerGap(65, Short.MAX_VALUE))))))
        );
        pnl_holder_guest_detailsLayout.setVerticalGroup(
            pnl_holder_guest_detailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_holder_guest_detailsLayout.createSequentialGroup()
                .addGroup(pnl_holder_guest_detailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnl_holder_guest_detailsLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(pnl_holder_guest_detailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(pnl_holder_guest_detailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lbl_guest_no, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(lbl_advance_payment, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addComponent(jButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnl_holder_guest_detailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnl_holder_guest_detailsLayout.createSequentialGroup()
                        .addComponent(lbl_advance_payment1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnl_holder_guest_detailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lbl_guest_total, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbl_bill, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbl_payment, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbl_prepare, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(pnl_holder_guest_detailsLayout.createSequentialGroup()
                        .addGroup(pnl_holder_guest_detailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(cb_guest, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnl_holder_guest_detailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbl_check_date, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(5, 5, 5)
                        .addGroup(pnl_holder_guest_detailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbl_rate, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(pnl_holder_guest_detailsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lbl_oders_payment, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        sp_items.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        sp_items.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        jg_items.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jg_items.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jg_itemsMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jg_itemsMouseEntered(evt);
            }
        });
        sp_items.setViewportView(jg_items);

        tbl_items.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {},
                {},
                {},
                {}
            },
            new String [] {

            }
        ));
        tbl_items.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbl_itemsMouseClicked(evt);
            }
        });
        js_orders.setViewportView(tbl_items);

        jButton1.setText("v");
        jButton1.setFocusable(false);
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(sp_items, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(js_orders))
                    .addComponent(pnl_holder_guest_details, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 47, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnl_holder_guest_details, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sp_items)
                    .addComponent(js_orders, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel2.setText("NAME:");

        lbl_cashier_name.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        lbl_cashier_name.setForeground(new java.awt.Color(0, 153, 255));
        lbl_cashier_name.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_cashier_name.setText("front");
        lbl_cashier_name.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(0, 153, 255));
        jLabel4.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel4.setText("ONLINE");
        jLabel4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel5.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel5.setText("STATUS:");

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel9.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel9.setText("ROOM NO:");

        lbl_table_no.setBackground(new java.awt.Color(0, 0, 0));
        lbl_table_no.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        lbl_table_no.setForeground(new java.awt.Color(0, 153, 255));
        lbl_table_no.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_table_no.setText("0");
        lbl_table_no.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel7.setText("OR #:");

        lbl_or_no.setBackground(new java.awt.Color(0, 0, 0));
        lbl_or_no.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        lbl_or_no.setForeground(new java.awt.Color(0, 153, 255));
        lbl_or_no.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_or_no.setText("00001");
        lbl_or_no.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, 19, Short.MAX_VALUE)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbl_cashier_name, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(10, 10, 10)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbl_table_no, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 8, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbl_or_no, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jLabel7)
                .addComponent(lbl_or_no))
            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(lbl_cashier_name, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(lbl_table_no, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pnl_holder_search.setBackground(new java.awt.Color(255, 255, 255));

        jScrollPane3.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane3.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        btn_expenses.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btn_expenses.setText("EXPENSES");
        btn_expenses.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btn_expenses.setFocusable(false);
        btn_expenses.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_expensesActionPerformed(evt);
            }
        });

        btn_remit.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btn_remit.setText("CASH-OUT");
        btn_remit.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btn_remit.setFocusable(false);
        btn_remit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_remitActionPerformed(evt);
            }
        });

        tf_search.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        tf_search.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        tf_search.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tf_searchKeyReleased(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("SEARCH");

        btn_charge_to_room.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btn_charge_to_room.setText("ADDTL CASH-IN");
        btn_charge_to_room.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btn_charge_to_room.setFocusable(false);
        btn_charge_to_room.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_charge_to_roomActionPerformed(evt);
            }
        });

        jButton10.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jButton10.setText("CASHIER SALES");
        jButton10.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton10.setFocusable(false);
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });

        btn_stockin_out.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btn_stockin_out.setText("STOCKIN/OUT");
        btn_stockin_out.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btn_stockin_out.setFocusable(false);
        btn_stockin_out.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_stockin_outActionPerformed(evt);
            }
        });

        btn_voider.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btn_voider.setText("VOIDER");
        btn_voider.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btn_voider.setFocusable(false);
        btn_voider.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_voiderActionPerformed(evt);
            }
        });

        btn_menu.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btn_menu.setText("MENU");
        btn_menu.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btn_menu.setFocusable(false);
        btn_menu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_menuActionPerformed(evt);
            }
        });

        btn_credit_card_reflenish.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btn_credit_card_reflenish.setText("CREDIT CARD");
        btn_credit_card_reflenish.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btn_credit_card_reflenish.setFocusable(false);
        btn_credit_card_reflenish.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_credit_card_reflenishActionPerformed(evt);
            }
        });

        btn_billings.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btn_billings.setText("BILLINGS");
        btn_billings.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btn_billings.setFocusable(false);
        btn_billings.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_billingsActionPerformed(evt);
            }
        });

        btn_outside_cash.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btn_outside_cash.setText("BILLS");
        btn_outside_cash.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btn_outside_cash.setFocusable(false);
        btn_outside_cash.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_outside_cashActionPerformed(evt);
            }
        });

        btn_inventory.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btn_inventory.setText("INVENTORY");
        btn_inventory.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btn_inventory.setFocusable(false);
        btn_inventory.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_inventoryActionPerformed(evt);
            }
        });

        btn_staff_prepaid.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        btn_staff_prepaid.setText("STAFF-PREPAID");
        btn_staff_prepaid.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        btn_staff_prepaid.setFocusable(false);
        btn_staff_prepaid.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_staff_prepaidActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(tf_search, javax.swing.GroupLayout.DEFAULT_SIZE, 44, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btn_remit, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_expenses, javax.swing.GroupLayout.PREFERRED_SIZE, 101, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_charge_to_room, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_stockin_out, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_voider, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_credit_card_reflenish, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_billings, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_outside_cash, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_inventory, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_staff_prepaid, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel15, javax.swing.GroupLayout.DEFAULT_SIZE, 18, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_menu, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(btn_stockin_out, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jButton10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btn_charge_to_room, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btn_expenses, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btn_remit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel15, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(tf_search, javax.swing.GroupLayout.PREFERRED_SIZE, 52, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
            .addComponent(btn_voider, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btn_billings, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addComponent(btn_menu, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addComponent(btn_credit_card_reflenish, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btn_outside_cash, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btn_inventory, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(btn_staff_prepaid, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jScrollPane3.setViewportView(jPanel8);

        javax.swing.GroupLayout pnl_holder_searchLayout = new javax.swing.GroupLayout(pnl_holder_search);
        pnl_holder_search.setLayout(pnl_holder_searchLayout);
        pnl_holder_searchLayout.setHorizontalGroup(
            pnl_holder_searchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        pnl_holder_searchLayout.setVerticalGroup(
            pnl_holder_searchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(12, 12, 12))
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnl_holder_search, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel7Layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnl_holder_search, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout pnl_holder_itemsLayout = new javax.swing.GroupLayout(pnl_holder_items);
        pnl_holder_items.setLayout(pnl_holder_itemsLayout);
        pnl_holder_itemsLayout.setHorizontalGroup(
            pnl_holder_itemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_holder_itemsLayout.createSequentialGroup()
                .addComponent(pnl_category, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        pnl_holder_itemsLayout.setVerticalGroup(
            pnl_holder_itemsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnl_category, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jPanel2.setBackground(new java.awt.Color(204, 204, 204));

        jButton8.setText("^");
        jButton8.setFocusable(false);
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jPanel9.setBackground(new java.awt.Color(255, 255, 255));

        lbl_amount.setBackground(new java.awt.Color(0, 0, 0));
        lbl_amount.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        lbl_amount.setForeground(new java.awt.Color(255, 255, 255));
        lbl_amount.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_amount.setText("0.00");
        lbl_amount.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        lbl_amount.setOpaque(true);
        lbl_amount.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbl_amountMouseClicked(evt);
            }
        });

        lbl_order_count.setFont(new java.awt.Font("DejaVu Sans", 1, 14)); // NOI18N
        lbl_order_count.setForeground(new java.awt.Color(41, 9, 149));
        lbl_order_count.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_order_count.setFocusable(false);

        jLabel13.setFont(new java.awt.Font("DejaVu Sans", 1, 14)); // NOI18N
        jLabel13.setForeground(new java.awt.Color(41, 9, 149));
        jLabel13.setText("COUNT:");
        jLabel13.setFocusable(false);

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addComponent(lbl_amount, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbl_order_count, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addComponent(lbl_amount)
                .addGap(0, 2, Short.MAX_VALUE))
            .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(lbl_order_count, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        tbl_orders.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tbl_orders.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbl_ordersMouseClicked(evt);
            }
        });
        js_items.setViewportView(tbl_orders);

        sp_orders.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);

        jg_orders.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        jg_orders.setFocusable(false);
        jg_orders.setMaximumSize(new java.awt.Dimension(180, 0));
        jg_orders.setMinimumSize(new java.awt.Dimension(180, 0));
        jg_orders.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jg_ordersFocusLost(evt);
            }
        });
        jg_orders.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jg_ordersMouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jg_ordersMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jg_ordersMouseExited(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jg_ordersMouseReleased(evt);
            }
        });
        sp_orders.setViewportView(jg_orders);

        jButton9.setText("v");
        jButton9.setFocusable(false);
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });

        pnl_holder_rooms.setBackground(new java.awt.Color(255, 255, 255));

        jScrollPane1.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
        jScrollPane1.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);

        btn_clear_all.setBackground(new java.awt.Color(255, 255, 255));
        btn_clear_all.setIcon(new javax.swing.ImageIcon(getClass().getResource("/POS/img2/close32x32.png"))); // NOI18N
        btn_clear_all.setText("CLEAR ALL");
        btn_clear_all.setBorderPainted(false);
        btn_clear_all.setContentAreaFilled(false);
        btn_clear_all.setFocusable(false);
        btn_clear_all.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btn_clear_all.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        btn_clear_all.setOpaque(true);
        btn_clear_all.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_clear_allActionPerformed(evt);
            }
        });

        btn_logout.setIcon(new javax.swing.ImageIcon(getClass().getResource("/POS/img2/log-out2.png"))); // NOI18N
        btn_logout.setBorderPainted(false);
        btn_logout.setContentAreaFilled(false);
        btn_logout.setFocusable(false);
        btn_logout.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/POS/img2/log-out button-MO.png"))); // NOI18N
        btn_logout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_logoutActionPerformed(evt);
            }
        });

        btn_standby.setIcon(new javax.swing.ImageIcon(getClass().getResource("/POS/img2/stand-by.png"))); // NOI18N
        btn_standby.setBorderPainted(false);
        btn_standby.setContentAreaFilled(false);
        btn_standby.setFocusable(false);
        btn_standby.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/POS/img2/stand-by-MO.png"))); // NOI18N
        btn_standby.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_standbyActionPerformed(evt);
            }
        });

        btn_pay.setIcon(new javax.swing.ImageIcon(getClass().getResource("/POS/img2/pay.png"))); // NOI18N
        btn_pay.setBorderPainted(false);
        btn_pay.setContentAreaFilled(false);
        btn_pay.setFocusable(false);
        btn_pay.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource("/POS/img2/pay-MO.png"))); // NOI18N
        btn_pay.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource("/POS/img2/pay-MO.png"))); // NOI18N
        btn_pay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_payActionPerformed(evt);
            }
        });

        tf_barcode.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        jButton11.setText("+");
        jButton11.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jButton11.setFocusable(false);
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        cb_table_location.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        cb_table_location.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "ALL", "INDOOR", "OUTDOOR" }));
        cb_table_location.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        cb_table_location.setFocusable(false);
        cb_table_location.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cb_table_locationActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jButton11, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cb_table_location, 0, 277, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_clear_all)
                .addGap(4, 4, 4)
                .addComponent(tf_barcode, javax.swing.GroupLayout.PREFERRED_SIZE, 19, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_pay, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btn_standby, javax.swing.GroupLayout.PREFERRED_SIZE, 83, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btn_logout, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(352, 352, 352))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btn_logout, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_standby, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btn_pay, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton11, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cb_table_location, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btn_clear_all, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(tf_barcode, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jScrollPane1.setViewportView(jPanel6);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        javax.swing.GroupLayout pnl_holder_roomsLayout = new javax.swing.GroupLayout(pnl_holder_rooms);
        pnl_holder_rooms.setLayout(pnl_holder_roomsLayout);
        pnl_holder_roomsLayout.setHorizontalGroup(
            pnl_holder_roomsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        pnl_holder_roomsLayout.setVerticalGroup(
            pnl_holder_roomsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        lbl_next_customer.setBackground(new java.awt.Color(0, 0, 0));
        lbl_next_customer.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lbl_next_customer.setForeground(new java.awt.Color(0, 255, 0));
        lbl_next_customer.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_next_customer.setText("NEXT CUSTOMER PLEASE");
        lbl_next_customer.setOpaque(true);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(lbl_next_customer, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel9, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(pnl_holder_rooms, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton9, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(js_items))
                .addContainerGap())
            .addComponent(sp_orders, javax.swing.GroupLayout.DEFAULT_SIZE, 571, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lbl_next_customer, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sp_orders, javax.swing.GroupLayout.DEFAULT_SIZE, 522, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(js_items, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton9, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnl_holder_rooms, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout pnl_holder_ordersLayout = new javax.swing.GroupLayout(pnl_holder_orders);
        pnl_holder_orders.setLayout(pnl_holder_ordersLayout);
        pnl_holder_ordersLayout.setHorizontalGroup(
            pnl_holder_ordersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_holder_ordersLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pnl_holder_items, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        pnl_holder_ordersLayout.setVerticalGroup(
            pnl_holder_ordersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnl_holder_ordersLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnl_holder_ordersLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnl_holder_items, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnl_holder_orders, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnl_holder_orders, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btn_clear_allActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_clear_allActionPerformed
        clear_order();
    }//GEN-LAST:event_btn_clear_allActionPerformed

    private void jg_ordersMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jg_ordersMouseClicked
        // TODO add your handling code here:
        set_order_pop();
    }//GEN-LAST:event_jg_ordersMouseClicked

    private void jg_ordersFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jg_ordersFocusLost
    }//GEN-LAST:event_jg_ordersFocusLost

    private void lbl_amountMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbl_amountMouseClicked
    }//GEN-LAST:event_lbl_amountMouseClicked

    private void pnl_holder_itemsMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_pnl_holder_itemsMouseEntered
    }//GEN-LAST:event_pnl_holder_itemsMouseEntered

    private void jg_ordersMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jg_ordersMouseExited
    }//GEN-LAST:event_jg_ordersMouseExited

    private void jg_ordersMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jg_ordersMouseReleased
    }//GEN-LAST:event_jg_ordersMouseReleased

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        do_up_cat();
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        do_down_orders();
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        do_up_orders();
    }//GEN-LAST:event_jButton8ActionPerformed

    private void tf_searchKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tf_searchKeyReleased
        category_id = "";
        my_order = 1;
        my_search = 1;
        ord = 1;
        init_items();
        update_qty_items();
    }//GEN-LAST:event_tf_searchKeyReleased

    private void jg_categoriesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jg_categoriesMouseClicked
        my_order = 1;
        my_search = 0;
        if (user_id.equals("6") || user_id.equals("0") || user_id.equals("5") || user_id.
                equals("7")) {
            get_clicked_category();
            init_items();
            update_qty_items();
        }

    }//GEN-LAST:event_jg_categoriesMouseClicked

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        do_down_cat();
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        do_down_items();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        do_up_items();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jg_itemsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jg_itemsMouseClicked
        // TODO add your handling code here:
        set_item_pop();
    }//GEN-LAST:event_jg_itemsMouseClicked

    private void btn_backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_backActionPerformed
        my_order = 0;
        ord = 1;
        my_guest.clear();
        back();

    }//GEN-LAST:event_btn_backActionPerformed

    private void btn_add_orderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_add_orderActionPerformed
        ord = 0;
        add_room_order();
    }//GEN-LAST:event_btn_add_orderActionPerformed

    private void btn_menuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_menuActionPerformed
        set_menu_popup();
    }//GEN-LAST:event_btn_menuActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing

        do_login("");
    }//GEN-LAST:event_formWindowClosing

    private void btn_logoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_logoutActionPerformed
        logout();
    }//GEN-LAST:event_btn_logoutActionPerformed

    private void btn_standbyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_standbyActionPerformed
        do_login("");
    }//GEN-LAST:event_btn_standbyActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here
        max_guest_panel();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void cb_guestActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_guestActionPerformed
        set_guest_orders();
    }//GEN-LAST:event_cb_guestActionPerformed

    private void lbl_billMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbl_billMouseClicked
        bill();
    }//GEN-LAST:event_lbl_billMouseClicked

    private void btn_remitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_remitActionPerformed
        remitance();
    }//GEN-LAST:event_btn_remitActionPerformed

    private void lbl_paymentMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbl_paymentMouseClicked
        advance_payment();
    }//GEN-LAST:event_lbl_paymentMouseClicked

    private void jg_ordersMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jg_ordersMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_jg_ordersMouseEntered

    private void lbl_prepareMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbl_prepareMouseClicked
        prepare_order();
    }//GEN-LAST:event_lbl_prepareMouseClicked

    private void btn_charge_to_roomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_charge_to_roomActionPerformed
        charge_to_room();
    }//GEN-LAST:event_btn_charge_to_roomActionPerformed

    private void btn_voiderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_voiderActionPerformed
        void_order();
    }//GEN-LAST:event_btn_voiderActionPerformed

    private void btn_stockin_outActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_stockin_outActionPerformed
        stock_in_out();
    }//GEN-LAST:event_btn_stockin_outActionPerformed

    private void jg_itemsMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jg_itemsMouseEntered
        // TODO add your handling code here:
    }//GEN-LAST:event_jg_itemsMouseEntered

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        cashier_sales();
    }//GEN-LAST:event_jButton10ActionPerformed

    private void tbl_itemsMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbl_itemsMouseClicked
        set_item_pop();
    }//GEN-LAST:event_tbl_itemsMouseClicked

    private void tbl_ordersMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbl_ordersMouseClicked
        set_order_pop();
    }//GEN-LAST:event_tbl_ordersMouseClicked

    private void btn_expensesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_expensesActionPerformed
        expenses();
    }//GEN-LAST:event_btn_expensesActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        blind();
    }//GEN-LAST:event_jButton11ActionPerformed

    private void tbl_categoryMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbl_categoryMouseClicked
        my_order = 1;
        ord = 1;
        my_search = 0;
        if (user_id.equals("6") || user_id.equals("0") || user_id.equals("5") || user_id.
                equals("7")) {
            get_clicked_category();
//            init_items();
            update_qty_items();
        }
        get_sub_categories(evt);
    }//GEN-LAST:event_tbl_categoryMouseClicked

    private void tbl_categoryMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbl_categoryMousePressed
        pm_tbl_users(evt);
    }//GEN-LAST:event_tbl_categoryMousePressed

    private void tbl_categoryMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbl_categoryMouseReleased
        pm_tbl_users(evt);
    }//GEN-LAST:event_tbl_categoryMouseReleased

    private void pm_add_itemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pm_add_itemActionPerformed
        add_item();
    }//GEN-LAST:event_pm_add_itemActionPerformed

    private void jg_categoriesMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jg_categoriesMousePressed
        // TODO add your handling code here:
        pm_tbl_users(evt);
    }//GEN-LAST:event_jg_categoriesMousePressed

    private void jg_categoriesMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jg_categoriesMouseReleased
        pm_tbl_users(evt);
    }//GEN-LAST:event_jg_categoriesMouseReleased

    private void cb_table_locationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cb_table_locationActionPerformed
        set_table_locations();
    }//GEN-LAST:event_cb_table_locationActionPerformed

    private void btn_payActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_payActionPerformed
        payments(lbl_amount.getText());
    }//GEN-LAST:event_btn_payActionPerformed

    private void btn_credit_card_reflenishActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_credit_card_reflenishActionPerformed
        // TODO add your handling code here:
        credit_cards();
    }//GEN-LAST:event_btn_credit_card_reflenishActionPerformed

    private void btn_billingsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_billingsActionPerformed
        billings();
    }//GEN-LAST:event_btn_billingsActionPerformed

    private void btn_outside_cashActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_outside_cashActionPerformed
        // TODO add your handling code here:
        outside_cash();
    }//GEN-LAST:event_btn_outside_cashActionPerformed

    private void btn_inventoryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_inventoryActionPerformed
        // TODO add your handling code here:
        do_add_product();
    }//GEN-LAST:event_btn_inventoryActionPerformed

    private void btn_staff_prepaidActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_staff_prepaidActionPerformed
        // TODO add your handling code here:
        staff_prepaid();
    }//GEN-LAST:event_btn_staff_prepaidActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        split_order();
    }//GEN-LAST:event_jButton4ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        Application.setSystemLookAndFeel();
        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
//                String mydb = System.getProperty("mydb", "db_pos_restaurant");
//                MyDB.setNames(mydb);

                String img_path = System.getProperty("img_path", "C:\\Users\\i1\\");
                ImgPath.setPath(img_path);
                Dashboard1 aw = new Dashboard1();
                System.setProperty("sun.java2d.opengl", "True");
                Application.setSystemLookAndFeel();
                Screen.set_normal(aw);
                aw.setVisible(true);
                aw.do_login("");

            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btn_add_order;
    private javax.swing.JButton btn_back;
    private javax.swing.JButton btn_billings;
    private javax.swing.JButton btn_charge_to_room;
    private javax.swing.JButton btn_clear_all;
    private javax.swing.JButton btn_credit_card_reflenish;
    private javax.swing.JButton btn_expenses;
    private javax.swing.JButton btn_inventory;
    private javax.swing.JButton btn_logout;
    private javax.swing.JButton btn_menu;
    private javax.swing.JButton btn_outside_cash;
    private javax.swing.JButton btn_pay;
    private javax.swing.JButton btn_remit;
    private javax.swing.JButton btn_staff_prepaid;
    private javax.swing.JButton btn_standby;
    private javax.swing.JButton btn_stockin_out;
    private javax.swing.JButton btn_voider;
    private javax.swing.JComboBox cb_guest;
    private javax.swing.JComboBox cb_table_location;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private de.jgrid.JGrid jGrid1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private de.jgrid.JGrid jg_categories;
    private de.jgrid.JGrid jg_items;
    private de.jgrid.JGrid jg_orders;
    private javax.swing.JScrollPane js_items;
    private javax.swing.JScrollPane js_orders;
    private javax.swing.JLabel lbl_advance_payment;
    private javax.swing.JLabel lbl_advance_payment1;
    private javax.swing.JLabel lbl_amount;
    private javax.swing.JLabel lbl_bill;
    private javax.swing.JLabel lbl_cashier_name;
    private javax.swing.JLabel lbl_check_date;
    private javax.swing.JLabel lbl_guest_no;
    private javax.swing.JLabel lbl_guest_total;
    private javax.swing.JLabel lbl_next_customer;
    private javax.swing.JLabel lbl_oders_payment;
    private javax.swing.JLabel lbl_or_no;
    private javax.swing.JLabel lbl_order_count;
    private javax.swing.JLabel lbl_payment;
    private javax.swing.JLabel lbl_prepare;
    private javax.swing.JLabel lbl_rate;
    private javax.swing.JLabel lbl_split;
    private javax.swing.JLabel lbl_table_no;
    private javax.swing.JMenuItem pm_add_item;
    private javax.swing.JPopupMenu pm_category;
    private javax.swing.JMenu pm_category1;
    private javax.swing.JPanel pnl_category;
    private javax.swing.JPanel pnl_holder_guest_details;
    private javax.swing.JPanel pnl_holder_items;
    private javax.swing.JPanel pnl_holder_orders;
    private javax.swing.JPanel pnl_holder_rooms;
    private javax.swing.JPanel pnl_holder_search;
    private javax.swing.JPopupMenu pum_sub_category;
    private javax.swing.JScrollPane sp_cat;
    private javax.swing.JScrollPane sp_items;
    private javax.swing.JScrollPane sp_orders;
    private javax.swing.JTable tbl_category;
    private javax.swing.JTable tbl_items;
    private javax.swing.JTable tbl_orders;
    private javax.swing.JTextField tf_barcode;
    private javax.swing.JTextField tf_search;
    // End of variables declaration//GEN-END:variables

    private void myInit() {
//        Main.MyDB.setNames("db_pos_restaurant");
        set_or();
        invisible();
        init_tbl_category();
        init_tbl_customer_tables_details();
        init_tbl_orders_details();
        key();
        updateReceipt();
        hide_popups();
        set_visible();
        my_version();
        init_cashier();
        init_catogories();
        init_table_location();
        init_items();

    }

    private void invisible() {
        btn_inventory.setVisible(false);
        btn_remit.setVisible(false);
        lbl_amount.setVisible(false);
        jLabel13.setVisible(false);
        jPanel9.setVisible(false);
        btn_logout.setVisible(true);
        pnl_category.setVisible(false);
        tf_barcode.setVisible(false);
        lbl_next_customer.setVisible(false);
        btn_billings.setVisible(false);
        btn_voider.setVisible(false);
        btn_stockin_out.setVisible(false);
        cb_table_location.setVisible(false);
        tf_search.setEnabled(false);
        jButton10.setEnabled(true);
        btn_expenses.setEnabled(false);
        btn_clear_all.setEnabled(false);
        btn_pay.setEnabled(false);
        tf_search.setVisible(false);
        jLabel6.setVisible(false);
        btn_credit_card_reflenish.setVisible(false);
        btn_remit.setVisible(false);
        btn_outside_cash.setVisible(false);
        btn_staff_prepaid.setVisible(false);
    }
    int my_search = 0;
    int ordering_setter = 0;

    private void init_table_location() {
        List<String> datas = S1_table_location.ret_cb_data();
        cb_table_location.setModel(new ListComboBoxModel(datas));
        if (!datas.isEmpty()) {
            String table_location = cb_table_location.getSelectedItem().
                    toString();
            table_location_id = "" + S1_table_location.ret_location_id(table_location);
        }
        init_rooms();
    }

    private void set_table_locations() {
        String table_location = cb_table_location.getSelectedItem().
                toString();
        table_location_id = "" + S1_table_location.ret_location_id(table_location);
        init_rooms();
    }

    private void set_or() {
        lbl_or_no.setText(Svc_1.increment_id());

    }

    private void key() {
        final Window p = (Window) this;
        KeyListener kl = new KeyAdapter() {

            @Override
            public void keyReleased(KeyEvent evt) {
                if (evt.getKeyCode() == KeyEvent.VK_F9) {
                    evt.consume();
                    Dlg_blind nd = Dlg_blind.create(p, true);
                    nd.setTitle("");

                    nd.setCallback(new Dlg_blind.Callback() {

                        @Override
                        public void ok(CloseDialog closeDialog, Dlg_blind.OutputData data) {
                            closeDialog.ok();
                        }
                    });
                    Toolkit tk = Toolkit.getDefaultToolkit();
                    int xSize = ((int) tk.getScreenSize().
                            getWidth());
                    int ySize = ((int) tk.getScreenSize().
                            getHeight());

                    nd.setSize(xSize, ySize);
                    nd.setVisible(true);

                }
            }
        };

        this.addKeyListener(kl);
    }

    private void scrolling() {
        Scrolling.ComponentDragScrollListener l = new Scrolling.ComponentDragScrollListener(jg_orders);
        jg_orders.addMouseMotionListener(l);
        jg_orders.addMouseListener(l);
        jg_orders.addHierarchyListener(l);

        Scrolling.ComponentDragScrollListener l2 = new Scrolling.ComponentDragScrollListener(jg_items);
        jg_items.addMouseMotionListener(l2);
        jg_items.addMouseListener(l2);
        jg_items.addHierarchyListener(l2);

        Scrolling.ComponentDragScrollListener l3 = new Scrolling.ComponentDragScrollListener(jg_categories);
        jg_categories.addMouseMotionListener(l3);
        jg_categories.addMouseListener(l3);
        jg_categories.addHierarchyListener(l3);
    }

    private void max_guest_panel() {
        if (jButton3.getText().
                equals("-")) {
            pnl_holder_guest_details.setVisible(false);
        } else {
            pnl_holder_guest_details.setVisible(true);
        }

    }

    private void set_visible() {
        btn_add_order.setVisible(false);
        btn_back.setVisible(false);
        btn_pay.setVisible(false);
        pnl_holder_guest_details.setVisible(false);

    }
    Popup popup;
    Popup popup2;
    Popup popup3;
    Popup popup_check;
    Popup popup_menu_admin;
    String user_id = "";

    private void hide_popups() {
        jLabel7.setVisible(false);
        lbl_or_no.setVisible(false);
        if (popup != null) {
            popup.hide();
        }
        if (popup2 != null) {
            popup2.hide();
        }
        if (popup3 != null) {
            popup3.hide();
        }
        if (popup_check != null) {
            popup_check.hide();
        }
        if (popup_menu_admin != null) {
            popup_menu_admin.hide();
        }
        clear_categories();
        clear_items();
        clear_room();
        clear_orders();
    }

    private void my_version() {

        payments = 1;
        lbl_prepare.setVisible(false);
        String version = System.getProperty("version", "resto");
        System.out.println(version);
        if (to_users.user_level1 == null) {
            user_id = "6";
        } else if (to_users.user_level1.equals("0")) {
            user_id = "0";
        } else if (to_users.user_level1.equals("1")) {
            user_id = "1";

        } else if (to_users.user_level1.equals("5")) {
            user_id = "5";

        } else if (to_users.user_level1.equals("7")) {
            user_id = "7";
        } else {
            user_id = "6";
        }

        jLabel3.setText("Name:");
        btn_menu.setVisible(true);
        if (version.equals("retail")) {
            if (user_id.equals("1")) {
                clear_room();
                clear_categories();
                clear_items();
                pnl_holder_search.setVisible(true);
                pnl_category.setVisible(false);
            } else {
//                lbl_next_customer.setVisible(true);
                if (user_id.equals("0")) {
                    btn_clear_all.setVisible(true);
                    pnl_holder_guest_details.setVisible(false);
                    btn_pay.setVisible(true);
                    pnl_category.setVisible(true);
                }
            }
            ordering_setter = 1;
        }
        if (version.equals("resto")) {
            btn_expenses.setEnabled(true);
            cb_table_location.setVisible(true);
            btn_voider.setVisible(true);
            ordering_setter = 0;
            if (user_id.equals("1")) {
                clear_room();
                clear_categories();
                clear_items();
                pnl_holder_search.setVisible(true);
                jButton10.setVisible(true);
                btn_menu.setVisible(true);
//                cb_table_location.setVisible(false);
                btn_expenses.setVisible(false);
                btn_charge_to_room.setVisible(false);
                btn_charge_to_room.setVisible(false);
                btn_voider.setVisible(false);
                btn_credit_card_reflenish.setVisible(true);
                btn_billings.setVisible(true);
                btn_outside_cash.setVisible(true);
                btn_staff_prepaid.setVisible(true);
            }
            if (user_id.equals("5") || user_id.equals("6")) {
                btn_charge_to_room.setVisible(true);
                btn_voider.setVisible(true);

                jButton10.setVisible(true);
                btn_logout.setVisible(true);
                btn_menu.setVisible(false);
                btn_outside_cash.setVisible(false);

                clear_room();
                clear_categories();
                clear_items();
                btn_clear_all.setVisible(false);
                pnl_holder_guest_details.setVisible(true);
                pnl_category.setVisible(false);

                lbl_payment.setVisible(true);
                jLabel14.setVisible(true);
                lbl_advance_payment.setVisible(true);
                jLabel1.setVisible(true);
                lbl_guest_no.setVisible(true);
                btn_expenses.setVisible(true);
                btn_credit_card_reflenish.setVisible(false);
                btn_billings.setVisible(false);
                if (user_id.equals("6")) {

                    btn_pay.setVisible(true);
                }
                btn_staff_prepaid.setVisible(false);
            }
            if (user_id.equals("6")) {

            }
        }

        if (version.equals("ordering")) {
            jLabel1.setVisible(false);
            lbl_payment.setVisible(false);
            lbl_guest_no.setVisible(false);
            jLabel11.setText("TABLE RATE:");
            jLabel14.setVisible(false);
            tf_search.setVisible(true);
            jLabel6.setVisible(true);
            btn_voider.setVisible(true);
            lbl_advance_payment.setVisible(false);
            btn_logout.setVisible(true);
            jLabel3.setText("Cashier/Waiter:");
            btn_stockin_out.setVisible(true);
            btn_clear_all.setVisible(false);
            if (user_id.equals("7")) {
                clear_room();
                clear_categories();
                clear_items();

                pnl_holder_guest_details.setVisible(true);
                pnl_category.setVisible(false);
                jLabel3.setVisible(false);
                cb_guest.setVisible(false);
            } else {
                jLabel3.setVisible(true);
                cb_guest.setVisible(true);
            }

            if (user_id.equals("1")) {
                pnl_holder_search.setVisible(true);
                lbl_next_customer.setVisible(false);
                btn_menu.setVisible(true);
                jButton10.setEnabled(false);
                cb_table_location.setVisible(false);
                btn_expenses.setVisible(false);

            } else {
                jButton10.setEnabled(true);
                pnl_holder_search.setVisible(true);
                btn_menu.setVisible(false);
                lbl_prepare.setVisible(true);
                btn_expenses.setEnabled(true);
                cb_table_location.setVisible(true);
                btn_expenses.setVisible(true);
                cb_table_location.setVisible(true);
                btn_remit.setVisible(true);
            }
        }
        if (version.equals("endorsements")) {
            if (user_id.equals("1")) {
                clear_room();
                clear_categories();
                clear_items();
                pnl_holder_search.setVisible(true);
            }
            if (user_id.equals("0")) {
                btn_clear_all.setVisible(true);
            }
        }

        btn_pay.setVisible(false);
        String ui_items = System.getProperty("ui_items", "list");

        if (ui_items.equals("icon")) {
            js_orders.setVisible(false);
            js_items.setVisible(false);
            sp_orders.setVisible(true);
            sp_items.setVisible(true);
            pnl_category.setVisible(false);
            pnl_holder_guest_details.setVisible(false);
            sp_cat.setVisible(true);
            jScrollPane2.setVisible(false);

            jButton6.setVisible(true);
            jButton7.setVisible(true);
            jButton9.setVisible(true);
            jButton8.setVisible(true);
        }
        if (ui_items.equals("list")) {
            js_orders.setVisible(true);
            js_items.setVisible(false);
            sp_orders.setVisible(true);
            sp_items.setVisible(false);
            jButton2.setVisible(false);
            jButton1.setVisible(false);
            pnl_category.setVisible(false);
            pnl_holder_guest_details.setVisible(false);
            sp_cat.setVisible(false);
            jScrollPane2.setVisible(true);

            jButton6.setVisible(false);
            jButton7.setVisible(false);
            jButton9.setVisible(false);
            jButton8.setVisible(false);
        }
        if (ui_items.equals("barcode")) {
            pnl_holder_items.setVisible(false);
            sp_orders.setVisible(false);
            jButton9.setVisible(false);
            jButton8.setVisible(false);
            tf_barcode.setVisible(true);
            btn_pay.setVisible(true);
            btn_clear_all.setVisible(true);
        }
    }

    private void clear_room() {
        orders_model.clear();
        jg_orders.setModel(orders_model);
    }

    private void clear_categories() {
        cat_model.clear();
        jg_categories.setModel(cat_model);
    }

    private void clear_items() {
        item_model.clear();
        jg_items.setModel(item_model);
    }

    private void remove_pop_orders() {
        if (popup == null) {
        } else {
            popup.hide();
        }
    }

    private void remove_pop_items() {
        if (popup2 == null) {
        } else {
            popup2.hide();
        }
    }

    private void remove_pop_orders_cancel() {
        if (popup3 == null) {
        } else {
            popup3.hide();
        }
    }

    private void get_clicked_items() {
        remove_pop_items();
        int row = jg_items.getSelectedIndex();
        if (row < 0) {
            return;
        }
        Object j = item_model.getElementAt(row);
        S2_search.to_items t = (S2_search.to_items) j;

        int row_order = orders_model.size();
        int trap = 0;
        for (int i = 0; i < row_order; i++) {
            Object j_orders = orders_model.getElementAt(i);
            S2_search.to_orders t_orders = (S2_search.to_orders) j_orders;
            if (t.name.equals(t_orders.name)) {
                if (t.qty > 0) {
                    t_orders.setQty(t_orders.qty + input_qty);
                    t.setQty(t.qty - input_qty);
                    trap = 1;
                    init_orders_ref();
                    break;
                } else {
                    trap = 1;
                    break;
                }
            } else {
                trap = 0;
            }

        }
        if (trap == 0) {
            S2_search.to_orders t1 = new S2_search.to_orders(t.name, t.uom, t.desc, t.price, input_qty, t.img_path, t.qty2, new ArrayList(), 0, t.cat_id, t.category_name, t.printing_assembly, t.disc_name, t.disc_rate, t.discount, t.customer_name, t.customer_address, t.customer_address, t.group_id, t.nights, t.item_package_id, t.sub_category_name, t.sub_category_id);
            init_orders(t1);
            t.setQty(t.qty - input_qty);
        }
        set_amount();
        order_count();
    }

    private void get_clicked_orders_cancel() {
        if (user_id.equals("1")) {
        } else {
            int row = jg_orders.getSelectedIndex();
            if (row >= 0) {
                Object j_orders = orders_model.getElementAt(row);
                S2_search.to_orders t_orders = (S2_search.to_orders) j_orders;

                double qty0 = t_orders.qty;
                int row_order = item_model.size();
                int trap = 0;
                for (int i = 0; i < row_order; i++) {
                    Object t_item = item_model.getElementAt(i);
                    S2_search.to_items t_items = (S2_search.to_items) t_item;
                    if (t_items.name.equals(t_orders.name)) {

                        t_orders.setQty(input_qty2);
                        double qty = qty0 - input_qty2;
                        t_items.setQty(t_items.qty + qty);
                        trap = 1;
                        break;
                    } else {

                    }

                }
                init_orders_ref();
                update_qty_items();
                set_amount();
                order_count();
            }

        }

    }

    private void update_qty_items() {
        int row = orders_model.size();
        int row_items = item_model.size();
        String version = System.getProperty("version", "ordering");
        if ((user_id.equals("0") && version.equals("resto")) || (user_id.equals("0") && version.
                equals("retail"))) {
            for (int i = 0; i < row; i++) {
                Object j_orders = orders_model.getElementAt(i);
                S2_search.to_orders t_orders = (S2_search.to_orders) j_orders;

                for (int o = 0; o < row_items; o++) {
                    Object t_items = item_model.getElementAt(o);
                    S2_search.to_items t_item = (S2_search.to_items) t_items;
                    if (t_item.name.equals(t_orders.name)) {

                        t_item.setQty(t_item.qty2 - t_orders.qty);
                        break;
                    }
                }

            }
        }
    }
    String cat_name = "";
    int open_item = 0;

    private void get_clicked_category() {
        final String ui_items = System.getProperty("ui_items", "list");
        if (ui_items.equals("list")) {
            int idx = tbl_category.getSelectedRow();
            if (idx < 0) {

            } else {
                final to_name_cat to = (to_name_cat) tbl_category_ALM.get(tbl_category.
                        convertRowIndexToModel(idx));
                category_id = to.num;
                cat_name = to.name;
                open_item = to.open_item;
            }
        } else {
            int row = jg_categories.getSelectedIndex();
            if (row < 0) {
                return;
            }
            Object j = cat_model.getElementAt(row);
            to_name_cat t = (to_name_cat) j;

            category_id = t.num;
            cat_name = t.name;
            item_model.clear();
            open_item = t.open_item;
        }
        type_id = 0;

    }
    int tbl_location_id = -1;
    int table_ids = 0;
    int room_guest_id = 0;

    private void set_order_pop() {

        final String versions = System.getProperty("version", "ordering");
        final String ui_items = System.getProperty("ui_items", "list");
        if ((user_id.equals("0") && versions.equals("resto")) || (user_id.equals("0") && versions.
                equals("retail")) || my_order == 1) {
            int row = 0;
            Object j = new Object();
            if (row < 0) {
                return;
            }
            if (ui_items.equals("list")) {
                row = tbl_orders.getSelectedRow();
                j = tbl_table_orders_ALM.getElementAt(row);
            } else {
                row = jg_orders.getSelectedIndex();
                j = orders_model.getElementAt(row);
            }
            final S2_search.to_orders to = (S2_search.to_orders) j;
            Window p = (Window) this;
            Dlg_quantity_menu nd = Dlg_quantity_menu.create(p, true);
            nd.setTitle("");
            nd.do_pass4();
            nd.do_pass_order(to);

            nd.setCallback(new Dlg_quantity_menu.Callback() {

                @Override
                public void cancel(CloseDialog closeDialog, Dlg_quantity_menu.OutputData data) {
                    closeDialog.ok();
                    edit_item(data.to_items, data.to_sub, data.to_pay);
                }

                @Override
                public void order(CloseDialog closeDialog, Dlg_quantity_menu.OutputData data) {
                    closeDialog.ok();
                    order_item(data.to_items, data.to_sub, data.to_pay);
                }

                @Override
                public void remove(CloseDialog closeDialog) {
                    closeDialog.ok();
                    int row = 0;
                    if (row < 0) {
                        return;
                    }
                    if (ui_items.equals("list")) {
                        row = tbl_orders.getSelectedRow();
                        tbl_table_orders_ALM.remove(row);
                        tbl_orders_M.fireTableDataChanged();
                    } else {
                        row = jg_orders.getSelectedIndex();
                        orders_model.remove(row);

                        jg_orders.setModel(orders_model);
                    }
                }
            });
            Center.setCenter(nd); //sp_items
            nd.setLocationRelativeTo(sp_cat);
            nd.setVisible(true);
        }
        if (user_id.equals("6") || user_id.equals("5") || user_id.equals("7")
                || ((user_id.equals("0") && versions.equals("ordering") && my_order == 0))) {
            int row = 0;
            row = jg_orders.getSelectedIndex();
            if (row < 0) {
                return;
            }
            item_model.clear();
            jg_items.setModel(item_model);
            selected_guest.clear();

            Object value = new Object();
            value = orders_model.getElementAt(row);
            final S2_search.to_rooms t = (S2_search.to_rooms) value;
            table_id = t.id;
            table_name = t.room;
            table_ids = FitIn.toInt(t.id);
            lbl_table_no.setText(t.room);
            tbl_location_id = t.table_location_id;
            List<Dlg_check_liquid.to_guests> datas = t.to_guest;
            List<Dlg_check_liquid.to_guests> datas2 = new ArrayList();
            for (Dlg_check_liquid.to_guests tg : datas) {
                String id = tg.id;
                String name = tg.name;
                boolean status = false;
                int staff2 = tg.staff;
                int room_guest_id = tg.room_guest_id;
                Dlg_check_liquid.to_guests ti = new Dlg_check_liquid.to_guests(id, name, status, staff2, room_guest_id, tg.table_guest_ids, tg.room_guest_ids, tg.table_id);
                datas2.add(ti);
            }

            List<String> guest = new ArrayList();
            final String version = System.getProperty("version", "ordering");
            if (version.equals("ordering")) {
                jLabel1.setVisible(false);
                lbl_guest_no.setVisible(false);
                List<String> aw = S1_guest.ret_cb_data();
                if (user_id.equals("7")) {
                    jLabel3.setVisible(false);
                    cb_guest.setVisible(false);
                } else {
                    jLabel3.setVisible(true);
                    cb_guest.setVisible(true);
                }
                for (String g : aw) {
                    guest.add(g);
                }
            } else {
                guest.add("ALL");
                for (Dlg_check_liquid.to_guests g : datas) {
                    guest.add(g.name);
                }
            }

            cb_guest.setModel(new ListComboBoxModel(guest));
            lbl_guest_no.setText("");
            count_other_orders = 0;
            my_guest.clear();

//            init_items();
            Window p = (Window) this;
            final Dlg_check_liquid nd = Dlg_check_liquid.create(p, true);
            nd.setTitle("");
            nd.do_pass2(jg_orders, orders_model, row, t.id, t.type, t.percentage, user_id, t.status, tbl_table_orders_ALM, t.name, t.room_rate);
            nd.do_pass(datas2, t, user_id, count_other_orders);

            nd.setCallback(new Dlg_check_liquid.Callback() {
                @Override
                public void print_order(CloseDialog closeDialog) {
                    lbl_table_no.setText(t.id);
                    print_orders();
                }

                @Override
                public void cancel(CloseDialog closeDialog, Dlg_check_liquid.OutputData data) {
                    closeDialog.ok();
                    my_order = 0;
                    my_guest = data.to1;

                    clear_table(t.id, "");
                }

                @Override
                public void check_in(CloseDialog closeDialog, Dlg_check_liquid.OutputData data) {
                    closeDialog.ok();
                    my_guest_size = data.guest_size;
                    lbl_table_no.setText(t.id);
                    check_ins();
                    if (System.getProperty("version", "ordering").
                            equals("resto")) {
                    }
                    sp_orders.updateUI();
                }

                @Override
                public void check_out(CloseDialog closeDialog, Dlg_check_liquid.OutputData data) {

                    if (version.equals("ordering")) {
                        my_guest_size = data.guest_size;
                        closeDialog.ok();
                        my_guest = data.to1;

                        payments(FitIn.fmt_wc_0(lbl_guest_total.getText()));

                    } else {
                        my_guest = data.to1;
                        if (my_guest.isEmpty()) {
                            return;
                        }

                        if (my_guest.size() > 1) {
                            guest_ids = "zzz";
                        } else {
                            guest_ids = data.guest_id;
                        }

                        if (my_guest.isEmpty()) {
                            int i = 0;
                            my_guest_room_ids = "";
                            my_guest_ids = "";
                            my_guest_names = "";
                            for (Dlg_check_liquid.to_guests g : data.all_guest) {
                                if (i == 0) {
                                    my_guest_room_ids = my_guest_room_ids + g.room_guest_ids;
                                    my_guest_ids = my_guest_ids + g.id;
                                    my_guest_names = my_guest_names + g.name;
                                } else {
                                    my_guest_room_ids = my_guest_room_ids + "," + g.room_guest_ids;
                                    my_guest_ids = my_guest_ids + "," + g.id;
                                    my_guest_names = my_guest_names + "," + g.name;
                                }
                                i++;
                            }
                        } else {
                            int i = 0;
                            my_guest_room_ids = "";

                            my_guest_ids = "";
                            my_guest_names = "";
                            for (Dlg_check_liquid.to_guests g : my_guest) {
                                if (i == 0) {
                                    my_guest_room_ids = my_guest_room_ids + g.room_guest_ids;
                                    my_guest_ids = my_guest_ids + g.id;
                                    my_guest_names = my_guest_names + g.name;
                                } else {
                                    my_guest_room_ids = my_guest_room_ids + "," + g.room_guest_ids;
                                    my_guest_ids = my_guest_ids + "," + g.id;
                                    my_guest_names = my_guest_names + "," + g.name;
                                }
                                i++;
                            }
                        }

                        payments(FitIn.fmt_wc_0(lbl_guest_total.getText()));
                    }
                }

                @Override
                public void order(CloseDialog closeDialog, Dlg_check_liquid.OutputData data) {
                    closeDialog.ok();
                    ord = 1;
                    my_order = 1;
                    init_tbl_customer_tables_details();
                    my_guest_size = data.guest_size;
                    tbl_customer_tables_details_ALM.clear();
                    tbl_customer_tables_details_M.fireTableDataChanged();
                    my_order = 1;
                    my_guest = data.to1;
                    split_guest = data.to1;
                    lbl_split.setText("" + my_guest.size());
                    lbl_table_no.setText(t.id);
                    tbl_id = t.id;
                    tbl_room_rate = t.room_rate;
                    tbl_topay = t.topay;
                    pnl_category.setVisible(true);

                    btn_add_order.setVisible(true);
                    btn_back.setVisible(true);
                    item_model.clear();
                    jg_items.setModel(item_model);
                    init_cashier();
                    init_catogories();
                    pnl_holder_guest_details.setVisible(false);
                    if (versions.equals("ordering")) {
                        cb_table_location.setVisible(false);
                    }
                    if (ui_items.equals("list")) {
                        js_items.setVisible(true);
                        js_orders.setVisible(true);
                        sp_orders.setVisible(false);
                        sp_items.setVisible(false);

                    } else {
                        js_items.setVisible(false);
                        js_orders.setVisible(false);
                        sp_orders.setVisible(true);
                        sp_items.setVisible(true);
                    }

                    clear_room();

                    jLabel6.setVisible(true);
                    sp_orders.updateUI();
                    tf_search.setEnabled(true);

                    tf_search.setVisible(true);

                    jLabel6.setVisible(true);

                    jButton10.setVisible(false);
                    btn_voider.setVisible(false);
                    btn_clear_all.setVisible(true);
                    cb_table_location.setVisible(false);
                    jButton11.setVisible(false);
                    btn_standby.setVisible(false);
                    btn_logout.setVisible(false);
                    btn_clear_all.setEnabled(true);

                    btn_remit.setVisible(false);
                    btn_expenses.setVisible(false);
                    btn_charge_to_room.setVisible(false);
                    jLabel15.setVisible(false);
                    tf_search.grabFocus();
                }

                @Override
                public void add_guest(CloseDialog closeDialog, Dlg_check_liquid.OutputData data) {
                    lbl_table_no.setText(t.id);
                    my_guest_size = data.guest_size;
                    t.setPercentage(data.percentages);
                    clear_room();
                    init_rooms();
                    lbl_check_date.setText("");
                    lbl_rate.setText("");
                    lbl_oders_payment.setText("0.00");
                    lbl_advance_payment.setText("0.00");
                    lbl_guest_total.setText("0.00");
                    Prompt.call("Guest Added");
                    sp_orders.updateUI();
                }

                @Override
                public void set_order(CloseDialog closeDialog, Dlg_check_liquid.OutputData data) {
                    selected_guest = data.to1;
                    my_guest = data.to1;
                    my_guest_size = data.guest_size;
                    set_multiple_guest_orders();
                    sp_orders.updateUI();
                    tbl_customer_tables_details_M.fireTableDataChanged();
                }

                @Override
                public void set_bill(CloseDialog closeDialog, Dlg_check_liquid.OutputData data) {
                    closeDialog.ok();
                    my_guest.clear();
                    my_guest = data.to1;
                    my_guest_size = data.guest_size;
                    billing();
                }

                @Override
                public void set_prepaid(CloseDialog closeDialog, Dlg_check_liquid.OutputData data) {
                    closeDialog.ok();
                    my_guest_size = data.guest_size;
                    String guest_id = "";
                    String guest = "";
                    for (Dlg_check_liquid.to_guests t : data.to1) {
                        guest_id = t.id;
                        guest = t.name;
                        room_guest_id = t.room_guest_id;
                    }
                    advance_payment(guest_id, guest, t.id);
                }

                @Override
                public void transfer(CloseDialog closeDialog, Dlg_check_liquid.OutputData data) {
                    closeDialog.ok();
                    my_guest_size = data.guest_size;
                    clear_room();
                    init_rooms();
                    Prompt.call("Successfully Transferred");
                }

                @Override
                public void accomodation(CloseDialog closeDialog, Dlg_check_liquid.OutputData data) {
                    closeDialog.ok();
                    my_guest_size = data.guest_size;
                    init_rooms();
                }
            });
            nd.setLocationRelativeTo(sp_orders);
            nd.setVisible(true);

        }
    }

    private void print_orders() {
        String table_name = S1_prepare_order1.get_table_name(lbl_table_no.
                getText());
        String room_no = table_name;
        String guess_names = "";
        List<Dlg_check_liquid.to_guests> guest1 = my_guest;
        int u = 0;

        for (Dlg_check_liquid.to_guests t : guest1) {
            if (u == 0) {
                guess_names = guess_names + t.name + "";
            } else {
                guess_names = guess_names + ", " + t.name + "";
            }
            u++;
        }

        Window p = (Window) this;
        Dlg_print_orders_by_date nd = Dlg_print_orders_by_date.create(p, true);
        nd.setTitle("");
        List<S2_search.to_items> orders = tbl_customer_tables_details_ALM;
        nd.do_pass(orders, room_no, guess_names, guest1);
        nd.setCallback(new Dlg_print_orders_by_date.Callback() {

            @Override
            public void ok(CloseDialog closeDialog, Dlg_print_orders_by_date.OutputData data) {
                closeDialog.ok();
            }
        });
        nd.setLocationRelativeTo(this);
        nd.setVisible(true);
    }

    int my_guest_size = 0;
    String my_guest_room_ids = "";
    String my_guest_ids = "";
    String my_guest_names = "";

    private void advance_payment(String guest_id, String guest, String room_id) {

        String room_no = lbl_table_no.getText();

        double paid = FitIn.toDouble(lbl_advance_payment.getText());
        double to_pay = ((FitIn.toDouble(lbl_rate.getText()) + FitIn.toDouble(lbl_oders_payment.
                getText())) - paid);
        Window p = (Window) this;
        Dlg_advance_payment nd = Dlg_advance_payment.create(p, true);
        nd.setTitle("");

        nd.do_pass(room_no, guest_id, guest, paid, to_pay, room_id, room_guest_id, advance_usd);
        nd.setCallback(new Dlg_advance_payment.Callback() {

            @Override
            public void ok(CloseDialog closeDialog, Dlg_advance_payment.OutputData data) {

            }
        });
        nd.setLocationRelativeTo(this);

        nd.setVisible(true);
    }
    List<Dlg_check_liquid.to_guests> selected_guest = new ArrayList();

    private void clear_table(final String table_i, final String guest_id) {
        final String ui_items = System.getProperty("ui_items", "list");
        if (System.getProperty("version", "resto").
                equals("resto")) {
            if (ui_items.equals("list")) {
                if (tbl_customer_tables_details_ALM.isEmpty()) {

                    S2_guest_charges.clear_room_wo_orders(table_id, my_guest);
                    clear_room();
                    clear_items();
                    init_cashier();
                    init_items();
                    init_rooms();
                    Prompt.call("TABLE CLEARED");
                } else {

                    Window w = (Window) this;
                    Dlg_authenticate d = Dlg_authenticate.create(w, true);
                    d.setTitle("");

                    d.setCallback(new Dlg_authenticate.Callback() {

                        @Override
                        public void ok(CloseDialog cd, Dlg_authenticate.OutputData data) {
                            cd.ok();
                            S2_guest_charges.clear_room_w_orders(table_id, my_guest);
                            clear_room();
                            clear_items();
                            init_cashier();
                            init_items();
                            init_rooms();
                            Prompt.call("TABLE CLEARED");
                        }

                        @Override
                        public void show_login_again(CloseDialog closeDialog) {
                        }
                    });
                    Center.setCenter(d);
                    d.setVisible(true);
                }
            } else {
                if (item_model.isEmpty()) {

                    S2_guest_charges.clear_room_wo_orders(table_id, my_guest);
                    clear_room();
                    clear_items();
                    init_cashier();
                    init_items();
                    init_rooms();
                    Prompt.call("TABLE CLEARED");
                } else {

                    Window w = (Window) this;
                    Dlg_authenticate d = Dlg_authenticate.create(w, true);
                    d.setTitle("");

                    d.setCallback(new Dlg_authenticate.Callback() {

                        @Override
                        public void ok(CloseDialog cd, Dlg_authenticate.OutputData data) {
                            cd.ok();
                            S2_guest_charges.clear_room_w_orders(table_id, my_guest);
                            clear_room();
                            clear_items();
                            init_cashier();
                            init_items();
                            init_rooms();
                            Prompt.call("TABLE CLEARED");
                        }

                        @Override
                        public void show_login_again(CloseDialog closeDialog) {
//                closeDialog.ok();
                        }
                    });
                    Center.setCenter(d);
                    d.setVisible(true);

                }
            }

        } else {
            if (ui_items.equals("list")) {
                if (tbl_customer_tables_details_ALM.isEmpty()) {

                    Window w = (Window) this;
                    Dlg_authenticate d = Dlg_authenticate.create(w, true);
                    d.setTitle("");

                    d.setCallback(new Dlg_authenticate.Callback() {

                        @Override
                        public void ok(CloseDialog cd, Dlg_authenticate.OutputData data) {
                            cd.ok();
                            if (user_id.equals("5")) {
                                S2_guest_charges.clear_room_wo_orders_front(table_id, my_guest);
                            } else {
                                S2_guest_charges.clear_room_wo_orders_top(table_id, my_guest);
                            }
                            clear_room();
                            clear_items();
                            init_cashier();
                            init_items();
                            init_rooms();
                            Prompt.call("ROOM CLEARED");
                        }

                        @Override
                        public void show_login_again(CloseDialog closeDialog) {

                        }
                    });
                    Center.setCenter(d);
                    d.setVisible(true);
                } else {

                    Window w = (Window) this;
                    Dlg_authenticate d = Dlg_authenticate.create(w, true);
                    d.setTitle("");

                    d.setCallback(new Dlg_authenticate.Callback() {

                        @Override
                        public void ok(CloseDialog cd, Dlg_authenticate.OutputData data) {
                            cd.ok();
                            if (user_id.equals("5")) {
                                S2_guest_charges.clear_room_w_orders_front(table_id);
                            } else {
                                S2_guest_charges.clear_room_w_orders_top(table_id);
                            }

                            clear_room();
                            clear_items();
                            init_cashier();
                            init_items();
                            init_rooms();
                            Prompt.call("ROOM CLEARED");
                        }

                        @Override
                        public void show_login_again(CloseDialog closeDialog) {

                        }
                    });
                    Center.setCenter(d);
                    d.setVisible(true);

                }
            } else {
                if (item_model.isEmpty()) {
                    if (user_id.equals("5")) {
                        S2_guest_charges.clear_room_wo_orders_front(table_id, my_guest);
                    } else {
                        S2_guest_charges.clear_room_wo_orders_top(table_id, my_guest);
                    }

                    clear_room();
                    clear_items();
                    init_cashier();
                    init_items();
                    init_rooms();
                    Prompt.call("ROOM CLEARED");
                } else {

                    Window w = (Window) this;
                    Dlg_authenticate d = Dlg_authenticate.create(w, true);
                    d.setTitle("");

                    d.setCallback(new Dlg_authenticate.Callback() {

                        @Override
                        public void ok(CloseDialog cd, Dlg_authenticate.OutputData data) {
                            cd.ok();
                            if (user_id.equals("5")) {
                                S2_guest_charges.clear_room_w_orders_front(table_id);
                            } else {
                                S2_guest_charges.clear_room_w_orders_top(table_id);
                            }

                            clear_room();
                            clear_items();
                            init_cashier();
                            init_items();
                            init_rooms();
                            Prompt.call("TABLE CLEARED");
                        }

                        @Override
                        public void show_login_again(CloseDialog closeDialog) {

                        }
                    });
                    Center.setCenter(d);
                    d.setVisible(true);

                }
            }

        }
    }

    private void set_guest_orders() {

        final String ui_items = System.getProperty("ui_items", "list");
        String version = System.getProperty("version", "ordering");
        if (version.equals("ordering") && user_id.equals("0")) {
            return;
        }
        int row = 0;
        Object value = new Object();

        row = jg_orders.getSelectedIndex();
        if (row < 0) {
            return;
        }
        item_model.clear();
        jg_items.setModel(item_model);
        value = orders_model.getElementAt(row);

        S2_search.to_rooms t = (S2_search.to_rooms) value;
        List<S2_search.to_items> results = new ArrayList();
        String guest = cb_guest.getSelectedItem().
                toString();

        double advance = 0;
        if (guest.equals("ALL")) {
            lbl_guest_no.setText("");
            results = S2_search.ret_items_room(t.id, my_guest.size(), my_guest_size);
            advance = S1_cash_advance.get_guest_advance_all(t.id, lbl_guest_no.
                    getText());
        } else {
            lbl_guest_no.setText(S1_cash_advance.get_guest_id(cb_guest.
                    getSelectedItem().
                    toString()));
            advance = S1_cash_advance.get_guest_advance(t.id, lbl_guest_no.
                    getText());
            results = S2_search.ret_guest_orders(t.id, guest);
        }
        String where_guest = "";
        String where_charge = "";
        int ii = 0;

        if (guest.equals("ALL")) {
            where_guest = where_guest + "where status='" + "0" + "' and table_no_id = '" + t.id + "'";
            where_charge = where_charge + "where status='" + "0" + "' and table_no = '" + t.id + "'";
        } else {
            where_guest = where_guest + " where table_no_id = '" + t.id + "' and status<>'" + "1" + "' and guest_name like '%" + guest + "%'";
            where_charge = where_charge + " where table_no = '" + t.id + "' and status<>'" + "1" + "' and guest_name like '%" + guest + "%'";
        }
        results = S2_search.ret_guest_orders_where(t.id, where_guest, my_guest.
                size(), my_guest_size, "", "");

        double charge = S2_search.ret_guest_chargers_where(t.id, where_charge);

        int i = 0;

        lbl_check_date.setText(t.date_added);

        lbl_rate.setText(FitIn.fmt_wc_0(charge));
        System.out.println(charge + " aasdasdasd");
        double payment = 0;
        if (ui_items.equals("list")) {
            List<S2_search.to_items> datas = new ArrayList();

            for (S2_search.to_items s : results) {
                S2_search.to_items to = new S2_search.to_items(s.name, s.uom, s.desc, s.price, s.qty, s.img_path, s.qty2, s.guest_id, s.cat_id, s.category_name, s.printing_assembly, s.status, s.disc_name, s.disc_rate, s.discount, s.customer_name, s.customer_address, s.customer_address, s.date_added, s.group_id, s.nights, s.guest_no, s.check_out, s.room_guest_id, s.user_name, s.item_package_id, s.sub_category_name, s.sub_category_id, s.order_no);
                datas.add(to);
                payment += s.qty * s.price;
                i++;
            }
            loadData_customer_tables_details(datas);
            tbl_customer_tables_details_M.fireTableDataChanged();
        } else {
            for (S2_search.to_items s : results) {
                S2_search.to_items to = new S2_search.to_items(s.name, s.uom, s.desc, s.price, s.qty, s.img_path, s.qty2, s.guest_id, s.cat_id, s.category_name, s.printing_assembly, s.status, s.disc_name, s.disc_rate, s.discount, s.customer_name, s.customer_address, s.customer_address, s.date_added, s.group_id, s.nights, s.guest_no, s.check_out, s.room_guest_id, s.user_name, s.item_package_id, s.sub_category_name, s.sub_category_id, s.order_no);
                item_model.add(i, to);
                payment += s.qty * s.price;
                i++;
            }

            jg_items.setModel(item_model);
            jg_items.setFixedCellDimension(170);
            jg_items.setHorizonztalMargin(4);
            jg_items.setVerticalMargin(10);
            jg_items.setCellBackground(Color.white);
            jg_items.setSelectionBackground(Color.lightGray);

            jg_items.getCellRendererManager().
                    setDefaultRenderer(new Items());
        }

        lbl_advance_payment.setText("" + advance);

        lbl_oders_payment.setText(FitIn.fmt_wc_0(payment));
        lbl_guest_total.setText("" + ((FitIn.toDouble(lbl_oders_payment.getText()) + FitIn.toDouble(lbl_rate.getText())) - FitIn.toDouble(lbl_advance_payment.getText())));
        lbl_amount.setText(lbl_guest_total.getText());

    }
    double advance_usd = 0;
    double advance_credit_card = 0;
    int staff = 0;
    String guest_ids = "";

    private void set_multiple_guest_orders() {
        final String ui_items = System.getProperty("ui_items", "list");
        int row = 0;
        Object value = new Object();

        row = jg_orders.getSelectedIndex();
        if (row < 0) {
            return;
        }
        item_model.clear();
        jg_items.setModel(item_model);
        value = orders_model.getElementAt(row);

        S2_search.to_rooms t = (S2_search.to_rooms) value;
        List<S2_search.to_items> results = new ArrayList();
        String guest = cb_guest.getSelectedItem().
                toString();
        String where_guest = "";
        String where_charge = "";
        String where_advance = "";
        String where_guest_11 = "";
        String where_guest_11_dive = "";
        String where_others = "";
        int ii = 0;

        if (selected_guest.isEmpty()) {

            if (to_users.user_level1.equals("6")) {
                where_guest = where_guest + "where status = '" + "100" + "' and table_no_id = '" + t.id + "' and cat_id<>'" + "11" + "' and cat_id in (10,12) ";

                where_others = where_others + "where status = '" + "1100" + "' and table_no_id = '" + t.id + "' and cat_id<>'" + "10" + "'  and cat_id<>'" + "12" + "' ";

            } else {
                where_guest = where_guest + "where status = '" + "100" + "' and table_no_id = '" + t.id + "' and cat_id in (10,12) ";

            }
            where_guest_11 = where_guest_11 + "where status = '" + "100" + "' and table_no_id = '" + t.id + "' and cat_id<>'" + "10" + "' and cat_id<>'" + "12" + "' and cat_id='" + "11" + "'";
            where_guest_11_dive = where_guest_11_dive + "where status = '" + "100" + "' and table_no_id = '" + t.id + "' and cat_id<>'" + "10" + "' and cat_id<>'" + "12" + "' and cat_id<>'" + "11" + "'";

            where_charge = where_charge + "where status = '" + "1100" + "' and table_no = '" + t.id + "'";
            where_advance = where_advance + "where room_id='" + t.id + "'  and status <>'" + "100" + "' ";

        }

        for (Dlg_check_liquid.to_guests guest1 : selected_guest) {

            if (ii == 0) {
                if (to_users.user_level1.equals("6")) {
                    where_guest = where_guest + " where table_no_id = '" + t.id + "' and status <>'" + "1" + "' and guest_id = '" + guest1.id + "'  and cat_id in (10,12)   ";

                    where_others = where_others + " where table_no_id = '" + t.id + "' and status <>'" + "1" + "' and guest_id = '" + guest1.id + "'  and cat_id <>'" + "10" + "' and cat_id<>'" + "12" + "' ";

                    guest_ids = guest1.id;
                } else {
                    where_guest = where_guest + " where table_no_id = '" + t.id + "' and status <>'" + "1" + "' and guest_id = '" + guest1.id + "' and cat_id='" + "10" + "' or "
                            + "table_no_id = '" + t.id + "' and status <>'" + "1" + "' and guest_id = '" + guest1.id + "' and cat_id='" + "12" + "'";
                }

                where_guest_11 = where_guest_11 + " where table_no_id = '" + t.id + "' and status <>'" + "1" + "' and guest_id = '" + guest1.id + "' and cat_id<>'" + "10" + "' and cat_id<>'" + "12" + "' and cat_id='" + "11" + "'";
                where_guest_11_dive = where_guest_11_dive + " where table_no_id = '" + t.id + "' and status <>'" + "1" + "' and guest_id = '" + guest1.id + "' and cat_id<>'" + "10" + "' and cat_id<>'" + "12" + "' and cat_id<>'" + "11" + "'";

                where_charge = where_charge + " where table_no = '" + t.id + "' and status <>'" + "1" + "' and guest_id = '" + guest1.id + "'";
                where_advance = where_advance + "where room_id='" + t.id + "'  and status <>'" + "1" + "' and guest_id='" + guest1.id + "'";
            } else {

                if (to_users.user_level1.equals("6")) {
                    where_guest = where_guest + " or table_no_id = '" + t.id + "' and status <>'" + "1" + "' and guest_id = '" + guest1.id + "' and cat_id<>'" + "11" + "' and cat_id in (10,12) ";

                    where_others = where_others + "  or table_no_id = '" + t.id + "' and status <>'" + "1" + "' and guest_id = '" + guest1.id + "' and cat_id<>'" + "10" + "' and cat_id<>'" + "12" + "' ";

                } else {
                    where_guest = where_guest + " or table_no_id = '" + t.id + "' and status <>'" + "1" + "' and guest_id = '" + guest1.id + "' and cat_id in (10,12) ";

                }
                where_guest_11 = where_guest_11 + " or table_no_id = '" + t.id + "' and status <>'" + "1" + "' and guest_id = '" + guest1.id + "' and cat_id<>'" + "10" + "' and cat_id<>'" + "12" + "' and cat_id='" + "11" + "' ";
                where_guest_11_dive = where_guest_11_dive + " or table_no_id = '" + t.id + "' and status <>'" + "1" + "' and guest_id = '" + guest1.id + "' and cat_id<>'" + "10" + "' and cat_id<>'" + "12" + "' and cat_id<>'" + "11" + "'";

                where_charge = where_charge + " or table_no = '" + t.id + "' and status <>'" + "1" + "' and guest_id = '" + guest1.id + "'";
                where_advance = where_advance + " or room_id='" + t.id + "'  and status <>'" + "1" + "' and guest_id='" + guest1.id + "'";
            }
            ii++;
            staff = guest1.staff;
        }
        if (ii > 1) {
            guest_ids = "zzz";
        }
        double advance = 0;
        double charge = 0;
        int selected_guest1 = my_guest.size();
        int all_guest = my_guest_size;

        results = S2_search.ret_guest_orders_where(t.id, where_guest, selected_guest1, all_guest, where_guest_11, where_guest_11_dive);
        if (to_users.user_level1.equals("6")) {
            count_other_orders = S2_search.count_other_orders_where(where_others);
            Main.CountOrders.setCounts(count_other_orders);
        } else {
            Main.CountOrders.setCounts(0);
        }
        advance = S1_cash_advance.get_guest_advance_where(where_advance);
        advance_usd = S1_cash_advance.get_guest_advance_where2(where_advance);
        bank_php = S1_cash_advance.get_guest_advance_where_bank_php(where_advance);
        bank_usd = S1_cash_advance.get_guest_advance_where_bank_usd(where_advance);
        advance_credit_card = S1_cash_advance.get_guest_advance_credit_card(where_advance);
        int check_in = to_users.get_check_ins();
        int check_out = to_users.get_check_outs();
        if (check_in == 1 || check_out == 1) {
        }

        int i = 0;
        double payment = 0;
        List< S2_search.to_items> datas = new ArrayList();
        if (ui_items.equals("list")) {
            System.out.println("list");
            for (S2_search.to_items s : results) {
                S2_search.to_items to = new S2_search.to_items(s.name, s.uom, s.desc, s.price, s.qty, s.img_path, s.qty2, s.guest_id, s.cat_id, s.category_name, s.printing_assembly, s.status, s.disc_name, s.disc_rate, s.discount, s.customer_name, s.customer_address, s.customer_address, s.date_added, s.group_id, s.nights, s.guest_no, s.check_out, s.room_guest_id, s.user_name, s.item_package_id, s.sub_category_name, s.sub_category_id, s.order_no);
                datas.add(to);
//                System.out.println(" desc: "+s.desc+" price: "+s.price+ " qty: "+s.qty +" disc: "+s.discount);
                payment += (s.price * s.qty) - s.discount;
                i++;
            }
            loadData_customer_tables_details(datas);
            tbl_customer_tables_details_M.fireTableDataChanged();
        } else {

            for (S2_search.to_items s : results) {
                S2_search.to_items to = new S2_search.to_items(s.name, s.uom, s.desc, s.price, s.qty, s.img_path, s.qty2, s.guest_id, s.cat_id, s.category_name, s.printing_assembly, s.status, s.disc_name, s.disc_rate, s.discount, s.customer_name, s.customer_address, s.customer_address, s.date_added, s.group_id, s.nights, s.guest_no, s.check_out, s.room_guest_id, s.user_name, s.item_package_id, s.sub_category_name, s.sub_category_id, s.order_no);

                item_model.add(i, to);
                payment += s.price * s.qty;
                i++;
            }
            jg_items.setModel(item_model);
            jg_items.setFixedCellDimension(170);
            jg_items.setHorizonztalMargin(4);
            jg_items.setVerticalMargin(10);
            jg_items.setCellBackground(Color.white);
            jg_items.setSelectionBackground(Color.lightGray);

            jg_items.getCellRendererManager().setDefaultRenderer(new Items());
        }
        if (System.getProperty("version", "ordering").
                equals("ordering")) {
            charge = 0;
            lbl_advance_payment.setText("0");
            lbl_guest_no.setText(t.guest_id);
            lbl_check_date.setText(t.date_added);
            lbl_rate.setText("0");
        } else {
            lbl_advance_payment.setText("" + advance);
            lbl_guest_no.setText(t.guest_id);
            lbl_check_date.setText(t.date_added);
            lbl_rate.setText(FitIn.fmt_wc_0(charge));
        }
        if (check_out == 0) {
            charge = 0;
        }
        lbl_oders_payment.setText(FitIn.fmt_wc_0(payment));
        double dollars = S1_currency.ret_dollar(DateType.sf.format(new Date()));
        double dollar_rate = advance_usd * dollars;
        double dollar_rate2 = bank_usd * dollars;
        dollar_rate += dollar_rate2;
        double peso = FitIn.toDouble(lbl_advance_payment.getText()) + bank_php;
//        System.out.println("Payment: " + payment + " | Charge: " + charge);
//        System.out.println("Peso: " + peso + " | dollar_rate: " + dollar_rate + " | advance: " + advance_credit_card);
        DecimalFormat df = new DecimalFormat("#,###");
        lbl_guest_total.setText("" + df.format((payment + charge)) + ".00");
        gross_sales = payment;
        lbl_amount.setText(lbl_guest_total.getText());

    }

    private List<S2_search.to_items> set_multiple_guest_orders_2() {
        final String ui_items = System.getProperty("ui_items", "list");
        int row = 0;
        Object value = new Object();

        row = jg_orders.getSelectedIndex();
        if (row < 0) {
            return new ArrayList();
        }
        item_model.clear();
        jg_items.setModel(item_model);
        value = orders_model.getElementAt(row);

        S2_search.to_rooms t = (S2_search.to_rooms) value;
        List<S2_search.to_items> results = new ArrayList();
        String guest = cb_guest.getSelectedItem().
                toString();
        String where_guest = "";
        String where_charge = "";
        String where_advance = "";
        int ii = 0;

        if (selected_guest.isEmpty()) {
            where_guest = where_guest + "where status='" + "0" + "' and table_no_id = '" + t.id + "'";
            where_charge = where_charge + "where status='" + "0" + "' and table_no = '" + t.id + "'";
            where_advance = where_advance + "where room_id='" + t.id + "'  and status='" + "0" + "'";
//             JOptionPane.showMessageDialog(null, guest1.id);
        }
        for (Dlg_check_liquid.to_guests guest1 : selected_guest) {
//            JOptionPane.showMessageDialog(null, guest1.id);
            if (ii == 0) {
                where_guest = where_guest + " where table_no_id = '" + t.id + "' and status='" + "0" + "' and guest_id = '" + guest1.id + "'";
                where_charge = where_charge + " where table_no = '" + t.id + "' and status='" + "0" + "' and guest_id = '" + guest1.id + "'";
                where_advance = where_advance + "where room_id='" + t.id + "'  and status='" + "0" + "' and guest_id='" + guest1.id + "'";

            } else {
                where_guest = where_guest + " or table_no_id = '" + t.id + "' and status='" + "0" + "' and guest_id = '" + guest1.id + "'";
                where_charge = where_charge + " or table_no = '" + t.id + "' and status='" + "0" + "' and guest_id = '" + guest1.id + "'";
                where_advance = where_advance + " or room_id='" + t.id + "'  and status='" + "0" + "' and guest_id='" + guest1.id + "'";
            }
            ii++;
        }

        double advance = 0;
        double charge = 0;

        results = S2_search.ret_guest_orders_where(t.id, where_guest, 0, 0, "", "");
        advance = S1_cash_advance.get_guest_advance_where(where_advance);
        charge = S2_search.ret_guest_chargers_where(t.id, where_charge);

        int i = 0;
        double payment = 0;
        List< S2_search.to_items> datas = new ArrayList();
        if (ui_items.equals("list")) {
            for (S2_search.to_items s : results) {
                S2_search.to_items to = new S2_search.to_items(s.name, s.uom, s.desc, s.price, s.qty, s.img_path, s.qty2, s.guest_id, s.cat_id, s.category_name, s.printing_assembly, s.status, s.disc_name, s.disc_rate, s.discount, s.customer_name, s.customer_address, s.customer_address, s.date_added, s.group_id, s.nights, s.guest_no, s.check_out, s.room_guest_id, s.user_name, s.item_package_id, s.sub_category_name, s.sub_category_id, s.order_no);
                datas.add(to);
                payment += s.qty * s.price;
                i++;
            }
        }
        return datas;
    }

    private void edit_item(to_items to_items1, List<to_items_status> to_sub, double to_pay) {

        final String ui_items = System.getProperty("ui_items", "list");
        int row = 0;
        Object j = new Object();

        if (ui_items.equals("list")) {
            row = tbl_orders.getSelectedRow();
            if (row < 0) {
                return;
            }
            j = tbl_table_orders_ALM.getElementAt(row);
        } else {
            row = jg_orders.getSelectedIndex();
            if (row < 0) {
                return;
            }
            j = orders_model.getElementAt(row);
        }

        final S2_search.to_orders to = (S2_search.to_orders) j;

        DefaultListModel orders_model_new = new DefaultListModel();
//        orders_model_new = orders_model;
        to.setQty(to_items1.qty);
        to.setTo_sub(to_sub);
//        to.setAmount_to_pay(to_pay);
        to.setDisc_name(to_items1.disc_name);
        to.setDisc_rate(to_items1.disc_rate);
        to.setDiscount(to_items1.discount);

        to.setCustomer_name(to_items1.category_name);
        to.setCustomer_id(to.customer_id);
        to.setCustomer_address(to.customer_address);

        if (ui_items.equals("list")) {
            sp_orders.updateUI();
            tbl_orders_M.fireTableDataChanged();
        } else {
            jg_orders.setModel(orders_model);
        }

        set_amount();
        order_count();

    }

    private void set_item_pop() {
        final String ui_items = System.getProperty("ui_items", "list");
        if (user_id.equals("6") || user_id.equals("0") || user_id.equals("5") || user_id.
                equals("7")) {
            if (my_order == 1) {
//                JOptionPane.showMessageDialog(null, "adadad1");
                Object j = new Object();
                if (ui_items.equals("list")) {
                    int row = tbl_items.getSelectedRow();
                    if (row < 0) {
                        return;
                    }
                    j = tbl_customer_tables_details_ALM.getElementAt(row);
                    //                tbl_customer_tables_details_ALM
                } else {
                    int row = jg_items.getSelectedIndex();
                    if (row < 0) {
                        return;
                    }
                    j = item_model.getElementAt(row);
                }
                final S2_search.to_items to = (S2_search.to_items) j;

                final S2_search.to_items to_items = new S2_search.to_items(to.name, to.uom, to.desc, to.price, to.qty, to.img_path, to.qty, to.guest_id, to.cat_id, to.category_name, to.printing_assembly, to.status, to.disc_name, to.disc_rate, to.discount, to.customer_name, to.customer_address, to.customer_address, to.date_added, to.group_id, to.nights, to.guest_no, to.check_out, to.room_guest_id, to.user_name, to.item_package_id, to.sub_category_name, to.sub_category_id, to.order_no);

                List<S2_search.to_items_status> to_sub = new ArrayList();
                Window p = (Window) this;
                Dlg_quantity_menu nd = Dlg_quantity_menu.create(p, true);
                nd.setTitle("");

                nd.do_pass(to_items, to_sub, 1, "-1", to.cat_id, to.group_id, to.item_package_id);
                nd.do_pass4();
                nd.setCallback(new Dlg_quantity_menu.Callback() {

                    @Override
                    public void cancel(CloseDialog closeDialog, Dlg_quantity_menu.OutputData data) {
                    }

                    @Override
                    public void order(CloseDialog closeDialog, Dlg_quantity_menu.OutputData data) {
                        closeDialog.ok();
                        order_item(data.to_items, data.to_sub, data.to_pay);
                        tf_search.grabFocus();
                    }

                    @Override
                    public void remove(CloseDialog closeDialog) {
                    }
                });
                Center.setCenter(nd); //sp_items

                nd.setLocationRelativeTo(js_orders);
                nd.setVisible(true);
            }

            if (my_order == 0) {
//                Object j = new Object();
//                if (ui_items.equals("list")) {
//                    int row = tbl_items.getSelectedRow();
//                    if (row < 0) {
//                        return;
//                    }
//                    j = tbl_customer_tables_details_ALM.getElementAt(row);
//                    //                tbl_customer_tables_details_ALM
//                } else {
//                    int row = jg_items.getSelectedIndex();
//                    if (row < 0) {
//                        return;
//                    }
//                    j = item_model.getElementAt(row);
//                }
//
//                final S2_search.to_items to = (S2_search.to_items) j;
//                String name = to.name;
//                String uom = to.uom;
//                String desc = to.desc;
//                double price = to.price;
//                double qty = to.qty;
//                String img_path = to.img_path;
//                double qty2 = to.qty2;
//                String cat_id = to.cat_id;
//                List<S2_search.to_items_status> to_sub = S2_assembly.
//                        ret_data_table(to.name, lbl_table_no.getText());
//                double amount_to_pay = 0;
//                S2_search.to_orders to1 = new S2_search.to_orders(name, uom, desc, price, qty, img_path, qty2, to_sub, amount_to_pay, cat_id, to.category_name, to.printing_assembly, to.disc_name, to.disc_rate, to.discount, to.customer_name, to.customer_address, to.customer_address, to.group_id, to.nights);
//                Window p = (Window) this;
//                Dlg_quantity_menu nd = Dlg_quantity_menu.create(p, true);
//                nd.setTitle("");
//                nd.do_pass3();
//                nd.do_pass_order(to1);
//                nd.setCallback(new Dlg_quantity_menu.Callback() {
//
//                    @Override
//                    public void cancel(CloseDialog closeDialog, Dlg_quantity_menu.OutputData data) {
//                    }
//
//                    @Override
//                    public void order(CloseDialog closeDialog, Dlg_quantity_menu.OutputData data) {
////                    closeDialog.ok();
//                        order_item(data.to_items, data.to_sub, data.to_pay);
//                    }
//
//                    @Override
//                    public void remove(CloseDialog closeDialog) {
////                        
////                        if (ui_items.equals("list")) {
////                            int row = tbl_items.getSelectedRow();
////                            if (row < 0) {
////                                return;
////                            }
////                            tbl_customer_tables_details_ALM.remove(row);
////                            tbl_customer_tables_details_M.fireTableDataChanged();
////                        } else {
////                            int row = jg_items.getSelectedIndex();
////                            if (row < 0) {
////                                return;
////                            }
////                            item_model.remove(row);
////                            jg_items.setModel(item_model);
////                        }
//                    }
//                });
//                Center.setCenter(nd); //sp_items
//
//                nd.setLocationRelativeTo(js_orders);
//                nd.setVisible(true);
            }
        }

        if (user_id.equals("10")) {
        }
    }

    private void order_item(to_items to_items1, List<to_items_status> to_sub, double to_pay) {
//        System.out.println("rate: "+to_items1.disc_rate);
        final String ui_items = System.getProperty("ui_items", "list");
        Object j = new Object();
        if (ui_items.equals("list")) {
            int row = tbl_items.getSelectedRow();
            if (row < 0) {
                return;
            }
            j = tbl_customer_tables_details_ALM.getElementAt(row);
            //                tbl_customer_tables_details_ALM
        } else {
            int row = jg_items.getSelectedIndex();
            if (row < 0) {
                return;
            }
            j = item_model.getElementAt(row);
        }

        final S2_search.to_items to_items = (S2_search.to_items) j;
//          JOptionPane.showMessageDialog(null, "adadad");
//        final S2_search.to_items to_items = new S2_search.to_items(to.name, to.uom, to.desc, to.price, to.qty, to.img_path, to.qty, to.guest_id, to.cat_id, to.category_name, to.printing_assembly, to.status, to.disc_name, to.disc_rate, to.discount, to.customer_name, to.customer_address, to.customer_address, to.date_added, to.group_id);
        int row_order = 0;

        if (ui_items.equals("list")) {
            row_order = tbl_table_orders_ALM.size();
        } else {
            row_order = orders_model.size();
        }
        int trap = 0;
        int a = 0;

        for (int i = 0; i < row_order; i++) {
            Object j_orders = new Object();
            if (ui_items.equals("list")) {
                j_orders = tbl_table_orders_ALM.getElementAt(i);
            } else {
                j_orders = orders_model.getElementAt(i);
            }

            S2_search.to_orders t_orders = (S2_search.to_orders) j_orders;

            if (to_items1.name.equals(t_orders.name) && to_items1.price == t_orders.price && to_items1.discount == t_orders.discount) {
                t_orders.setQty(t_orders.qty + to_items1.qty);
                to_items.setQty(to_items.qty - to_items1.qty);
                tbl_orders_M.fireTableDataChanged();
                trap = 1;
                break;
            } else {
                trap = 0;
            }
        }
        System.out.println("Trap : " + trap);
        if (trap == 0) {
            S2_search.to_orders t1 = new S2_search.to_orders(to_items.name, to_items.uom, to_items.desc,
                    to_items.price, to_items1.qty, to_items.img_path, to_items.qty2, to_sub, to_pay, to_items.cat_id,
                    to_items.category_name, to_items.printing_assembly, to_items1.disc_name, to_items1.disc_rate,
                    to_items1.discount, to_items.customer_name, to_items.customer_address, to_items.customer_address, to_items.group_id, to_items.nights, to_items.item_package_id, to_items1.sub_category_name, to_items1.sub_category_id);
            to_items.setQty(to_items.qty - to_items1.qty);

            init_orders(t1);
        }
        sp_items.updateUI();
        js_orders.updateUI();
        tbl_orders_M.fireTableDataChanged();
        js_orders.updateUI();
        set_amount();
        order_count();
        tf_search.setText("");
    }

    private void set_orders_cancel_pop() {
        if (popup3 == null) {
            popup2.hide();
        } else {
            popup2.hide();
            popup3.hide();
        }

        int row = jg_orders.getSelectedIndex();
        if (row < 0) {
            return;
        }
        Rectangle bounds = jg_orders.getCellBounds(row);

        PopupFactory factory = PopupFactory.getSharedInstance();
        int x = bounds.x;
        int y = bounds.y;
        popup3 = factory.getPopup(this, popup_orders_cancel(), x + 100, y + 300);
        popup3.show();
    }
    int menu_remove = 0;

    private void set_menu_popup() {

        String version = System.getProperty("version", "retail");
        if (user_id.equals("1") && version.equals("retail")) {
            if (menu_remove == 0) {
                Point bounds = btn_menu.getLocationOnScreen();

                PopupFactory factory = PopupFactory.getSharedInstance();
                int x = bounds.x - 850;
                int y = bounds.y - 100;

                popup_menu_admin = factory.getPopup(this, popup_menu_admin_su(), x, y);
                popup_menu_admin.show();
                menu_remove = 1;
            } else {
                popup_menu_admin.hide();
                menu_remove = 0;
            }
        }
        if (user_id.equals("1") && version.equals("resto") || user_id.equals("1") && version.
                equals("ordering")) {
            if (popup_menu_admin == null || menu_remove == 0) {
                menu_remove = 1;
                Point bounds = btn_menu.getLocationOnScreen();

                PopupFactory factory = PopupFactory.getSharedInstance();
                int x = bounds.x - 850;
                int y = bounds.y - 100;

                popup_menu_admin = factory.getPopup(this, popup_menu_admin(), x, y);
                popup_menu_admin.show();

            } else {

                popup_menu_admin.hide();
                menu_remove = 0;

            }
        }

        if (user_id.equals("0") && version.equals("retail")) {
            if (menu_remove == 0) {
                Point bounds = btn_menu.getLocationOnScreen();

                PopupFactory factory = PopupFactory.getSharedInstance();
                int x = bounds.x - 850;
                int y = bounds.y - 100;

                popup_menu_admin = factory.getPopup(this, popup_menu_su_cashier(), x, y);
                popup_menu_admin.show();
                menu_remove = 1;
            } else {
                popup_menu_admin.hide();
                menu_remove = 0;
            }
        }

    }

    private void max2() {
//        if (btn_orders.getText().equals("-")) {
//            pnl_holder_orders.setVisible(false);
//            btn_orders.setText("+");
//        } else {
//            pnl_holder_orders.setVisible(true);
//            btn_orders.setText("-");
//        }
    }

    private void init_cashier() {
        tf_search.selectAll();
    }

    public static class to_details {

        public final String logo;
        public final String name;
        public final double qty;
        public final double price;

        public to_details(String logo, String name, double qty, double price) {
            this.logo = logo;
            this.name = name;
            this.qty = qty;
            this.price = price;
        }
    }
    DefaultListModel item_model = new DefaultListModel();
    List<to_details> d = new ArrayList();
    String category_id = "";
    String table_location_id = "";

    private void set_room_location() {
    }

    private void init_rooms() {
        String img_path = System.getProperty("img_path", ImgPath.getPath());
        String version = System.getProperty("version", "ordering");
        img_path += "img_templates\\item_img\\";
        if ((user_id.equals("6")) || (user_id.equals("5")) || user_id.equals("7") || (user_id.
                equals("0") && version.equals("ordering"))) {
            orders_model.clear();
            jg_orders.setModel(orders_model);

            List<S5_tables.to_tables2> room = new ArrayList();
//            JOptionPane.showMessageDialog(null, table_location_id);
            room = S5_tables.get_tables(table_location_id);
            String names = "";
            if (version.equals("ordering")) {
                names = "TABLE";
            } else {
                names = "ROOM";
            }
            for (S5_tables.to_tables2 t : room) {
                S2_search.to_rooms to = new S2_search.to_rooms(t.no, names, "" + t.name, t.status, t.amount, t.guest_id, t.guest_name, t.date_added, t.name, t.rate, t.to_guest, t.rate_type, t.percentage, t.table_location_id);
                orders_model.addElement(to);
//                System.out.println(t.no + " ================== " + t.name + " ");
            }
            jg_orders.setModel(orders_model);
            jg_orders.setFixedCellDimension(120);
            jg_orders.setHorizonztalMargin(4);
            jg_orders.setVerticalMargin(10);
            jg_orders.setCellBackground(Color.white);
            jg_orders.setSelectionBackground(Color.LIGHT_GRAY);
            jg_orders.getCellRendererManager().
                    setDefaultRenderer(new Rooms());
        }
        if ((user_id.equals("0") && version.equals("retail"))) {
            orders_model.clear();
            clear_room();
            String table_no = lbl_table_no.getText();
            List<S2_search.to_items> datas = new ArrayList();
//               List<S2_search.to_items> datas = S2_search.ret_items_room(table_no);
            for (S2_search.to_items t : datas) {
                S2_search.to_orders to = new S2_search.to_orders(t.name, t.uom, t.desc, t.price, t.qty, img_path, t.qty, new ArrayList(), -1, t.cat_id, t.category_name, t.printing_assembly, t.disc_name, t.disc_rate, t.discount, t.customer_name, t.customer_address, t.customer_address, t.group_id, t.nights, t.item_package_id, t.sub_category_name, t.sub_category_id);
                orders_model.addElement(to);
            }
            jg_orders.setModel(orders_model);
            jg_orders.setFixedCellDimension(170);
            jg_orders.setHorizonztalMargin(4);
            jg_orders.setVerticalMargin(10);
            jg_orders.setCellBackground(Color.white);
            jg_orders.setSelectionBackground(Color.LIGHT_GRAY);
            jg_orders.getCellRendererManager().
                    setDefaultRenderer(new Orders());
        }
    }
    int my_order = 0;

    private void init_items2() {
        List<S2_search.to_items> results = new ArrayList();
        String search = tf_search.getText();
        results = S2_search.ret_items(category_id, search, "1", type_id);
        loadData_customer_tables_details(results);
    }
    double gross_sales = 0;
    int count_other_orders = 0;
    String my_types = "";

    private void init_items() {

        String version = System.getProperty("version", "ordering");
        String ui_items = System.getProperty("ui_items", "list");
        if ((user_id.equals("0") && version.equals("resto")) || (user_id.equals("0") && version.
                equals("retail")) || my_order == 1) {

            item_model.clear();
            jg_items.setModel(item_model);
            String search = tf_search.getText();
            tf_search.setEnabled(true);
            List<S2_search.to_items> results = new ArrayList();
            if (my_search == 0) {

                if (version.equals("ordering")) {
                    if ((category_id.equals("23")) || (category_id.equals("24"))) {
                        results = S2_search.ret_items(category_id, search, "1", type_id);
                    } else {
                        results = S2_search.ret_items(category_id, search, "1", type_id);
                    }
                } else {
                    if (my_types.equalsIgnoreCase("") || my_types.isEmpty()) {
                        tbl_customer_tables_details_ALM.clear();
                        tbl_customer_tables_details_M.fireTableDataChanged();
                    } else {
                        results = S2_search.ret_items_accom(category_id, search, "1", my_types);
                    }
                }
            } else {

                if (user_id.equals("6")) {
                    category_id = "10";
                    String happy_hour = " ";
                    if (staff == 1) {
                        happy_hour = "";
                    } else {
                        happy_hour = "1";
                    }
                    results = S2_search.ret_items_no_category_top(category_id, search, "1", happy_hour, my_types);

                } else {
                    category_id = "";
                    if (tf_search.getText().
                            isEmpty()) {
                    } else {
                        String happy_hour = "";
                        if (staff == 1) {
                            happy_hour = "";
                        } else {
                            happy_hour = "1";
                        }
                        results = S2_search.ret_items_no_category(category_id, search, "1", happy_hour, my_types);

                    }

                }

            }

            int i = 0;
            if (ui_items.equals("list")) {
                loadData_customer_tables_details(results);
            } else {
                for (S2_search.to_items s : results) {
                    S2_search.to_items to = new S2_search.to_items(s.name, s.uom, s.desc, s.price, s.qty, s.img_path, s.qty2, s.guest_id, s.cat_id, s.category_name, s.printing_assembly, s.status, s.disc_name, s.disc_rate, s.discount, s.customer_name, s.customer_address, s.customer_address, s.date_added, s.group_id, s.nights, s.guest_no, s.check_out, s.room_guest_id, s.user_name, s.item_package_id, s.sub_category_name, s.sub_category_id, s.order_no);
                    item_model.add(i, to);
                    i++;
                }
                jg_items.setModel(item_model);
                jg_items.setHorizonztalMargin(4);
                jg_items.setVerticalMargin(10);
                jg_items.setCellBackground(Color.white);
                jg_items.setSelectionBackground(Color.lightGray);
                jg_items.setFixedCellDimension(170);
                jg_items.getCellRendererManager().
                        setDefaultRenderer(new Items());
            }
        }

        if (user_id.equals("6") || user_id.equals("5") || (user_id.equals("7") && my_order == 0) || ((user_id.
                equals("0") && version.equals("ordering")) && my_order == 0)) {
            item_model.clear();
            jg_items.setModel(item_model);
            int row = jg_orders.getSelectedIndex();
            if (row < 0) {
                return;
            }
            tf_search.setEnabled(false);
            jLabel3.setText("Cashier/Waiter:");
            Object value = orders_model.getElementAt(row);
            S2_search.to_rooms t = (S2_search.to_rooms) value;
            List<S2_search.to_items> results = new ArrayList();
            double charge = 0;
            int size = t.to_guest.size();

            results = S2_search.ret_items_room(t.id, size, my_guest_size);
            for (Dlg_check_liquid.to_guests guest1 : t.to_guest) {
                staff = guest1.staff;
            }

            if (to_users.user_level1.equals("6")) {
                count_other_orders = S2_search.count_other_orders_status(t.id, my_guest.
                        size(), my_guest_size);
                Main.CountOrders.setCounts(count_other_orders);
            }
            int check_in = to_users.get_check_ins();
            int check_out = to_users.get_check_outs();

            if (check_in == 1 || check_out == 1) {

            }

            int i = 0;
            lbl_guest_no.setText(t.guest_id);
            lbl_check_date.setText(t.date_added);
            double payment = 0;
            int to_prepare = 0;
            if (ui_items.equals("list")) {

                loadData_customer_tables_details(results);

                sp_items.updateUI();
                for (S2_search.to_items s : results) {
                    payment += s.price;
                    if (s.status == 0 && s.printing_assembly != 0) {
                        to_prepare++;
                    }
                    i++;
                }
            } else {
                for (S2_search.to_items s : results) {
                    S2_search.to_items to = new S2_search.to_items(s.name, s.uom, s.desc, s.price, s.qty, s.img_path, s.qty2, s.guest_id, s.cat_id, s.category_name, s.printing_assembly, s.status, s.disc_name, s.disc_rate, s.discount, s.customer_name, s.customer_address, s.customer_address, s.date_added, s.group_id, s.nights, s.guest_no, s.check_out, s.room_guest_id, s.user_name, s.item_package_id, s.sub_category_name, s.sub_category_id, s.order_no);
                    item_model.add(i, to);
                    payment += s.price * s.qty;
                    if (s.status == 0 && s.printing_assembly != 0) {
                        to_prepare++;
                    }
                    i++;
                }
                jg_items.setModel(item_model);
                jg_items.setFixedCellDimension(170);
                jg_items.setHorizonztalMargin(4);
                jg_items.setVerticalMargin(10);
                jg_items.setCellBackground(Color.white);
                jg_items.setSelectionBackground(Color.lightGray);

                jg_items.getCellRendererManager().
                        setDefaultRenderer(new Items());
                sp_items.updateUI();
            }
            String table_id = (t.id);
            double advance = S1_cash_advance.get_guest_advance_all(table_id, lbl_guest_no.
                    getText());

            advance_usd = S1_cash_advance.get_guest_advance_all2(table_id, lbl_guest_no.
                    getText());
            bank_php = S1_cash_advance.get_guest_advance_bank_php(table_id, lbl_guest_no.
                    getText());
            bank_usd = S1_cash_advance.get_guest_advance_bank_usd(table_id, lbl_guest_no.
                    getText());
            advance_credit_card = S1_cash_advance.get_guest_advance_credit_card(table_id, lbl_guest_no.
                    getText());
            advance += bank_php;
            if ((user_id.equals("7") && version.equals("ordering")) || (user_id.
                    equals("0") && version.equals("ordering"))) {
                charge = 0;
                advance = 0;
                lbl_rate.setText("0.00");
            } else {
                lbl_advance_payment.setText("" + advance);
                lbl_rate.setText(FitIn.fmt_wc_0(charge));
                if (user_id.equals("6")) {
                    lbl_amount.setText(FitIn.fmt_wc_0(payment + charge));
                } else {
                    lbl_amount.setText(FitIn.fmt_wc_0(payment));
                }

                lbl_order_count.setText("" + item_model.size());
            }

            if (check_out == 0) {

            }
            charge = 0;
            lbl_prepare.setText("PREPARE ( " + to_prepare + " )");
            lbl_oders_payment.setText(FitIn.fmt_wc_0(payment));
            double dollars = S1_currency.ret_dollar(DateType.sf.format(new Date()));
            double dollar_rate = advance_usd * dollars;
            double dollar_rate2 = bank_usd * dollars;
            dollar_rate += dollar_rate2;
            lbl_guest_total.setText(FitIn.fmt_wc_0((payment + charge) - (advance + dollar_rate + advance_credit_card)));

            gross_sales = payment;
            lbl_amount.setText(lbl_guest_total.getText());

        }

    }
    DefaultListModel cat_model = new DefaultListModel();
    double advance_payment_usd = 0;
    // <editor-fold defaultstate="collapsed" desc="Scroll">

    private void do_down_cat() {
//            tbl_endorsements.scrollRectToVisible(tbl_endorsements.getCellRect(j, 0, false));
        sp_cat.transferFocusDownCycle();
        sp_cat.getVerticalScrollBar().
                setValue(sp_cat.getVerticalScrollBar().
                        getValue() + sp_cat.getVerticalScrollBar().
                                getBlockIncrement() + 500);
//      
    }

    private void do_up_cat() {
        sp_cat.transferFocusUpCycle();
        sp_cat.getVerticalScrollBar().
                setValue(sp_cat.getVerticalScrollBar().
                        getValue() - sp_cat.getVerticalScrollBar().
                                getBlockIncrement() - 500);
    }

    private void do_down_orders() {
//            tbl_endorsements.scrollRectToVisible(tbl_endorsements.getCellRect(j, 0, false));
        sp_orders.transferFocusDownCycle();
        sp_orders.getVerticalScrollBar().
                setValue(sp_orders.getVerticalScrollBar().
                        getValue() + sp_orders.getVerticalScrollBar().
                                getBlockIncrement() + 500);
//      
    }

    private void do_up_orders() {
        sp_orders.transferFocusUpCycle();
        sp_orders.getVerticalScrollBar().
                setValue(sp_orders.getVerticalScrollBar().
                        getValue() - sp_orders.getVerticalScrollBar().
                                getBlockIncrement() - 500);
    }

    private void do_down_items() {
//            tbl_endorsements.scrollRectToVisible(tbl_endorsements.getCellRect(j, 0, false));
        sp_items.transferFocusDownCycle();
        sp_items.getVerticalScrollBar().
                setValue(sp_items.getVerticalScrollBar().
                        getValue() + sp_items.getVerticalScrollBar().
                                getBlockIncrement() + 500);
//      
    }

    private void do_up_items() {
        sp_items.transferFocusUpCycle();
        sp_items.getVerticalScrollBar().
                setValue(sp_items.getVerticalScrollBar().
                        getValue() - sp_items.getVerticalScrollBar().
                                getBlockIncrement() - 500);
    }
    // </editor-fold>

    private void init_catogories() {
        cat_model.clear();
        jg_categories.setModel(cat_model);
//        JOptionPane.showMessageDialog(null, user_id);
        if (user_id.equals("1")) {
        }
        if (user_id.equals("5")) {

            clear_categories();
        }
        if (user_id.equals("6") || user_id.equals("0") || user_id.equals("5") || user_id.
                equals("7")) {
//            pnl_category.setVisible(true);
            String img_path = System.getProperty("img_path", ImgPath.getPath());
//            System.out.println(img_path + " ---------------- ");
            img_path = img_path + "img_templates\\category_img\\";
            String cat_id = "";
            List<to_name_cat> results = new ArrayList();
//        
            if (user_id.equals("5")) {
                results = S1_categories.ret_categories3(cat_id);
            } else {
                if (System.getProperty("version", "ordering").
                        equals("ordering")) {
                    cat_id = "";
                } else {
                    cat_id = "10";
                }

                results = S1_categories.ret_categories_top(cat_id);
            }

//            
            String ui_items = System.getProperty("ui_items", "list");

            if (ui_items.equals("list")) {
                List<to_name_cat> datas = new ArrayList();
                int i = 0;
                for (to_name_cat s : results) {
                    to_name_cat to = new to_name_cat(s.name, s.num, img_path + s.img_path, s.open_item, s.printing_assembly, s.group_id);
                    datas.add(to);
                    i++;
                }
                loadData_category(datas);
            } else {
                int i = 0;
                for (to_name_cat s : results) {
                    to_name_cat to = new to_name_cat(s.name, s.num, img_path + s.img_path, s.open_item, s.printing_assembly, s.group_id);
                    cat_model.add(i, to);
                    i++;
                }
                jg_categories.setModel(cat_model);
                jg_categories.setFixedCellDimension(150);
                jg_categories.setHorizonztalMargin(5);
                jg_categories.setVerticalMargin(5);
                jg_categories.setCellBackground(Color.white);
                jg_categories.setSelectionBackground(Color.LIGHT_GRAY);
                jg_categories.getCellRendererManager().
                        setDefaultRenderer(new Categories());
            }
        }

    }
    DefaultListModel orders_model = new DefaultListModel();

    private void init_orders(S2_search.to_orders to) {
        String ui_items = System.getProperty("ui_items", "list");
        if (ui_items.equals("list")) {
            List<S2_search.to_orders> datas = new ArrayList();
            datas.add(to);
            loadData_orders_details(datas);
//            JOptionPane.showMessageDialog(null, "adadad");
        } else {
            orders_model.addElement(to);
            jg_orders.setModel(orders_model);
            jg_orders.setFixedCellDimension(170);
            jg_orders.setHorizonztalMargin(4);
            jg_orders.setVerticalMargin(10);
            jg_orders.setCellBackground(Color.white);
            jg_orders.setSelectionBackground(Color.LIGHT_GRAY);
            jg_orders.getCellRendererManager().
                    setDefaultRenderer(new Orders());
        }

//       
    }

    private void init_orders_ref() {

        jg_orders.setModel(orders_model);
        jg_orders.setFixedCellDimension(170);
        jg_orders.setPreferredSize(new Dimension(400, 400));
        jg_orders.setHorizonztalMargin(4);
        jg_orders.setVerticalMargin(10);
        jg_orders.setCellBackground(Color.white);
        jg_orders.setSelectionBackground(Color.LIGHT_GRAY);
        jg_orders.getCellRendererManager().
                setDefaultRenderer(new Orders());

    }

    // <editor-fold defaultstate="collapsed" desc="Items">
    public static class Items extends JPanel implements GridCellRenderer {

        private static final long serialVersionUID = 1L;

        @Override
        public Component getGridCellRendererComponent(JGrid grid,
                Object value, int index, boolean isSelected,
                boolean cellHasFocus) {
//            if (value != null && value instanceof Color) {
//                this.setBackground((Color) value);
//            }

            JXLabel lbl_qty = new JXLabel();

            JXLabel lbl_price = new JXLabel();
            JXLabel lbl_prod_name = new JXLabel();
            JLabel ip_img = new JLabel();

//            String img_path = System.getProperty("img_path", "C:\\Users\\Dummy\\img_templates\\item_img\\");
            String img_path = System.getProperty("img_path", ImgPath.getPath());
            img_path = img_path + "img_templates\\item_img\\";
            S2_search.to_items t = (S2_search.to_items) value;
//            System.out.println(t.logo + "");
            JPanel jPanel11 = new javax.swing.JPanel() {

                @Override
                public void paintComponent(Graphics og) {
                    super.paintComponent(og);

//                    Graphics2D g = (Graphics2D) og;
//
//                    GradientPaint gradient = new GradientPaint(0, 100, Color.white, 0, 0, Color.white, true);
//
//                    g.setPaint(gradient);
//                    g.fillRoundRect(0, 0, 470, 255, 30, 30);
                }
            };
            jPanel11.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
            lbl_qty.setBackground(new java.awt.Color(0, 0, 0));
            lbl_qty.setForeground(new java.awt.Color(255, 255, 255));
            lbl_qty.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED, new java.awt.Color(255, 51, 51), new java.awt.Color(255, 51, 51), new java.awt.Color(255, 51, 0), new java.awt.Color(255, 0, 0)));
            lbl_qty.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            lbl_qty.setText(NumType.nodec_w_comm(t.qty));
            lbl_qty.setOpaque(true);
            jPanel11.add(lbl_qty, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 70, 30));

            lbl_price.setBackground(new java.awt.Color(0, 153, 255));
            lbl_price.setForeground(new java.awt.Color(255, 255, 255));
            lbl_price.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            lbl_price.setText("P " + FitIn.fmt_wc_0(t.price));
            lbl_price.setOpaque(true);
            jPanel11.add(lbl_price, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 140, 70, 30));
//
            lbl_prod_name.setBackground(new java.awt.Color(255, 255, 255));
            lbl_prod_name.setForeground(new java.awt.Color(0, 0, 0));
            lbl_prod_name.setBorder(javax.swing.BorderFactory.createEtchedBorder());
            lbl_prod_name.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
            lbl_prod_name.setText(Wrapper.wrap(t.desc, 27));
//            lbl_prod_name.setFont(new java.awt.Font("SansSerif", 1, 13)); // NOI18N

            lbl_prod_name.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
            lbl_prod_name.setOpaque(true);
            lbl_prod_name.setVerticalAlignment(javax.swing.SwingConstants.TOP);
//            lbl_prod_name.setLineWrap(true);
            jPanel11.add(lbl_prod_name, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 110, 170, 40));

//            System.out.println(t.img_path);
//            jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            ip_img.setIcon(new javax.swing.ImageIcon(img_path + t.img_path)); // NOI18N
//              ip_img.setIcon(new javax.swing.ImageIcon("/home/i1/img_templates/item_img/asd.jpeg")); // NOI18N
            File f = new File(img_path + "siopao.jpeg");
            BufferedImage img;
            try {
                img = ImageIO.read(f);
                int width = 200; //jLabel3.getWidth();
                int height = 170; //jLabel3.getHeight();
                BufferedImage scaledImage = new BufferedImage(width, height, BufferedImage.OPAQUE);
                Graphics2D graphics2D = scaledImage.createGraphics();
                graphics2D.setRenderingHint(RenderingHints.KEY_ALPHA_INTERPOLATION,
                        RenderingHints.VALUE_ALPHA_INTERPOLATION_SPEED);
                graphics2D.drawImage(img, 0, 0, width, height, null);
                graphics2D.dispose();
                ImageIcon myIcon = new ImageIcon(scaledImage);
                ip_img.setIcon(myIcon);
            } catch (IOException ex) {
                throw new RuntimeException(ex + " " + img_path + t.img_path);
            }

            jPanel11.add(ip_img, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 170, 170));

            return jPanel11;
        }
    }

    // </editor-fold>
    // <editor-fold defaultstate="collapsed" desc="Items">
    public static class Items_list extends JPanel implements GridCellRenderer {

        private static final long serialVersionUID = 1L;

        @Override
        public Component getGridCellRendererComponent(JGrid grid,
                Object value, int index, boolean isSelected,
                boolean cellHasFocus) {
//            if (value != null && value instanceof Color) {
//                this.setBackground((Color) value);
//            }

            final JXLabel lbl_qty = new JXLabel();

            final JXLabel lbl_price = new JXLabel();
            final JXLabel lbl_desc = new JXLabel();
            final JXLabel lbl_at = new JXLabel();
            JLabel ip_img = new JLabel();

//            String img_path = System.getProperty("img_path", "C:\\Users\\Dummy\\img_templates\\item_img\\");
            String img_path = System.getProperty("img_path", ImgPath.getPath());
            img_path = img_path + "img_templates\\item_img\\";
            S2_search.to_items t = (S2_search.to_items) value;
//            System.out.println(t.logo + "");
            JPanel jPanel11 = new javax.swing.JPanel() {

                @Override
                public void paintComponent(Graphics og) {
                    super.paintComponent(og);

//                    Graphics2D g = (Graphics2D) og;
//
//                    GradientPaint gradient = new GradientPaint(0, 100, Color.white, 0, 0, Color.white, true);
//
//                    g.setPaint(gradient);
//                    g.fillRoundRect(0, 0, 470, 255, 30, 30);
                }
            };
//            lbl_qty.setText(NumType.nodec_w_comm(t.qty));
//            lbl_price.setText("P " + FitIn.fmt_wc_0(t.price));
//            lbl_prod_name.setText(Wrapper.wrap(t.desc, 27));
            jPanel11.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

            lbl_price.setBackground(new java.awt.Color(255, 255, 255));
            lbl_price.setBorder(javax.swing.BorderFactory.createCompoundBorder(null, new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true)));
            lbl_price.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            lbl_price.setText("P " + FitIn.fmt_wc_0(t.price));
            lbl_price.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
            lbl_price.setOpaque(true);
            lbl_price.addMouseListener(new java.awt.event.MouseAdapter() {

                public void mouseEntered(java.awt.event.MouseEvent evt) {
                    lbl_desc.setBackground(new java.awt.Color(153, 204, 255));
                    lbl_qty.setBackground(new java.awt.Color(153, 204, 255));
                    lbl_at.setBackground(new java.awt.Color(153, 204, 255));
                    lbl_price.setBackground(new java.awt.Color(153, 204, 255));
                    lbl_desc.setForeground(new java.awt.Color(255, 255, 255));
                }

                public void mouseExited(java.awt.event.MouseEvent evt) {
                    lbl_desc.setBackground(new java.awt.Color(255, 255, 255));
                    lbl_qty.setBackground(new java.awt.Color(255, 255, 255));
                    lbl_at.setBackground(new java.awt.Color(255, 255, 255));
                    lbl_price.setBackground(new java.awt.Color(255, 255, 255));
                    lbl_desc.setForeground(new java.awt.Color(0, 0, 0));
                }
            });
            jPanel11.add(lbl_price, new org.netbeans.lib.awtextra.AbsoluteConstraints(340, 0, 90, 50));

            lbl_desc.setBackground(new java.awt.Color(255, 255, 255));
            lbl_desc.setBorder(javax.swing.BorderFactory.createCompoundBorder(null, new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true)));
            lbl_desc.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            lbl_desc.setText(Wrapper.wrap(t.desc, 27));
            lbl_desc.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
            lbl_desc.setOpaque(true);
            lbl_desc.addMouseListener(new java.awt.event.MouseAdapter() {

                public void mouseEntered(java.awt.event.MouseEvent evt) {
                    lbl_desc.setBackground(new java.awt.Color(153, 204, 255));
                    lbl_qty.setBackground(new java.awt.Color(153, 204, 255));
                    lbl_at.setBackground(new java.awt.Color(153, 204, 255));
                    lbl_price.setBackground(new java.awt.Color(153, 204, 255));
                    lbl_desc.setForeground(new java.awt.Color(255, 255, 255));
                }

                public void mouseExited(java.awt.event.MouseEvent evt) {
                    lbl_desc.setBackground(new java.awt.Color(255, 255, 255));
                    lbl_qty.setBackground(new java.awt.Color(255, 255, 255));
                    lbl_at.setBackground(new java.awt.Color(255, 255, 255));
                    lbl_price.setBackground(new java.awt.Color(255, 255, 255));
                    lbl_desc.setForeground(new java.awt.Color(0, 0, 0));
                }
            });
            jPanel11.add(lbl_desc, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 0, 260, 50));

            lbl_qty.setBackground(new java.awt.Color(255, 255, 255));
            lbl_qty.setBorder(javax.swing.BorderFactory.createCompoundBorder(null, new javax.swing.border.LineBorder(new java.awt.Color(204, 204, 204), 1, true)));
            lbl_qty.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            lbl_qty.setText(NumType.nodec_w_comm(t.qty));
            lbl_qty.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
            lbl_qty.setOpaque(true);
            lbl_qty.addMouseListener(new java.awt.event.MouseAdapter() {

                public void mouseEntered(java.awt.event.MouseEvent evt) {
                    lbl_desc.setBackground(new java.awt.Color(153, 204, 255));
                    lbl_qty.setBackground(new java.awt.Color(153, 204, 255));
                    lbl_at.setBackground(new java.awt.Color(153, 204, 255));
                    lbl_price.setBackground(new java.awt.Color(153, 204, 255));
                    lbl_desc.setForeground(new java.awt.Color(255, 255, 255));
                }

                public void mouseExited(java.awt.event.MouseEvent evt) {
                    lbl_desc.setBackground(new java.awt.Color(255, 255, 255));
                    lbl_qty.setBackground(new java.awt.Color(255, 255, 255));
                    lbl_at.setBackground(new java.awt.Color(255, 255, 255));
                    lbl_price.setBackground(new java.awt.Color(255, 255, 255));
                    lbl_desc.setForeground(new java.awt.Color(0, 0, 0));
                }
            });
            jPanel11.add(lbl_qty, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 60, 50));

            lbl_at.setBackground(new java.awt.Color(255, 255, 255));
            lbl_at.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            lbl_at.setText("@");
            lbl_at.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
            lbl_at.setOpaque(true);
            lbl_at.addMouseListener(new java.awt.event.MouseAdapter() {

                public void mouseEntered(java.awt.event.MouseEvent evt) {
                    lbl_desc.setBackground(new java.awt.Color(153, 204, 255));
                    lbl_qty.setBackground(new java.awt.Color(153, 204, 255));
                    lbl_at.setBackground(new java.awt.Color(153, 204, 255));
                    lbl_price.setBackground(new java.awt.Color(153, 204, 255));
                    lbl_desc.setForeground(new java.awt.Color(255, 255, 255));
                }

                public void mouseExited(java.awt.event.MouseEvent evt) {
                    lbl_desc.setBackground(new java.awt.Color(255, 255, 255));
                    lbl_qty.setBackground(new java.awt.Color(255, 255, 255));
                    lbl_at.setBackground(new java.awt.Color(255, 255, 255));
                    lbl_price.setBackground(new java.awt.Color(255, 255, 255));
                    lbl_desc.setForeground(new java.awt.Color(0, 0, 0));
                }
            });
            jPanel11.add(lbl_at, new org.netbeans.lib.awtextra.AbsoluteConstraints(320, 0, 20, 50));

////            System.out.println(t.img_path);
////            jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
//            ip_img.setIcon(new javax.swing.ImageIcon(img_path + t.img_path)); // NOI18N
////              ip_img.setIcon(new javax.swing.ImageIcon("/home/i1/img_templates/item_img/asd.jpeg")); // NOI18N
//            File f = new File(img_path + "siopao.jpeg");
//            BufferedImage img;
//            try {
//                img = ImageIO.read(f);
//                int width = 200; //jLabel3.getWidth();
//                int height = 170; //jLabel3.getHeight();
//                BufferedImage scaledImage = new BufferedImage(width, height, BufferedImage.OPAQUE);
//                Graphics2D graphics2D = scaledImage.createGraphics();
//                graphics2D.setRenderingHint(RenderingHints.KEY_ALPHA_INTERPOLATION,
//                        RenderingHints.VALUE_ALPHA_INTERPOLATION_SPEED);
//                graphics2D.drawImage(img, 0, 0, width, height, null);
//                graphics2D.ip_imgdispose();
//                ImageIcon myIcon = new ImageIcon(scaledImage);
//                ip_img.setIcon(myIcon);
//            } catch (IOException ex) {
//                throw new RuntimeException(ex + " " + img_path + t.img_path);
//            }
//            jPanel11.add(ip_img, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 170, 170));
            return jPanel11;
        }
    }

    // </editor-fold>
    // <editor-fold defaultstate="collapsed" desc="Categories">
    public static class Categories extends JPanel implements GridCellRenderer {

        private static final long serialVersionUID = 1L;

        @Override
        public Component getGridCellRendererComponent(JGrid grid,
                Object value, int index, boolean isSelected,
                boolean cellHasFocus) {
//            if (value != null && value instanceof Color) {
//                this.setBackground((Color) value);
//            }

            JLabel jLabel10 = new javax.swing.JLabel();

            JLabel jLabel12 = new javax.swing.JLabel();
            JLabel jLabel14 = new javax.swing.JLabel();

            to_name_cat t = (to_name_cat) value;

            JPanel jPanel11 = new javax.swing.JPanel() {

                @Override
                public void paintComponent(Graphics og) {
                    super.paintComponent(og);

                    Graphics2D g = (Graphics2D) og;
//                    GradientPaint gradient = new GradientPaint(0, 100, Color.white, 0, 0, Color.white, true);
//                    g.setPaint(gradient);
                    g.fillRoundRect(0, 0, 470, 255, 30, 30);

                }
            };
            jPanel11.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

            jLabel14.setBackground(java.awt.Color.red);
            jLabel14.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
            jLabel14.setForeground(new java.awt.Color(255, 255, 255));
            jLabel14.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            jLabel14.setText(t.name);
            jLabel14.setOpaque(true);
            jPanel11.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 170, 30));

            jLabel12.setFont(new java.awt.Font("SansSerif", 1, 11)); // NOI18N
            jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            jLabel12.setIcon(new javax.swing.ImageIcon(t.img_path)); // NOI18N
            File f = new File(t.img_path);
            BufferedImage img;
            try {
                img = ImageIO.read(f);
                int width = 200; //jLabel3.getWidth();
                int height = 170; //jLabel3.getHeight();
                BufferedImage scaledImage = new BufferedImage(width, height, BufferedImage.OPAQUE);
                Graphics2D graphics2D = scaledImage.createGraphics();
                graphics2D.setRenderingHint(RenderingHints.KEY_ALPHA_INTERPOLATION,
                        RenderingHints.VALUE_ALPHA_INTERPOLATION_SPEED);
                graphics2D.drawImage(img, 0, 0, width, height, null);
                graphics2D.dispose();
                ImageIcon myIcon = new ImageIcon(scaledImage);
                jLabel12.setIcon(myIcon);
            } catch (IOException ex) {
//               return;
            }

            jPanel11.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 170, 170));

            return jPanel11;
        }
    }

    // </editor-fold>
    // <editor-fold defaultstate="collapsed" desc="Orders">
    public static class Orders extends JPanel implements GridCellRenderer {

        private static final long serialVersionUID = 1L;

        @Override
        public Component getGridCellRendererComponent(JGrid grid,
                Object value, int index, boolean isSelected,
                boolean cellHasFocus) {
//            if (value != null && value instanceof Color) {
//                this.setBackground((Color) value);
//            }

            JXLabel lbl_qty = new JXLabel();

            JXLabel lbl_price = new JXLabel();
            JXLabel lbl_prod_name = new JXLabel();
            JLabel ip_img = new JLabel();
            String img_path = System.getProperty("img_path", ImgPath.getPath());
            img_path += "img_templates\\item_img\\";

            S2_search.to_orders t = (S2_search.to_orders) value;
//            System.out.println(t.logo + "");
            JPanel jPanel11 = new javax.swing.JPanel() {

                @Override
                public void paintComponent(Graphics og) {
                    super.paintComponent(og);

                    Graphics2D g = (Graphics2D) og;

                    GradientPaint gradient = new GradientPaint(0, 100, Color.white, 0, 0, Color.white, true);

                    g.setPaint(gradient);
                    g.fillRoundRect(0, 0, 470, 255, 30, 30);

                }
            };

            jPanel11.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

            lbl_qty.setBackground(new java.awt.Color(0, 0, 0));
            lbl_qty.setForeground(new java.awt.Color(255, 255, 255));
            lbl_qty.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED, new java.awt.Color(255, 51, 51), new java.awt.Color(255, 51, 51), new java.awt.Color(255, 51, 0), new java.awt.Color(255, 0, 0)));
            lbl_qty.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            lbl_qty.setText(NumType.nodec_w_comm(t.qty));
            lbl_qty.setOpaque(true);
            jPanel11.add(lbl_qty, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 70, 30));

            lbl_price.setBackground(new java.awt.Color(0, 153, 255));
            lbl_price.setForeground(new java.awt.Color(255, 255, 255));
            lbl_price.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            lbl_price.setText("P " + FitIn.fmt_wc_0(t.amount_to_pay));
            lbl_price.setOpaque(true);
            jPanel11.add(lbl_price, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 140, 70, 30));

            lbl_prod_name.setBackground(new java.awt.Color(255, 255, 255));
            lbl_prod_name.setForeground(new java.awt.Color(0, 0, 0));
            lbl_prod_name.setBorder(javax.swing.BorderFactory.createEtchedBorder());
            lbl_prod_name.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
            lbl_prod_name.setText(Wrapper.wrap(t.desc, 27));
            lbl_prod_name.setFont(new java.awt.Font("SansSerif", 1, 12)); // NOI18N
//            lbl_prod_name.setLineWrap(true);
            lbl_prod_name.setOpaque(true);
            lbl_prod_name.setVerticalAlignment(javax.swing.SwingConstants.TOP);

            jPanel11.add(lbl_prod_name, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 110, 170, 40));

//            String im = t.img_path;
//            if (im.equals("") || im.equals("asd.jpeg")) {
//                im = "siopao.jpeg";
//            }
//            System.out.println(img_path+ " - " +im);           
//            jLabel12.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            ip_img.setIcon(new javax.swing.ImageIcon(img_path + t.img_path)); // NOI18N
            File f = new File(img_path + t.img_path);
            BufferedImage img;
            try {
                img = ImageIO.read(f);
                int width = 200; //jLabel3.getWidth();
                int height = 170; //jLabel3.getHeight();
                BufferedImage scaledImage = new BufferedImage(width, height, BufferedImage.OPAQUE);
                Graphics2D graphics2D = scaledImage.createGraphics();
                graphics2D.setRenderingHint(RenderingHints.KEY_ALPHA_INTERPOLATION,
                        RenderingHints.VALUE_ALPHA_INTERPOLATION_SPEED);
                graphics2D.drawImage(img, 0, 0, width, height, null);
                graphics2D.dispose();
                ImageIcon myIcon = new ImageIcon(scaledImage);
                ip_img.setIcon(myIcon);
            } catch (IOException ex) {
//                return "siopao.jpeg"; System.out.println(im);
//                throw new RuntimeException(img_path + " - " + t.img_path + " - " + ex);
            }

            jPanel11.add(ip_img, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 170, 170));

            return jPanel11;
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Rooms">
    public static class Rooms extends JPanel implements GridCellRenderer {

        private static final long serialVersionUID = 1L;

        @Override
        public Component getGridCellRendererComponent(JGrid grid,
                Object value, int index, boolean isSelected,
                boolean cellHasFocus) {
//            if (value != null && value instanceof Color) {
//                this.setBackground((Color) value);
//            }

            JLabel lbl_name = new javax.swing.JLabel();
            JXLabel lbl_num = new JXLabel();
            JLabel lbl_status = new javax.swing.JLabel();
            JLabel lbl_topay = new JLabel();
            JLabel lbl_back = new javax.swing.JLabel();
            JXLabel lbl_p_name = new JXLabel();
            S2_search.to_rooms t = (S2_search.to_rooms) value;
//            System.out.println(t.logo + "");
            JPanel jPanel11 = new javax.swing.JPanel() {

                @Override
                public void paintComponent(Graphics og) {
                    super.paintComponent(og);

                    Graphics2D g = (Graphics2D) og;

                    GradientPaint gradient = new GradientPaint(0, 100, Color.white, 0, 0, Color.white, true);

                    g.setPaint(gradient);
                    g.fillRoundRect(0, 0, 470, 255, 30, 30);

                }
            };

            jPanel11.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
//            System.out.println(t.status + " ---");

            lbl_name.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
            lbl_name.setForeground(java.awt.Color.red);
            lbl_name.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            lbl_name.setText(t.name);
            jPanel11.add(lbl_name, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 100, -1));

            lbl_num.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
            lbl_num.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            lbl_num.setText(t.num);
//            lbl_num.setLineWrap(true);
//            
            String names = "-----";
            int h = 0;
            for (Dlg_check_liquid.to_guests to : t.to_guest) {
                if (h == 0) {
                    names = to.name;
//                    break;
                }
            }
            jPanel11.add(lbl_num, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 60, 120, 33));
            lbl_topay.setBackground(new java.awt.Color(240, 240, 240));
            lbl_topay.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
            lbl_topay.setForeground(java.awt.Color.black);
            lbl_topay.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            lbl_topay.setText(names);
            lbl_topay.setOpaque(true);

            jPanel11.add(lbl_topay, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 100, 120, -1));

            lbl_status.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
            lbl_status.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
            lbl_status.setText(t.status);
            jPanel11.add(lbl_status, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 10, 120, -1));
            if (!t.status.equals("AVAILABLE")) {
                lbl_name.setForeground(java.awt.Color.red);
                lbl_num.setForeground(java.awt.Color.red);
            }

            if (t.status.equalsIgnoreCase("available")) {
                lbl_back.setBackground(new java.awt.Color(255, 255, 255));
                lbl_status.setText("AVAILABLE");
//                jPanel11.setBackground(java.awt.Color.green);
            } else {
                lbl_back.setBackground(java.awt.Color.green);
                lbl_status.setText("OCCUPIED");
            }
            lbl_back.setOpaque(true);
            jPanel11.add(lbl_back, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 120, 120));

            return jPanel11;
        }
    }
    // </editor-fold>

    // <editor-fold defaultstate="collapsed" desc="Popup">
    private JPanel popup() {
        JPanel pnl = new JPanel();
        final JLabel bt = new JLabel();
        final JLabel bt2 = new JLabel();
        pnl.setBackground(new java.awt.Color(255, 255, 255));
        pnl.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        bt.setBackground(new java.awt.Color(91, 88, 88));
        bt.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        bt.setForeground(new java.awt.Color(255, 255, 255));
        bt.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        bt.setIcon(new javax.swing.ImageIcon(getClass().
                getResource("/POS/img3/delete-minus.png"))); // NOI18N
        bt.setText("CANCEL");
        bt.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        bt.setOpaque(true);
        bt.addMouseListener(new java.awt.event.MouseAdapter() {

            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {

                bt2.setBackground(new java.awt.Color(91, 88, 88));
                bt.setBackground(new java.awt.Color(72, 160, 249));
                popup.hide();
                if (popup3 != null) {
                    popup3.hide();
                }
                cancel_order();
            }
        });
        pnl.add(bt, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 50, 180, 50));

        bt2.setBackground(new java.awt.Color(91, 88, 88));
        bt2.setFont(new java.awt.Font("SansSerif", 1, 14)); // NOI18N
        bt2.setForeground(new java.awt.Color(255, 255, 255));
        bt2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        bt2.setIcon(new javax.swing.ImageIcon(getClass().
                getResource("/POS/img3/edit-pencil.png"))); // NOI18N
        bt2.setText("EDIT");
        bt2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 255, 255)));
        bt2.setOpaque(true);
        bt2.addMouseListener(new java.awt.event.MouseAdapter() {

            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                bt2.setBackground(new java.awt.Color(72, 160, 249));
                bt.setBackground(new java.awt.Color(91, 88, 88));
                popup.hide();
                set_orders_cancel_pop();

//                update_qty_items();
            }
        });
        pnl.add(bt2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 180, 50));

        return pnl;
    }

    private JPanel popup_menu_admin() {
        JPanel pnl = new JPanel();
        JButton btn_logout = new javax.swing.JButton();
        JButton btn_standby = new javax.swing.JButton();
        JLabel lb_standby = new javax.swing.JLabel();
        JLabel lb_logout = new javax.swing.JLabel();
        JButton btn_add_product = new javax.swing.JButton();
        JLabel lb_add_product = new javax.swing.JLabel();
        JButton btn_discount = new javax.swing.JButton();
        JLabel lb_endorsement2 = new javax.swing.JLabel();
        JButton btn_report = new javax.swing.JButton();
        JLabel lb_report = new javax.swing.JLabel();
        JButton btn_tables1 = new javax.swing.JButton();
        JLabel lb_tables1 = new javax.swing.JLabel();
        JButton btn_voider = new javax.swing.JButton();
        JLabel lb_inventory1 = new javax.swing.JLabel();
        JButton btn_register_users = new javax.swing.JButton();
        JLabel lb_users = new javax.swing.JLabel();

        pnl.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        pnl.setBackground(new java.awt.Color(255, 255, 255));

        btn_logout.setIcon(new javax.swing.ImageIcon(getClass().
                getResource("/POS/img2/error.png"))); // NOI18N
        btn_logout.setBorderPainted(false);
        btn_logout.setContentAreaFilled(false);
        btn_logout.setFocusable(false);
        btn_logout.setRolloverIcon(new javax.swing.ImageIcon(getClass().
                getResource("/POS/img2/error.png"))); // NOI18N
        btn_logout.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popup_menu_admin.hide();
//                btn_logoutActionPerformed(evt);
                logout();
            }
        });
        pnl.add(btn_logout, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 0, 80, 80));

        btn_standby.setIcon(new javax.swing.ImageIcon(getClass().
                getResource("/POS/img2/hot-drink.png"))); // NOI18N
        btn_standby.setBorderPainted(false);
        btn_standby.setContentAreaFilled(false);
        btn_standby.setFocusable(false);
        btn_standby.setRolloverIcon(new javax.swing.ImageIcon(getClass().
                getResource("/POS/img2/hot-drink.png"))); // NOI18N
        btn_standby.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popup_menu_admin.hide();
                do_login("");
            }
        });
        pnl.add(btn_standby, new org.netbeans.lib.awtextra.AbsoluteConstraints(660, 0, 80, 80));

        lb_standby.setFont(new java.awt.Font("DejaVu Sans", 1, 14)); // NOI18N
        lb_standby.setForeground(new java.awt.Color(41, 9, 149));
        lb_standby.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lb_standby.setText("STANDBY");
        lb_standby.setFocusable(false);
        pnl.add(lb_standby, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 80, 100, 20));

        lb_logout.setFont(new java.awt.Font("DejaVu Sans", 1, 14)); // NOI18N
        lb_logout.setForeground(new java.awt.Color(41, 9, 149));
        lb_logout.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lb_logout.setText("Standby");
        lb_logout.setFocusable(false);
        pnl.add(lb_logout, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 80, 110, -1));

        btn_add_product.setIcon(new javax.swing.ImageIcon(getClass().
                getResource("/POS/img2/warehouse.png"))); // NOI18N
        btn_add_product.setBorderPainted(false);
        btn_add_product.setContentAreaFilled(false);
        btn_add_product.setFocusable(false);
        btn_add_product.setRolloverIcon(new javax.swing.ImageIcon(getClass().
                getResource("/POS/img2/warehouse.png"))); // NOI18N
        btn_add_product.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popup_menu_admin.hide();
                do_add_product();
            }
        });
        pnl.add(btn_add_product, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 0, 80, 80));

        lb_add_product.setFont(new java.awt.Font("DejaVu Sans", 1, 14)); // NOI18N
        lb_add_product.setForeground(new java.awt.Color(41, 9, 149));
        lb_add_product.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lb_add_product.setText("INVENTORY");
        lb_add_product.setFocusable(false);
        pnl.add(lb_add_product, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 80, 100, -1));

        btn_discount.setIcon(new javax.swing.ImageIcon(getClass().
                getResource("/POS/img2/shopping-cart (1).png"))); // NOI18N
        btn_discount.setBorderPainted(false);
        btn_discount.setContentAreaFilled(false);
        btn_discount.setFocusable(false);
        btn_discount.setRolloverIcon(new javax.swing.ImageIcon(getClass().
                getResource("/POS/img2/shopping-cart (1).png"))); // NOI18N
        btn_discount.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popup_menu_admin.hide();
                do_discount();
            }
        });
        pnl.add(btn_discount, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 0, 90, 80));

        lb_endorsement2.setFont(new java.awt.Font("DejaVu Sans", 1, 14)); // NOI18N
        lb_endorsement2.setForeground(new java.awt.Color(41, 9, 149));
        lb_endorsement2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lb_endorsement2.setText("DISCOUNT");
        lb_endorsement2.setFocusable(false);
        pnl.add(lb_endorsement2, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 80, 90, -1));

        btn_report.setIcon(new javax.swing.ImageIcon(getClass().
                getResource("/POS/img2/analytics.png"))); // NOI18N
        btn_report.setBorderPainted(false);
        btn_report.setContentAreaFilled(false);
        btn_report.setFocusable(false);
        btn_report.setRolloverIcon(new javax.swing.ImageIcon(getClass().
                getResource("/POS/img2/analytics.png"))); // NOI18N
        btn_report.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popup_menu_admin.hide();
                reports();
            }
        });
        pnl.add(btn_report, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 0, 80, 80));

        lb_report.setFont(new java.awt.Font("DejaVu Sans", 1, 14)); // NOI18N
        lb_report.setForeground(new java.awt.Color(41, 9, 149));
        lb_report.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lb_report.setText("REPORT");
        lb_report.setFocusable(false);
        pnl.add(lb_report, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 80, 80, 20));

        btn_tables1.setIcon(new javax.swing.ImageIcon(getClass().
                getResource("/POS/img2/room-key.png"))); // NOI18N
        btn_tables1.setBorderPainted(false);
        btn_tables1.setContentAreaFilled(false);
        btn_tables1.setFocusable(false);
        btn_tables1.setRolloverIcon(new javax.swing.ImageIcon(getClass().
                getResource("/POS/img2/room-key.png"))); // NOI18N

        btn_tables1.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popup_menu_admin.hide();
//               
                rooms();
            }
        });
        pnl.add(btn_tables1, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 0, 80, 80));

        lb_tables1.setFont(new java.awt.Font("DejaVu Sans", 1, 14)); // NOI18N
        lb_tables1.setForeground(new java.awt.Color(41, 9, 149));
        lb_tables1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        if (System.getProperty(
                "version", "ordering").
                equals("ordering")) {
            btn_tables1.setEnabled(true);
            lb_tables1.setText("TABLES");
        } else {
            btn_tables1.setEnabled(true);
            lb_tables1.setText("ROOMS");
        }

        lb_tables1.setFocusable(false);
        pnl.add(lb_tables1, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 80, 80, -1));

        btn_voider.setIcon(new javax.swing.ImageIcon(getClass().
                getResource("/POS/img2/x-button.png"))); // NOI18N
        btn_voider.setBorderPainted(false);
        btn_voider.setContentAreaFilled(false);
        btn_voider.setFocusable(false);
        btn_voider.setRolloverIcon(new javax.swing.ImageIcon(getClass().
                getResource("/POS/img2/x-button.png"))); // NOI18N
        btn_voider.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
//                popup_menu_admin.hide();
//                voider();
                void_order();
            }
        });
        pnl.add(btn_voider, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 0, 90, 80));

        lb_inventory1.setFont(new java.awt.Font("DejaVu Sans", 1, 14)); // NOI18N
        lb_inventory1.setForeground(new java.awt.Color(41, 9, 149));
        lb_inventory1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lb_inventory1.setText("VOIDER");
        lb_inventory1.setFocusable(false);
        pnl.add(lb_inventory1, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 80, 90, -1));

        btn_register_users.setIcon(new javax.swing.ImageIcon(getClass().
                getResource("/POS/img2/user (1).png"))); // NOI18N
        btn_register_users.setBorderPainted(false);
        btn_register_users.setContentAreaFilled(false);
        btn_register_users.setFocusable(false);
        btn_register_users.setRolloverIcon(new javax.swing.ImageIcon(getClass().
                getResource("/POS/img2/user (1).png"))); // NOI18N
        btn_register_users.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popup_menu_admin.hide();
//                btn_register_usersActionPerformed(evt);
                do_register_users();
            }
        });
        pnl.add(btn_register_users, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 0, 70, 80));

        lb_users.setFont(new java.awt.Font("DejaVu Sans", 1, 14)); // NOI18N
        lb_users.setForeground(new java.awt.Color(41, 9, 149));
        lb_users.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lb_users.setText("USERS");
        lb_users.setFocusable(false);
        pnl.add(lb_users, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 80, 70, -1));

        return pnl;
    }

    private JPanel popup_menu_su_cashier() {
        JPanel pnl = new JPanel();
        JLabel lb_standby = new JLabel();
        JLabel lb_logout = new JLabel();
        JLabel lb_pen = new JLabel();
        JButton btn_pending = new JButton();
        JLabel lb_pending = new JLabel();
        JButton btn_standby = new JButton();
        JButton btn_logout = new JButton();
        pnl.setLayout(new AbsoluteLayout());

        btn_logout.setIcon(new javax.swing.ImageIcon(getClass().
                getResource("/POS/img2/log-out2.png"))); // NOI18N
        btn_logout.setBorderPainted(false);
        btn_logout.setContentAreaFilled(false);
        btn_logout.setFocusable(false);
        btn_logout.setRolloverIcon(new javax.swing.ImageIcon(getClass().
                getResource("/POS/img2/log-out button-MO.png"))); // NOI18N
        btn_logout.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popup_menu_admin.hide();
                do_login("");
            }
        });
        pnl.add(btn_logout, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 0, 110, -1));

        btn_standby.setIcon(new javax.swing.ImageIcon(getClass().
                getResource("/POS/img2/stand-by.png"))); // NOI18N
        btn_standby.setBorderPainted(false);
        btn_standby.setContentAreaFilled(false);
        btn_standby.setFocusable(false);
        btn_standby.setRolloverIcon(new javax.swing.ImageIcon(getClass().
                getResource("/POS/img2/stand-by-MO.png"))); // NOI18N
        btn_standby.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popup_menu_admin.hide();
                do_login("");
            }
        });
        pnl.add(btn_standby, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 0, -1, 70));

        lb_standby.setFont(new java.awt.Font("DejaVu Sans", 1, 14)); // NOI18N
        lb_standby.setForeground(new java.awt.Color(41, 9, 149));
        lb_standby.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lb_standby.setText("STANDBY");
        lb_standby.setFocusable(false);
        pnl.add(lb_standby, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 80, 100, 20));

        lb_logout.setFont(new java.awt.Font("DejaVu Sans", 1, 14)); // NOI18N
        lb_logout.setForeground(new java.awt.Color(41, 9, 149));
        lb_logout.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lb_logout.setText("LOGOUT");
        lb_logout.setFocusable(false);
        pnl.add(lb_logout, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 80, 110, -1));

//        pnl.setBackground(new java.awt.Color(255, 255, 255));
//        pnl.add(lb_logout, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 0, 90, 100));
        lb_pen.setBackground(new java.awt.Color(251, 200, 213));
        lb_pen.setFont(new java.awt.Font("DejaVu Sans", 1, 12)); // NOI18N
        lb_pen.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lb_pen.setText("0");
        lb_pen.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        lb_pen.setFocusable(false);
        lb_pen.setOpaque(true);
        lb_pen.setText(FitIn.fmt_wc(S3_getpending.get_pending_count()));
        pnl.add(lb_pen, new org.netbeans.lib.awtextra.AbsoluteConstraints(590, 10, 30, 30));

        btn_pending.setIcon(new javax.swing.ImageIcon(getClass().
                getResource("/POS/img2/pending.png"))); // NOI18N
        btn_pending.setBorderPainted(false);
        btn_pending.setContentAreaFilled(false);
        btn_pending.setFocusable(false);
        btn_pending.setEnabled(false);
        btn_pending.setRolloverIcon(new javax.swing.ImageIcon(getClass().
                getResource("/POS/img2/pending-MO.png"))); // NOI18N
        btn_pending.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popup_menu_admin.hide();
                do_show_pending();
            }
        });
        pnl.add(btn_pending, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 10, -1, -1));

        lb_pending.setFont(new java.awt.Font("DejaVu Sans", 1, 14)); // NOI18N
        lb_pending.setForeground(new java.awt.Color(41, 9, 149));
        lb_pending.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lb_pending.setText("PENDING");
        lb_pending.setFocusable(false);
        pnl.add(lb_pending, new org.netbeans.lib.awtextra.AbsoluteConstraints(550, 80, -1, -1));
        return pnl;
    }

    private JPanel popup_menu_admin_su() {
        JPanel pnl = new JPanel();
        JButton btn_logout = new javax.swing.JButton();
        JButton btn_standby = new javax.swing.JButton();
        JLabel lb_standby = new javax.swing.JLabel();
        JLabel lb_logout = new javax.swing.JLabel();
        JButton btn_add_product = new javax.swing.JButton();
        JLabel lb_add_product = new javax.swing.JLabel();
        JButton btn_discount = new javax.swing.JButton();
        JLabel lb_endorsement2 = new javax.swing.JLabel();
        JButton btn_report = new javax.swing.JButton();
        JLabel lb_report = new javax.swing.JLabel();
        JButton btn_tables1 = new javax.swing.JButton();
        JLabel lb_tables1 = new javax.swing.JLabel();
        JButton btn_voider = new javax.swing.JButton();
        JLabel lb_inventory1 = new javax.swing.JLabel();
        JButton btn_register_users = new javax.swing.JButton();
        JLabel lb_users = new javax.swing.JLabel();

        pnl.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        btn_logout.setIcon(new javax.swing.ImageIcon(getClass().
                getResource("/POS/img2/log-out2.png"))); // NOI18N
        btn_logout.setBorderPainted(false);
        btn_logout.setContentAreaFilled(false);
        btn_logout.setFocusable(false);
        btn_logout.setRolloverIcon(new javax.swing.ImageIcon(getClass().
                getResource("/POS/img2/log-out button-MO.png"))); // NOI18N
        btn_logout.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popup_menu_admin.hide();
                logout();
            }
        });
        pnl.add(btn_logout, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 0, 110, -1));

        btn_standby.setIcon(new javax.swing.ImageIcon(getClass().
                getResource("/POS/img2/stand-by.png"))); // NOI18N
        btn_standby.setBorderPainted(false);
        btn_standby.setContentAreaFilled(false);
        btn_standby.setFocusable(false);
        btn_standby.setRolloverIcon(new javax.swing.ImageIcon(getClass().
                getResource("/POS/img2/stand-by-MO.png"))); // NOI18N
        btn_standby.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popup_menu_admin.hide();
                do_login("");
            }
        });
        pnl.add(btn_standby, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 0, -1, 70));

        lb_standby.setFont(new java.awt.Font("DejaVu Sans", 1, 14)); // NOI18N
        lb_standby.setForeground(new java.awt.Color(41, 9, 149));
        lb_standby.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lb_standby.setText("STANDBY");
        lb_standby.setFocusable(false);
        pnl.add(lb_standby, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 80, 100, 20));

        lb_logout.setFont(new java.awt.Font("DejaVu Sans", 1, 14)); // NOI18N
        lb_logout.setForeground(new java.awt.Color(41, 9, 149));
        lb_logout.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lb_logout.setText("LOGOUT");
        lb_logout.setFocusable(false);
        pnl.add(lb_logout, new org.netbeans.lib.awtextra.AbsoluteConstraints(760, 80, 110, -1));

        btn_add_product.setIcon(new javax.swing.ImageIcon(getClass().
                getResource("/POS/img2/inventory.png"))); // NOI18N
        btn_add_product.setBorderPainted(false);
        btn_add_product.setContentAreaFilled(false);
        btn_add_product.setFocusable(false);
        btn_add_product.setRolloverIcon(new javax.swing.ImageIcon(getClass().
                getResource("/POS/img2/inventory-mo.png"))); // NOI18N
        btn_add_product.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popup_menu_admin.hide();
                do_add_product();
            }
        });
        pnl.add(btn_add_product, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 0, -1, 80));

        lb_add_product.setFont(new java.awt.Font("DejaVu Sans", 1, 14)); // NOI18N
        lb_add_product.setForeground(new java.awt.Color(41, 9, 149));
        lb_add_product.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lb_add_product.setText("INVENTORY");
        lb_add_product.setFocusable(false);
        pnl.add(lb_add_product, new org.netbeans.lib.awtextra.AbsoluteConstraints(530, 80, 100, -1));

        btn_discount.setIcon(new javax.swing.ImageIcon(getClass().
                getResource("/POS/img2/discount.png"))); // NOI18N
        btn_discount.setBorderPainted(false);
        btn_discount.setContentAreaFilled(false);
        btn_discount.setFocusable(false);
        btn_discount.setRolloverIcon(new javax.swing.ImageIcon(getClass().
                getResource("/POS/img2/discount-MO.png"))); // NOI18N
        btn_discount.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popup_menu_admin.hide();
                do_discount();
            }
        });
        pnl.add(btn_discount, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 0, 90, 80));

        lb_endorsement2.setFont(new java.awt.Font("DejaVu Sans", 1, 14)); // NOI18N
        lb_endorsement2.setForeground(new java.awt.Color(41, 9, 149));
        lb_endorsement2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lb_endorsement2.setText("DISCOUNT");
        lb_endorsement2.setFocusable(false);
        pnl.add(lb_endorsement2, new org.netbeans.lib.awtextra.AbsoluteConstraints(430, 80, 90, -1));

        btn_report.setIcon(new javax.swing.ImageIcon(getClass().
                getResource("/POS/img2/reports.png"))); // NOI18N
        btn_report.setBorderPainted(false);
        btn_report.setContentAreaFilled(false);
        btn_report.setFocusable(false);
        btn_report.setRolloverIcon(new javax.swing.ImageIcon(getClass().
                getResource("/POS/img2/reports-MO.png"))); // NOI18N
        btn_report.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popup_menu_admin.hide();
                reports();
            }
        });
        pnl.add(btn_report, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 0, 80, 80));

        lb_report.setFont(new java.awt.Font("DejaVu Sans", 1, 14)); // NOI18N
        lb_report.setForeground(new java.awt.Color(41, 9, 149));
        lb_report.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lb_report.setText("REPORT");
        lb_report.setFocusable(false);
        pnl.add(lb_report, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 80, 80, 20));

        btn_register_users.setIcon(new javax.swing.ImageIcon(getClass().
                getResource("/POS/img2/users.png"))); // NOI18N
        btn_register_users.setBorderPainted(false);
        btn_register_users.setContentAreaFilled(false);
        btn_register_users.setFocusable(false);
        btn_register_users.setRolloverIcon(new javax.swing.ImageIcon(getClass().
                getResource("/POS/img2/users-MO.png"))); // NOI18N
        btn_register_users.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popup_menu_admin.hide();
                do_register_users();
            }
        });
        pnl.add(btn_register_users, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 0, 70, 80));

        lb_users.setFont(new java.awt.Font("DejaVu Sans", 1, 14)); // NOI18N
        lb_users.setForeground(new java.awt.Color(41, 9, 149));
        lb_users.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lb_users.setText("USERS");
        lb_users.setFocusable(false);
        pnl.add(lb_users, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 80, 70, 20));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        pnl.add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(880, 0, 90, 100));

        return pnl;
    }
    // </editor-fold>
    ArrayListModel tbl_orders_ALM = new ArrayListModel();

    private void do_show_pending() {
        tbl_orders_ALM.clear();
//       

        Window w = (Window) this;
        Dlg_pending d = Dlg_pending.create(w, true);
        d.setTitle("Pending");
        int size = orders_model.size();
//        JOptionPane.showMessageDialog(null, size);
        List<to_order> datas = new ArrayList();
        List<S2_search.to_orders> data = new ArrayList();
        for (int i = 0; i < size; i++) {
            Object j = orders_model.getElementAt(i);
            final S2_search.to_orders t = (S2_search.to_orders) j;
            to_order to = new to_order(t.desc, t.price, t.qty, t.uom, t.name, t.qty, "-1", t.cat_id, t.category_name, t.printing_assembly, t.group_id, t.nights);
            data.add(t);
            datas.add(to);

        }

//        tbl_orders_ALM.addAll(datas);
        S2_update_pending.update_2(name11, tbl_orders_ALM, data);

        d.pass(tbl_orders_ALM, name11);
//         tbl_orders_ALM.clear();
//         tbl_orders_M.fireTableDataChanged();
        d.setCallback(new Dlg_pending.Callback() {

            @Override
            public void ok(CloseDialog cd, Dlg_pending.OutputData data) {
                cd.ok();
                process_retrieve_pending(cd, data);
            }

            @Override
            public void add(CloseDialog closeDialog, Dlg_pending.OutputDataAdd data) {

                closeDialog.ok();
            }

            @Override
            public void delete(CloseDialog closeDialog, Dlg_pending.Data data) {
                closeDialog.ok();

            }
        });

//        Application.locateOnParentCenter(w, d);
        Center.setCenter(d);
        d.setVisible(true);
    }

    private void process_retrieve_pending(CloseDialog cd, Dlg_pending.OutputData data) {
//        cd.ok();

        List<to_order> to_orders = S15_save_new_pen_orders.retrieve_pending_db(data.selected_customer);
        for (to_order t : to_orders) {
//            S2_search.to_orders to = new S2_search.to_orders(t.code, t.uom, t.product_name, t.unit_price, t.quantity, "", t.quantity, tbl_orders_ALM, input_qty, t.cat_id, t.category_name, t.printing_assemblyl, t.disc_name, t.disc_rate, t.discount, t.customer_name, t.customer_address, t.customer_address);
        }

//            loadData(to_orders);
        name11 = data.selected_customer;

//        JOptionPane.showMessageDialog(null, name11);
    }

    private void process_add_pending(CloseDialog closeDialog, Dlg_pending.OutputDataAdd data) {

        List<to_order> to_orders = tbl_orders_ALM;
        S15_save_new_pen_orders.do_add_pending(data.customer_added, to_orders);
        closeDialog.ok();
//        clear();

    }
    private String name11 = "";

    // <editor-fold defaultstate="collapsed" desc="Menu Controls">
    private void do_register_users() {

        Window p = (Window) this;
        Dlg_user_registration nd = Dlg_user_registration.create(p, true);
        nd.setTitle("");
        nd.do_pass();
        nd.setCallback(new Dlg_user_registration.Callback() {

            @Override
            public void ok(CloseDialog closeDialog, Dlg_user_registration.OutputData data) {
//                closeDialog.ok();
            }
        });
        Center.setCenter(nd);

        nd.setVisible(true);
    }

    private void voider() {
        Window p = (Window) this;
        Dlg_voider nd = Dlg_voider.create(p, true);
        nd.setTitle("Voider");
//        nd.pass(date);
        nd.setCallback(new Dlg_voider.Callback() {

            @Override
            public void ok(CloseDialog closeDialog, Dlg_voider.OutputData data) {
//                closeDialog.ok();
//                get_category_for_btn();
//                set_first_category();
            }
        });
        Center.setCenter(nd);

        nd.setVisible(true);
    }

    private void rooms() {
        Window p = (Window) this;
        Dlg_table nd = Dlg_table.create(p, true);
        nd.setTitle("");
//        nd.pass(date);
        nd.setCallback(new Dlg_table.Callback() {

            @Override
            public void ok(CloseDialog closeDialog, Dlg_table.OutputData data) {
//                closeDialog.ok();
//                get_category_for_btn();
//                set_first_category();
            }
        });
        Center.setCenter(nd);

        nd.setVisible(true);
    }

    private void reports() {
        String version = System.getProperty("version", "retail");
//         JOptionPane.showMessageDialog(null, cashiering_for);

        if (version.equals("endorsements")) {
            Window p = (Window) this;
            Dlg_report_endorsements nd = Dlg_report_endorsements.create(p, true);
            nd.setTitle("");
            nd.do_pass("");
            nd.setCallback(new Dlg_report_endorsements.Callback() {

                @Override
                public void ok(CloseDialog closeDialog, Dlg_report_endorsements.OutputData data) {
//                        closeDialog.ok();
                }
            });
            Center.setCenter(nd);

            nd.setVisible(true);
        } else {
            Window p = (Window) this;
            Dlg_sales_report nd = Dlg_sales_report.create(p, true);
            nd.setTitle("");
            nd.do_pass("");
            nd.setCallback(new Dlg_sales_report.Callback() {

                @Override
                public void ok(CloseDialog closeDialog, Dlg_sales_report.OutputData data) {
//                        closeDialog.ok();
                }
            });
            Toolkit tk = Toolkit.getDefaultToolkit();
            int xSize = ((int) tk.getScreenSize().
                    getWidth());
            int ySize = ((int) tk.getScreenSize().
                    getHeight());
            nd.setSize(xSize, ySize);
            nd.setVisible(true);

//            nd.setVisible(true);
        }

    }

    private void do_discount() {
        Window p = (Window) this;
        Dlg_add_discount nd = Dlg_add_discount.create(p, true);
        nd.setTitle("");
//        nd.pass(date);
        nd.setCallback(new Dlg_add_discount.Callback() {

            @Override
            public void ok(CloseDialog closeDialog, Dlg_add_discount.OutputData data) {
//                closeDialog.ok();
            }
        });
        Center.setCenter(nd);

        nd.setVisible(true);
    }

    private void do_add_product() {

        Window w = (Window) this;
        Dlg_add3 nd = Dlg_add3.create(w, true);
        nd.setTitle("");
        nd.do_pass("");
        nd.setCallback(new Dlg_add3.Callback() {

            @Override
            public void ok(CloseDialog closeDialog, Dlg_add3.OutputData data) {
//                closeDialog.ok();
//                do_set_button_product_names(flip_no);
//                get_category_for_btn();
//                set_first_category();
            }
        });

        Toolkit tk = Toolkit.getDefaultToolkit();
        int xSize = ((int) tk.getScreenSize().
                getWidth());
        int ySize = ((int) tk.getScreenSize().
                getHeight());

        nd.setSize(xSize, ySize);
        nd.setVisible(true);
    }

    public void do_login(final String name) {
        my_order = 0;
        final String names = System.getProperty("entityName", "Synapse Software Tech");
        Window w = (Window) this;
        Dlg_login1 d1 = Dlg_login1.create(w, true);
        d1.setTitle("Login");
        d1.setCallback(new Dlg_login1.Callback() {

            @Override
            public void ok(CloseDialog cd, Dlg_login1.OutputData data) {
                cd.ok();
                process_login_ok(data);
            }

            @Override
            public void show_login_again(CloseDialog closeDialog) {
                closeDialog.ok();
                do_login(names);
            }

            private void process_login_ok(OutputData data) {
                String name = S3_insert_new_user.get_name(data.un);
                lbl_cashier_name.setText(name);
                int user_level = S12_retval_user_level.get_user_level(data.un);
                to_users.setUser_level1("" + user_level);
                to_users.setUsername1(name);
                to_users.setUser_screen_name(name);
                myInit();
                set_or();
                if (to_users.get_inventory() == 1) {
                    btn_inventory.setVisible(true);

                } else {
                    btn_inventory.setVisible(false);
                }
            }
        });
        Center.setCenter(d1);
        d1.setVisible(true);

    }

    private void logout() {
//        JOptionPane.showMessageDialog(null,to_users.user_level1);

        if (user_id.equals("1")) {
            do_logout2();
        } else {
            do_logout();
        }
    }

    private void do_logout() {
        String user_name = lbl_cashier_name.getText();
        Window w = (Window) this;
        Dlg_logout d = Dlg_logout.create(w, true);
        d.setTitle("Logout?");
        d.pass1(to_users.username1);
        d.setCallback(new Dlg_logout.Callback() {

            @Override
            public void ok(CloseDialog cd, Dlg_logout.OutputData data) {
                cd.ok();
                do_login("");
                my_order = 0;
//                System.exit(1);
            }
        });

        Application.locateOnParentCenter(w, d);
        d.pass(user_name);
        d.setVisible(true);

    }

    private void do_logout2() {

        Window w = (Window) this;
        Dlg_log_out_admin d = Dlg_log_out_admin.create(w, true);
        d.setTitle("Logout?");
        d.setCallback(new Dlg_log_out_admin.Callback() {

            @Override
            public void ok(CloseDialog cd, Dlg_log_out_admin.OutputData data) {
                System.exit(1);

            }
        });

        Application.locateOnParentCenter(w, d);

        d.setVisible(true);

    }
    // </editor-fold>

    private JPanel popup_check() {
        JPanel pnl = new JPanel();
        JButton btn_p_close = new javax.swing.JButton();
        JButton btn_p_check = new javax.swing.JButton();
        JButton btn_p_order = new javax.swing.JButton();
        JButton btn_p_cancel = new javax.swing.JButton();
        JXLabel lbl_p_name = new JXLabel();

        pnl.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        int row = jg_orders.getSelectedIndex();

        Object value = orders_model.getElementAt(row);
        final S2_search.to_rooms t = (S2_search.to_rooms) value;
        String status = "";
        if (t.status.equals("AVAILABLE")) {
            status = "CHECK-IN";
        } else {
            status = "CHECK-OUT";
        }

        btn_p_close.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btn_p_close.setText("CLOSE");
        btn_p_close.setFocusable(false);
        pnl.add(btn_p_close, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 150, 150, 50));
        btn_p_close.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                popup_check.hide();
                lbl_table_no.setText("0");
            }
        });
        btn_p_check.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btn_p_check.setText(status);
        btn_p_check.setFocusable(false);
        pnl.add(btn_p_check, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 150, 50));
        btn_p_check.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                lbl_table_no.setText(t.id);
                check_ins();
            }
        });

        btn_p_order.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btn_p_order.setText("ORDER");
        btn_p_order.setFocusable(false);
        if (t.status.equals("AVAILABLE")) {
            btn_p_order.setEnabled(false);
        }
        pnl.add(btn_p_order, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 50, 150, 50));
        btn_p_order.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                user_id = "6";
                lbl_table_no.setText(t.id);
                btn_add_order.setVisible(true);
                btn_back.setVisible(true);

                init_cashier();
                init_items();
                init_catogories();
                pnl_holder_guest_details.setVisible(false);
                clear_room();
                popup_check.hide();
//                init_rooms();
            }
        });

        btn_p_cancel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        btn_p_cancel.setText("CANCEL");
        btn_p_cancel.setFocusable(false);
        if (t.status.equals("AVAILABLE")) {
            btn_p_cancel.setEnabled(false);
        }
        btn_p_cancel.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                lbl_table_no.setText(t.id);
            }
        });

        pnl.add(btn_p_cancel, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 100, 150, 50));

        lbl_p_name.setForeground(new java.awt.Color(255, 255, 255));
        lbl_p_name.setBackground(new java.awt.Color(0, 153, 255));
        lbl_p_name.setText(t.guest_name);
        lbl_p_name.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lbl_p_name.setIconTextGap(10);
        lbl_p_name.setOpaque(true);
        lbl_p_name.setTextRotation((90 * Math.PI / 180)); // 45 degrees in radian.
        lbl_p_name.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_p_name.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        pnl.add(lbl_p_name, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 0, 20, 200));
        return pnl;
    }
    String tbl_id = "-1";
    double tbl_room_rate = 0;
    double tbl_topay = 0;

    private void check_ins_ordering() {
        String version = System.getProperty("version", "ordering");

        int id = -1;
        String guest_id = "-1";
        String fname = "Walk-In";
        String lname = "";
        String mi = "";
        String country = "";
        String email_address = "";
        int status = 0;
        String diver_cert_lvl = "0";
        String contact_no = "0";
        String emergency_contact_name = "0";
        String passport_no = "0";
        String remarks = "0";
        String how = "0";
        int newsletter = 0;
        int staff = 0;
        S1_guest.to_guests to = new S1_guest.to_guests(id, guest_id, fname, lname, mi, country, email_address, status, diver_cert_lvl, contact_no, emergency_contact_name, passport_no, remarks, how, newsletter, staff, 0);
        List<S1_guest.to_guests> datas = new ArrayList();
        datas.add(to);
        String id1 = "0";
        String table_no = tbl_id;

        String date_added = DateType.datetime.format(new Date());
        double amount = tbl_topay;
        String or_no = "0";
        String status1 = "0";
        S1_check_in.to_customer_tables to1 = new S1_check_in.to_customer_tables(id1, table_no, date_added, amount, or_no, status1);

        S1_check_in.check_in(to1, datas, tbl_room_rate, 0, new ArrayList());

        clear_room();
        init_rooms();
    }

    private void check_ins() {
        final String version = System.getProperty("version", "ordering");
        if (version.equals("ordering1")) {
            check_ins_ordering();
        } else {
            int row = jg_orders.getSelectedIndex();
            if (row < 0) {
                return;
            }
            Object value = orders_model.getElementAt(row);
            final S2_search.to_rooms t = (S2_search.to_rooms) value;
            if (!t.status.equals("AVAILABLE")) {
                payments(FitIn.fmt_wc_0(t.topay));
            } else {
                Window p = (Window) this;
                Dlg_guest nd = Dlg_guest.create(p, true);
                nd.setTitle("");
                nd.do_pass(version, t.id, t.type, t.percentage, t.name);
                nd.setCallback(new Dlg_guest.Callback() {

                    @Override
                    public void ok(CloseDialog closeDialog, Dlg_guest.OutputData data) {
                        closeDialog.ok();
                        t.setPercentage(data.percentages);
                        String id = "0";
                        String table_no = t.id;
                        String date_added = DateType.datetime.format(new Date());
                        double amount = t.topay;
                        String or_no = "0";
                        String status = "0";
                        S1_check_in.to_customer_tables to = new S1_check_in.to_customer_tables(id, table_no, date_added, amount, or_no, status);
                        S1_check_in.check_in(to, data.to1, t.room_rate, 0, data.items);

                        if (version.equals("ordering")) {
                            Prompt.call("Successfully Added");
                        } else {
                            Prompt.call("Check-In Successfull");
                        }

                        clear_room();
                        init_rooms();

                    }
                });
                Center.setCenter(nd);

                nd.setVisible(true);
            }
        }
    }

    private JPanel popup_items() {

        JPanel pnl = new JPanel();
        pnl.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        pnl.setPreferredSize(new java.awt.Dimension(229, 299));
        final JLabel lbl_p_qty = new javax.swing.JLabel();
        final JButton lbl_p_3 = new javax.swing.JButton();
        final JButton lbl_p_1 = new javax.swing.JButton();
        final JButton lbl_p_2 = new javax.swing.JButton();
        final JButton lbl_p_4 = new javax.swing.JButton();
        final JButton lbl_p_5 = new javax.swing.JButton();
        final JButton lbl_p_6 = new javax.swing.JButton();
        final JButton lbl_p_7 = new javax.swing.JButton();
        final JButton lbl_p_8 = new javax.swing.JButton();
        final JButton lbl_p_c = new javax.swing.JButton();
        final JButton lbl_p_0 = new javax.swing.JButton();
        final JButton lbl_p_9 = new javax.swing.JButton();
        final JButton lbl_p_go = new javax.swing.JButton();
        final JButton lbl_p_dot = new javax.swing.JButton();
        final JButton lbl_p_x = new javax.swing.JButton();
        lbl_p_qty.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lbl_p_qty.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_p_qty.setText("");
        lbl_p_qty.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        pnl.add(lbl_p_qty, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 210, 40));

        lbl_p_1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N

        lbl_p_1.addActionListener(new java.awt.event.ActionListener() {

            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                set_qty("1");
            }

            public void set_qty(String string) {
                lbl_p_qty.setText(lbl_p_qty.getText() + string);
            }
        });

        lbl_p_1.setText("1");
        pnl.add(lbl_p_1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 50, 70, 50));

        lbl_p_3.setText("3");
        lbl_p_3.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                set_qty("3");
            }

            public void set_qty(String string) {
                lbl_p_qty.setText(lbl_p_qty.getText() + string);
            }
        });
        lbl_p_3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lbl_p_3.setText("3");
        pnl.add(lbl_p_3, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 50, 70, 50));

        lbl_p_2.setText("2");
        lbl_p_2.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                set_qty("2");
            }

            public void set_qty(String string) {
                lbl_p_qty.setText(lbl_p_qty.getText() + string);
            }
        });
        lbl_p_2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lbl_p_2.setText("2");
        pnl.add(lbl_p_2, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 50, 70, 50));

        lbl_p_4.setText("4");
        lbl_p_4.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                set_qty("4");
            }

            public void set_qty(String string) {
                lbl_p_qty.setText(lbl_p_qty.getText() + string);
            }
        });
        lbl_p_4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lbl_p_4.setText("4");
        pnl.add(lbl_p_4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 100, 70, 50));

        lbl_p_5.setText("5");
        lbl_p_5.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                set_qty("5");
            }

            public void set_qty(String string) {
                lbl_p_qty.setText(lbl_p_qty.getText() + string);
            }
        });
        lbl_p_5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lbl_p_5.setText("5");
        pnl.add(lbl_p_5, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 100, 70, 50));

        lbl_p_6.setText("6");
        lbl_p_6.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                set_qty("6");
            }

            public void set_qty(String string) {
                lbl_p_qty.setText(lbl_p_qty.getText() + string);
            }
        });
        lbl_p_6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lbl_p_6.setText("6");
        pnl.add(lbl_p_6, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 100, 70, 50));

        lbl_p_7.setText("7");
        lbl_p_7.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                set_qty("7");
            }

            public void set_qty(String string) {
                lbl_p_qty.setText(lbl_p_qty.getText() + string);
            }
        });
        lbl_p_7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lbl_p_7.setText("7");
        pnl.add(lbl_p_7, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 150, 70, 50));

        lbl_p_8.setText("8");
        lbl_p_8.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                set_qty("8");
            }

            public void set_qty(String string) {
                lbl_p_qty.setText(lbl_p_qty.getText() + string);
            }
        });
        lbl_p_8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lbl_p_8.setText("8");
        pnl.add(lbl_p_8, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 150, 70, 50));

        lbl_p_c.setText("C");
        lbl_p_c.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lbl_p_qty.setText("");
            }

            public void set_qty(String string) {
                lbl_p_qty.setText(lbl_p_qty.getText() + string);
            }
        });
        lbl_p_c.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lbl_p_c.setText("CL");
        pnl.add(lbl_p_c, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 200, 70, 50));

        lbl_p_0.setText("0");
        lbl_p_0.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                set_qty("0");
            }

            public void set_qty(String string) {
                lbl_p_qty.setText(lbl_p_qty.getText() + string);
            }
        });
        lbl_p_0.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lbl_p_0.setText("0");
        pnl.add(lbl_p_0, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 200, 70, 50));

        lbl_p_9.setText("9");
        lbl_p_9.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                set_qty("9");
            }

            public void set_qty(String string) {
                lbl_p_qty.setText(lbl_p_qty.getText() + string);
            }
        });
        lbl_p_9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lbl_p_9.setText("9");
        pnl.add(lbl_p_9, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 150, 70, 50));

        lbl_p_go.setText(">");
        lbl_p_go.addActionListener(new java.awt.event.ActionListener() {

            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popup2.hide();
//                popup3.hide();
                input_qty = FitIn.toDouble(lbl_p_qty.getText());
                get_clicked_items();
            }
        });

        lbl_p_go.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lbl_p_go.setText("OK");
        pnl.add(lbl_p_go, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 250, 130, 40));

        lbl_p_dot.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lbl_p_dot.setText(".");
        lbl_p_dot.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                set_qty(".");
            }

            public void set_qty(String string) {
                lbl_p_qty.setText(lbl_p_qty.getText() + string);
            }
        });
        pnl.add(lbl_p_dot, new org.netbeans.lib.awtextra.AbsoluteConstraints(80, 200, 70, 50));

        lbl_p_x.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lbl_p_x.setText("X");
        lbl_p_x.addActionListener(new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {
                popup2.hide();
                input_qty = 0;
            }
        });
        pnl.add(lbl_p_x, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 250, 80, 40));

        return pnl;
    }

    private JPanel popup_orders_cancel() {

        JPanel pnl = new JPanel();
        pnl.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());
        final JLabel lbl_p_qty = new javax.swing.JLabel();
        final JButton lbl_p_3 = new javax.swing.JButton();
        final JButton lbl_p_1 = new javax.swing.JButton();
        final JButton lbl_p_2 = new javax.swing.JButton();
        final JButton lbl_p_4 = new javax.swing.JButton();
        final JButton lbl_p_5 = new javax.swing.JButton();
        final JButton lbl_p_6 = new javax.swing.JButton();
        final JButton lbl_p_7 = new javax.swing.JButton();
        final JButton lbl_p_8 = new javax.swing.JButton();
        final JButton lbl_p_c = new javax.swing.JButton();
        final JButton lbl_p_0 = new javax.swing.JButton();
        final JButton lbl_p_9 = new javax.swing.JButton();
        final JButton lbl_p_go = new javax.swing.JButton();

        lbl_p_qty.setBackground(new java.awt.Color(0, 0, 0));
        lbl_p_qty.setFont(new java.awt.Font("SansSerif", 1, 18)); // NOI18N
        lbl_p_qty.setForeground(java.awt.Color.green);
        lbl_p_qty.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lbl_p_qty.setOpaque(true);
        pnl.add(lbl_p_qty, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 210, 30));

        lbl_p_1.setText("1");
        lbl_p_1.addActionListener(new java.awt.event.ActionListener() {

            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                set_qty("1");
            }

            public void set_qty(String string) {
                lbl_p_qty.setText(lbl_p_qty.getText() + string);
            }
        });

        pnl.add(lbl_p_1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 30, 70, 50));

        lbl_p_3.setText("3");
        lbl_p_3.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                set_qty("3");
            }

            public void set_qty(String string) {
                lbl_p_qty.setText(lbl_p_qty.getText() + string);
            }
        });
        pnl.add(lbl_p_3, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 30, 70, 50));

        lbl_p_2.setText("2");
        lbl_p_2.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                set_qty("2");
            }

            public void set_qty(String string) {
                lbl_p_qty.setText(lbl_p_qty.getText() + string);
            }
        });
        pnl.add(lbl_p_2, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 30, 70, 50));

        lbl_p_4.setText("4");
        lbl_p_4.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                set_qty("4");
            }

            public void set_qty(String string) {
                lbl_p_qty.setText(lbl_p_qty.getText() + string);
            }
        });
        pnl.add(lbl_p_4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 80, 70, 50));

        lbl_p_5.setText("5");
        lbl_p_5.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                set_qty("5");
            }

            public void set_qty(String string) {
                lbl_p_qty.setText(lbl_p_qty.getText() + string);
            }
        });
        pnl.add(lbl_p_5, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 80, 70, 50));

        lbl_p_6.setText("6");
        lbl_p_6.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                set_qty("6");
            }

            public void set_qty(String string) {
                lbl_p_qty.setText(lbl_p_qty.getText() + string);
            }
        });
        pnl.add(lbl_p_6, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 80, 70, 50));

        lbl_p_7.setText("7");
        lbl_p_7.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                set_qty("7");
            }

            public void set_qty(String string) {
                lbl_p_qty.setText(lbl_p_qty.getText() + string);
            }
        });
        pnl.add(lbl_p_7, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 130, 70, 50));

        lbl_p_8.setText("8");
        lbl_p_8.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                set_qty("8");
            }

            public void set_qty(String string) {
                lbl_p_qty.setText(lbl_p_qty.getText() + string);
            }
        });
        pnl.add(lbl_p_8, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 130, 70, 50));

        lbl_p_c.setText("C");
        lbl_p_c.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lbl_p_qty.setText("");
            }

            public void set_qty(String string) {
                lbl_p_qty.setText(lbl_p_qty.getText() + string);
            }
        });
        pnl.add(lbl_p_c, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 180, 70, 50));

        lbl_p_0.setText("0");
        lbl_p_0.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                set_qty("0");
            }

            public void set_qty(String string) {
                lbl_p_qty.setText(lbl_p_qty.getText() + string);
            }
        });
        pnl.add(lbl_p_0, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 180, 70, 50));

        lbl_p_9.setText("9");
        lbl_p_9.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                set_qty("9");
            }

            public void set_qty(String string) {
                lbl_p_qty.setText(lbl_p_qty.getText() + string);
            }
        });
        pnl.add(lbl_p_9, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 130, 70, 50));

        lbl_p_go.setText(">");
        lbl_p_go.addActionListener(new java.awt.event.ActionListener() {

            @Override
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                input_qty2 = FitIn.toDouble(lbl_p_qty.getText());
                popup3.hide();
                popup2.hide();

                get_clicked_orders_cancel();

            }
        });

        lbl_p_go.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lbl_p_go.setText("OK");
        pnl.add(lbl_p_go, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 250, 130, 40));

        return pnl;
    }
    double input_qty = 0;
    double input_qty2 = 0;

    private void cancel_order() {
        int row = jg_orders.getSelectedIndex();
        if (row < 0) {
            return;
        }
        orders_model.removeElementAt(row);
        jg_orders.setModel(orders_model);
        init_orders_ref();
        set_amount();
        order_count();
    }

    private void set_amount() {
        final String ui_items = System.getProperty("ui_items", "list");
        int row = 0;
        double amount = 0;
        if (ui_items.equals("list")) {
            row = tbl_table_orders_ALM.size();
            for (int i = 0; i < row; i++) {
                Object j_orders = tbl_table_orders_ALM.getElementAt(i);
                S2_search.to_orders t_orders = (S2_search.to_orders) j_orders;
                amount += t_orders.price * t_orders.qty;
            }
        } else {
            row = orders_model.size();
            for (int i = 0; i < row; i++) {
                Object j_orders = orders_model.getElementAt(i);
                S2_search.to_orders t_orders = (S2_search.to_orders) j_orders;
                amount += t_orders.price * t_orders.qty;
            }
        }

        lbl_amount.setText(FitIn.fmt_wc_0(amount));
        lbl_next_customer.setText(FitIn.fmt_wc_0(amount));
    }

    private void set_amount_items() {
        int row = item_model.size();
        double amount = 0;
        for (int i = 0; i < row; i++) {
            Object j_orders = item_model.getElementAt(i);
            S2_search.to_items t_orders = (S2_search.to_items) j_orders;
            amount += t_orders.qty * t_orders.price;
        }
        lbl_amount.setText(FitIn.fmt_wc_0(amount));
    }

    private void clear_order() {
//        orders_model.clear();
        tbl_table_orders_ALM.clear();
        tbl_orders_M.fireTableDataChanged();
        lbl_amount.setText("0.00");
//        init_orders_ref();
//
//        set_amount();
//        order_count();
    }

    private void order_count() {
        int rows = orders_model.getSize();
        lbl_order_count.setText("" + rows);
    }
    String table_id = "";
    String table_name = "";

    private void payments(String payment) {
        String version = System.getProperty("version", "resto");
        final String ui_items = System.getProperty("ui_items", "list");
        if ((item_model.isEmpty() && version.equals("ordering") && ui_items.
                equals("icon")) || (tbl_customer_tables_details_ALM.isEmpty() && version.
                equals("ordering") && ui_items.equals("list"))) {
            return;
        }
        List<to_order> data_orders = new ArrayList();
        if (lbl_table_no.getText().
                equals("0")) {
            if (ui_items.equals("list")) {
                for (int i = 0; i < tbl_table_orders_ALM.size(); i++) {
                    Object j = tbl_table_orders_ALM.getElementAt(i);
                    S2_search.to_orders t = (S2_search.to_orders) j;
                    String product_name = t.desc;
                    double unit_price = t.price;
                    double quantity = t.qty;
                    String uom = t.uom;
                    String code = t.name;
                    double hd_uom = t.qty;
                    to_order to = new to_order(product_name, unit_price, quantity, uom, code, hd_uom, "-1", t.cat_id, t.category_name, t.printing_assembly, t.group_id, t.nights);
                    data_orders.add(to);
                }
            } else {
                for (int i = 0; i < orders_model.size(); i++) {
                    Object j = orders_model.getElementAt(i);
                    S2_search.to_orders t = (S2_search.to_orders) j;
                    String product_name = t.desc;
                    double unit_price = t.price;
                    double quantity = t.qty;
                    String uom = t.uom;
                    String code = t.name;
                    double hd_uom = t.qty;
                    to_order to = new to_order(product_name, unit_price, quantity, uom, code, hd_uom, "-1", t.cat_id, t.category_name, t.printing_assembly, t.group_id, t.nights);
                    data_orders.add(to);
                }
            }
        } else {
            if (ui_items.equals("list")) {
                for (int i = 0; i < tbl_customer_tables_details_ALM.size(); i++) {
                    Object j = tbl_customer_tables_details_ALM.getElementAt(i);
                    S2_search.to_items t = (S2_search.to_items) j;
                    String product_name = t.desc;
                    double unit_price = t.price;
                    double quantity = t.qty;
                    String uom = t.uom;
                    String code = t.name;
                    double hd_uom = t.qty;
                    to_order to = new to_order(product_name, unit_price, quantity, uom, code, hd_uom, t.guest_id, t.cat_id, t.category_name, t.printing_assembly, t.group_id, t.nights);
                    data_orders.add(to);
                }
            } else {
                for (int i = 0; i < item_model.size(); i++) {
                    Object j = item_model.getElementAt(i);
                    S2_search.to_items t = (S2_search.to_items) j;
                    String product_name = t.desc;
                    double unit_price = t.price;
                    double quantity = t.qty;
                    String uom = t.uom;
                    String code = t.name;
                    double hd_uom = t.qty;
                    to_order to = new to_order(product_name, unit_price, quantity, uom, code, hd_uom, t.guest_id, t.cat_id, t.category_name, t.printing_assembly, t.group_id, t.nights);
                    data_orders.add(to);
                }
            }

        }
        double advance_payment = FitIn.toDouble(lbl_advance_payment.getText());
        payments = 0;
        Window w = (Window) this;
        Dlg_pay d = Dlg_pay.create(w, true);
        d.setTitle("Pay");
        d.load(new Dlg_pay.InputData((List) data_orders), payment, "" + table_ids, advance_payment, advance_usd, bank_php, bank_usd,
                staff, advance_credit_card, guest_ids, my_guest_room_ids);
        d.do_pass(user_id, "" + table_ids);
        d.setCallback(new Dlg_pay.Callback() {

            @Override
            public void ok(CloseDialog cd, Dlg_pay.OutputData data) {
                payments = 1;
                cd.ok();
                process_pay(cd, data, data.tt, data.a, data.tc, data.b, data.member_id, data.dollar_rate, data.dollar_tendered, data.peso);
            }

            @Override
            public void ok2(CloseDialog closeDialog, Dlg_pay.OutputData data, Dlg_pay.to_print_save prints) {
                payments = 1;
                closeDialog.ok();
                String save_billing_history_bar = System.getProperty("save_billing_history_bar", "false");
                if (save_billing_history_bar.equalsIgnoreCase("true")) {
                    save_and_print2(prints);
                }
                process_pay(closeDialog, data, data.tt, data.a, data.tc, data.b, data.member_id, data.dollar_rate, data.dollar_tendered, data.peso);
            }

            @Override
            public void close(CloseDialog closeDialog) {
                payments = 1;
                closeDialog.ok();
            }

            @Override
            public void save_and_print(CloseDialog closeDialog, Dlg_pay.OutputData data, Dlg_pay.to_print_save prints) {
                closeDialog.ok();
                save_and_print(prints);
                if (prints.prints == 2) {
                    process_pay(closeDialog, data, data.tt, data.a, data.tc, data.b, data.member_id, data.dollar_rate, data.dollar_tendered, data.peso);
                }

            }

            private void save_and_print(to_print_save print) {
                int row = 0;
                row = jg_orders.getSelectedIndex();
                if (row < 0) {
                    return;
                }

                List<Dlg_check_liquid.to_guests> ok = my_guest;
                int yy = 0;
                String guest_ids = "";
                String guest_names = "";
                String room_guest_ids = "";
                for (Dlg_check_liquid.to_guests tt : ok) {
                    if (yy == 0) {
                        guest_ids = guest_ids + tt.id;
                        guest_names = guest_names + tt.name;
                        room_guest_ids = room_guest_ids + tt.room_guest_id;
                    } else {
                        guest_ids = guest_ids + "," + tt.id;
                        guest_names = guest_names + "," + tt.name;
                        room_guest_ids = room_guest_ids + "," + tt.room_guest_id;
                    }
                    yy++;
                }

                Object value = new Object();
                value = orders_model.getElementAt(row);
                final S2_search.to_rooms t = (S2_search.to_rooms) value;
                int id = Integer.parseInt(S1_billing_history.increment_id());
                String room_id = t.id;
                String room_name = t.room;
                String checkin_date = t.date_added;
                String checkout_date = DateType.datetime.format(new Date());
                int status = 0;
                double gross_sales1 = gross_sales;
                double to_pay = print.to_pay;
                double adv_peso = print.adv_peso;
                double adv_usd = print.adv_usd;
                double paid_peso = print.paid_peso;
                double paid_dollar = print.paid_dollar;
                double paid_credit = print.paid_credit;
                double dollar_rate = print.dollar_rate;
                double discount = print.discount;
                double discount_rate = print.discount_rate;
                String discount_name = print.discount_name;
                String user_name = to_users.ret_user(to_users.username1);
                S1_billing_history.to_billing_histories bh = new S1_billing_history.to_billing_histories(
                        id, room_id, room_name, guest_ids, guest_names, checkin_date, checkout_date, status, gross_sales1, to_pay, adv_peso, adv_usd, paid_peso, paid_dollar, paid_credit, dollar_rate, discount, discount_rate, discount_name, room_guest_ids, user_name, bank_php, bank_usd, advance_credit_card);
                if (print.prints == 2) {
                    S1_billing_history.add_billing_histories(bh, print.payable, print.due, advance_credit_card); //uncomment this
                }

                List<S1_billing_history_items.to_billing_history_items> items = new ArrayList();
                List<S2_search.to_items> results = tbl_customer_tables_details_ALM;
                for (S2_search.to_items s : results) {
                    int ids = 0;
                    String room_ids = t.id;
                    String room_names = t.name;
                    String or_no = lbl_or_no.getText();
                    double qty = s.qty;
                    String product_name = s.name;
                    String description = s.desc;
                    double price = s.price;
                    String img_path = s.img_path;
                    int statuss = 0;
                    int guest_id = s.guest_no;
                    String guest_name = "guest_name";
                    String cat_id = s.cat_id;
                    String cat_name = s.category_name;
                    String date_added = s.date_added;
                    int printing_assembly = s.printing_assembly;
                    String disc_name = s.disc_name;
                    double disc_rate = s.disc_rate;
                    String discounts = s.disc_name;
                    String user_names = user_name;
                    int billing_history_id = id;
                    S1_billing_history_items.to_billing_history_items item = new S1_billing_history_items.to_billing_history_items(ids, room_ids, room_names, or_no, qty, product_name, description, price, img_path, statuss, guest_id, guest_name, cat_id, cat_name, date_added, printing_assembly, disc_name, disc_rate, discounts, user_names, billing_history_id, s.discount);
                    items.add(item);

                }

                String busi_name = System.getProperty("business_name", "");
                double room_rate = 100;
                String accomodation = "";
                String img_path = System.getProperty("img_path", "C:\\Users\\Maytopacka\\");
                String SUBREPORT_DIR = System.getProperty("img_path", "C:\\Users\\Maytopacka\\") + "img_templates\\rpt\\";
                List<Srpt_bar_and_resto.field> rpt_bar_and_resto = new ArrayList();
                List<Srpt_bar_and_resto.field> rpt_bar = new ArrayList();
                List<Srpt_bar_and_resto.field> resto_items = new ArrayList();
                List<Srpt_bar_and_resto.field> bar_items = new ArrayList();
                List<Srpt_bar_and_resto.field> regroup = new ArrayList();
                List<Srpt_bar_and_resto.field> regroup3 = new ArrayList();
                List<Srpt_others.field> rpt_others = new ArrayList();
                List<Srpt_accomodation.field> accom = new ArrayList();
                double accom_total = 0;
                double to_pay1 = FitIn.toDouble(lbl_amount.getText());
                double total_charges = 0;
                double ch = 0;
                double bar_resto = 0;

                for (S1_billing_history_items.to_billing_history_items t1 : items) {
                    Date date = new Date();

                    try {
                        date = DateType.datetime.parse(t1.date_added);
                    } catch (ParseException ex) {
                        Logger.getLogger(Dlg_billing_history.class.getName()).
                                log(Level.SEVERE, null, ex);
                    }

                    if (t1.cat_id.equals("10")) {
                        double am1 = t1.price * t1.qty;
                        Srpt_bar_and_resto.field tbar = new Srpt_bar_and_resto.field(t1.cat_name.
                                toUpperCase(), date, am1, t1.qty, t1.discount_amount);
                        regroup.add(tbar);

                        resto_items.add(tbar);

                        ch += t1.price;
                        bar_resto += t1.price;
                    } else if (t1.cat_id.equals("12")) {
                        double am1 = t1.price * t1.qty;
                        Srpt_bar_and_resto.field tbar = new Srpt_bar_and_resto.field("BAR", date, am1, t1.qty, t1.discount_amount);
                        regroup3.add(tbar);

                        bar_items.add(tbar);

                        bar_resto += t1.price;
                    } else if (t1.cat_id.equals("11")) {
                        Date now = new Date();
                        Date date_added = new Date();

                        try {
                            date_added = DateType.datetime.parse(t1.date_added);
                        } catch (ParseException ex) {
                            Logger.getLogger(Dashboard1.class.getName()).
                                    log(Level.SEVERE, null, ex);
                        }

                        double qty = t1.qty;
                        int nights = 1;
                        String description = t1.description;
                        double price = 0;
                        double amount = (t1.price * t1.qty) - t1.discount_amount;
                        nights = 1;
                        nights = FitIn.toInt("" + qty);
//                        System.out.println("am: "+t1.price+ " dis: "+t1.discount_amount);
                        String date_stayed = "( " + DateType.month_date.format(date_added) + " - " + DateType.month_date.
                                format(now) + " )" + "guest_n";
                        Srpt_accomodation.field tt = new Srpt_accomodation.field(qty, nights, description, price, amount, date_stayed, "ACCOMODATION", t1.discount_amount);
                        accom.add(tt);
                        accom_total += amount;
                    } else {
                        double am1 = t1.price * t1.qty;
                        Srpt_others.field tbar = new Srpt_others.field(t1.cat_name.
                                toUpperCase(), t1.description, t1.qty, am1, t1.discount_amount);
                        rpt_others.add(tbar);
                        ch += t1.price;
                    }

                }

                String my_data = "";
                List<Srpt_bar_and_resto.field> regroup2 = new ArrayList();
                for (Srpt_bar_and_resto.field ss : regroup) {
                    if (!DateType.sf.format(ss.getDate_added()).
                            equals(my_data)) {
                        Srpt_bar_and_resto.field tbar = new Srpt_bar_and_resto.field(ss.
                                getDesc(), ss.getDate_added(), ss.getTotal(), ss.
                                getQty(), ss.getDiscount_amount());
                        regroup2.add(tbar);
                    }
                    my_data = DateType.sf.format(ss.getDate_added());
                }

                for (Srpt_bar_and_resto.field ss2 : regroup2) {
                    double am = 0;
                    double qty = 0;
                    double dis = 0;
                    for (Srpt_bar_and_resto.field ss : regroup) {

                        if (DateType.sf.format(ss2.getDate_added()).
                                equals(DateType.sf.format(ss.getDate_added()))) {
                            am += ss.getTotal();
                            dis += ss.getDiscount_amount();
                        }
                    }
                    String s = DateType.sf.format(ss2.getDate_added()) + " 00:00:00";
                    Date d1 = new Date();
                    try {
                        d1 = DateType.datetime.parse(s);
                    } catch (ParseException ex) {
                        Logger.getLogger(Dlg_billing_history.class.getName()).
                                log(Level.SEVERE, null, ex);
                    }
                    am = am - dis;
                    Srpt_bar_and_resto.field tbar = new Srpt_bar_and_resto.field(ss2.
                            getDesc(), d1, am, ss2.getQty(), dis);
                    rpt_bar_and_resto.add(tbar);
                }

                String my_data3 = "";
                List<Srpt_bar_and_resto.field> regroup33 = new ArrayList();
                for (Srpt_bar_and_resto.field ss : regroup3) {
                    if (!DateType.sf.format(ss.getDate_added()).
                            equals(my_data3)) {
                        Srpt_bar_and_resto.field tbar = new Srpt_bar_and_resto.field(ss.
                                getDesc().
                                toUpperCase(), ss.getDate_added(), ss.getTotal(), ss.
                                getQty(), ss.getDiscount_amount());
                        regroup33.add(tbar);

                    }
                    my_data3 = DateType.sf.format(ss.getDate_added());
                }

                for (Srpt_bar_and_resto.field ss2 : regroup33) {

                    double am = 0;
                    double dis = 0;
                    double qty = 0;
                    for (Srpt_bar_and_resto.field ss : regroup3) {
                        if (DateType.sf.format(ss2.getDate_added()).
                                equals(DateType.sf.format(ss.getDate_added()))) {
                            am += ss.getTotal();
                            dis += ss.getDiscount_amount();
                        }
                    }
                    am = am - dis;
                    Srpt_bar_and_resto.field tbar = new Srpt_bar_and_resto.field(ss2.
                            getDesc().
                            toUpperCase(), ss2.getDate_added(), am, ss2.getQty(), dis);

                    rpt_bar.add(tbar);
                }

                List<Srpt_others.field> accom2 = new ArrayList();

                List<String> cats = S1_category.ret_cb_data();
                for (String s : cats) {

                    for (Srpt_others.field a : rpt_others) {

                        if (s.equalsIgnoreCase(a.getCategory())) {
                            accom2.add(a);
                        }
                    }
                }
                List<Srpt_accomodation.field> accom3 = new ArrayList();
                accom3 = accom;
                String my_date = "Billing Statement";
                String day = DateType.d.format(new Date());
                my_date = DateType.day.format(new Date()) + " " + day + " " + DateType.month_year.
                        format(new Date()) + "";
                String accomodation_1 = "";
                double dollar = S1_currency.ret_dollar(DateType.sf.format(new Date()));
                total_charges = ch;
                double advance_payment = FitIn.toDouble(lbl_advance_payment.
                        getText());
                to_pay = (total_charges + accom_total) - (advance_payment + (advance_usd * dollar));
                double discount1 = 0;
                double dollar_rate1 = S1_currency.ret_dollar(DateType.sf.format(new Date()));

                if (print.prints == 2) {
                    to_pay = bar_resto;
                }
                double dollar_to_pay = (to_pay1 - discount) / dollar_rate1;
                String s = df.format(dollar_to_pay);
                dollar_to_pay = FitIn.toDouble(s);

                List<Srpt_bar_and_resto.field> rpt_summary = new ArrayList();
                for (Srpt_accomodation.field r : accom3) {
                    Srpt_bar_and_resto.field f = new Srpt_bar_and_resto.field(r.getAccomodation(), new Date(), r.getAmount(), r.getQty(), 0);
                    rpt_summary.add(f);
                }
                for (Srpt_bar_and_resto.field r : rpt_bar_and_resto) {
                    Srpt_bar_and_resto.field f = new Srpt_bar_and_resto.field(r.getDesc(), new Date(), r.getTotal(), r.getQty(), 0);
                    rpt_summary.add(f);
                }
                for (Srpt_bar_and_resto.field r : rpt_bar) {
                    Srpt_bar_and_resto.field f = new Srpt_bar_and_resto.field(r.getDesc(), new Date(), r.getTotal(), r.getQty(), 0);
                    rpt_summary.add(f);
                }
                for (Srpt_others.field r : accom2) {
                    Srpt_bar_and_resto.field f = new Srpt_bar_and_resto.field(r.getCategory(), new Date(), r.getPrice(), r.getQty(), 0);
                    rpt_summary.add(f);
                }

                List<Srpt_history_advance_payments.field> advances = new ArrayList();
                List<Dlg_check_liquid.to_guests> guest_selected = my_guest;

                int sel = 0;
                for (Dlg_check_liquid.to_guests g : guest_selected) {
                    if (g.status == true) {
                        sel++;
                    }
                }
                if (sel == 0) {
                    for (Dlg_check_liquid.to_guests g : guest_selected) {
                        advances.addAll(Srpt_history_advance_payments.ret_data("" + g.room_guest_id));
                    }
                } else {
                    for (Dlg_check_liquid.to_guests g : guest_selected) {
                        if (g.status == true) {
                            advances.addAll(Srpt_history_advance_payments.
                                    ret_data("" + g.room_guest_id));
                        }
                    }
                }

                String ss = df.format((to_pay1 - discount));
                List<S1_category_discounts.to_category_discounts> category_discounts = S1_category_discounts.
                        ret_data(room_guest_ids);
//                System.out.println("category_discounts: "+category_discounts+ " ,room_guest_ids: "+room_guest_ids);

                // Add Category Discounts
                List<Srpt_category_discounts.field> cdd_list = new ArrayList();

                String a_category = "Accommodation";
                double a_due = 0;
                double a_disc_percent = 0;
                double a_disc_amount = 0;
                double a_sua_total = 0;
                DecimalFormat df = new DecimalFormat("#,###");
                for (Srpt_accomodation.field f : accom3) {

                    double am = FitIn.toDouble(df.format(f.getAmount()));
                    a_due += am;
                    a_disc_amount += f.getDiscount();
                    a_sua_total += f.getAmount();
                }
                Srpt_category_discounts.field ares = new Srpt_category_discounts.field(a_category, a_due, a_disc_percent, a_disc_amount, a_sua_total);
                cdd_list.add(ares);

                String b_category = "Bar";
                double b_due = 0;
                double b_disc_percent = 0;
                double b_disc_amount = 0;
                double b_sub_total = 0;
                for (Srpt_bar_and_resto.field f : rpt_bar) {

                    double am = FitIn.toDouble(df.format(f.getTotal()));
                    b_due += am;
                    b_disc_amount += f.getDiscount_amount();
                    b_sub_total += am;
                }
                Srpt_category_discounts.field tbar = new Srpt_category_discounts.field(b_category, b_due, b_disc_percent, b_disc_amount, b_sub_total);
                cdd_list.add(tbar);

                String r_category = "Restaurant";
                double r_due = 0;
                double r_disc_percent = 0;
                double r_disc_amount = 0;
                double r_sur_total = 0;
                for (Srpt_bar_and_resto.field f : rpt_bar_and_resto) {
                    double am = FitIn.toDouble(df.format(f.getTotal()));
//                    System.out.println("total: "+f.getTotal()+ " disc: "+f.getDiscount_amount() );
                    r_due += am;
                    r_disc_amount += f.getDiscount_amount();
                    r_sur_total += f.getTotal();
                }
                Srpt_category_discounts.field tres = new Srpt_category_discounts.field(r_category, r_due, r_disc_percent, r_disc_amount, r_sur_total);
                cdd_list.add(tres);

                String o_category = "Others";
                double o_due = 0;
                double o_disc_percent = 0;
                double o_disc_amount = 0;
                double o_suo_total = 0;
                for (Srpt_others.field f : accom2) {
                    double am = FitIn.toDouble(df.format(f.getPrice()));
                    o_due += am;
                    o_disc_amount += 0;
                    o_suo_total += f.getPrice() * f.getQty();
                }
                Srpt_category_discounts.field ores = new Srpt_category_discounts.field(o_category, o_due, o_disc_percent, o_disc_amount, o_suo_total);
                cdd_list.add(ores);

                List<Srpt_category_discounts.field> cdd = new ArrayList();
                double dis_accom = 0;
                double dis_bar = 0;
                double dis_resto = 0;
                double dis_others = 0;
                for (S1_category_discounts.to_category_discounts cd : category_discounts) {
                    if (cd.category_id.equals("11")) {
                        dis_accom += cd.discount_amount;
                    } else if (cd.category_id.equals("12")) {
                        dis_bar += cd.discount_amount;
                    } else if (cd.category_id.equals("10")) {
                        dis_resto += cd.discount_amount;
                    } else {
                        dis_others += cd.discount_amount;
                    }

                }
                Srpt_category_discounts.field cd1 = (Srpt_category_discounts.field) cdd_list.get(0);
                cd1.setDisc_amount(dis_accom);
                cd1.setSub_total(cd1.getDue() - dis_accom);

                Srpt_category_discounts.field cd2 = (Srpt_category_discounts.field) cdd_list.get(1);
                cd2.setDisc_amount(dis_bar);
                cd2.setSub_total(cd2.getDue() - dis_bar);

                Srpt_category_discounts.field cd3 = (Srpt_category_discounts.field) cdd_list.get(2);
                cd3.setDisc_amount(dis_resto);
                cd3.setSub_total(cd3.getDue() - dis_resto);

                Srpt_category_discounts.field cd4 = (Srpt_category_discounts.field) cdd_list.get(3);
                cd4.setDisc_amount(dis_others);
                cd4.setSub_total(cd4.getDue() - dis_others);
                
//                List<Srpt_category_discounts.field> cdd_list2=new ArrayList();
//                for(Srpt_category_discounts.field sss:cdd_list){
//                    if(sss.getDisc_amount()!=0){
//                        cdd_list2.add(sss);
//                    }
//                }
                
                Srpt_liquid_billing rpt = new Srpt_liquid_billing(busi_name, room_rate, accomodation, SUBREPORT_DIR, rpt_bar_and_resto, rpt_bar, accom2,
                        accom3, advances, cdd_list, my_date, guest_ids, t.id, t.date_added, "", accomodation_1, accom_total, img_path,
                        FitIn.toDouble(ss), guest_names, dollar, total_charges, discount, dollar_rate1, advance_payment, advance_usd, print.paid_peso, print.paid_dollar,
                        print.paid_credit, bank_php, bank_usd, advance_credit_card, dollar_to_pay, rpt_summary);

//                test_print(rpt,table_id, resto_items, bar_items, guest_names, guest_ids, advances, accom, rpt_others); 
                try {
                    JasperReport jasperReport;
                    JasperPrint jasperPrint;
                    JasperReport jasperReport2;
                    JasperPrint jasperPrint2;
                    String l = "";
                    String l2 = "";
                    if (print.prints == 1) {
                        l = "/rpt_liquid/rpt_billing_liquid_paid_summary.jrxml";
                        l2 = "/rpt_liquid/rpt_billing_liquid_paid.jrxml";

                    }
                    if (print.prints == 2) {
                        l = "/rpt_liquid/rpt_billing_liquid_paid_summary.jrxml";
                        l2 = "/rpt_liquid/rpt_billing_liquid_paid.jrxml";
                    }

                    InputStream is = Srpt_liquid_billing.class.
                            getResourceAsStream(l);
                    jasperReport = JasperCompileManager.compileReport(is);
                    jasperPrint = JasperFillManager.fillReport(jasperReport, JasperUtil.setParameter(rpt), JasperUtil.emptyDatasource());
                    int last_page = 0;

                    InputStream is2 = Srpt_liquid_billing.class.
                            getResourceAsStream(l2);
                    jasperReport2 = JasperCompileManager.compileReport(is2);
                    jasperPrint2 = JasperFillManager.fillReport(jasperReport2, JasperUtil.
                            setParameter(rpt), JasperUtil.emptyDatasource());

                    //Test print
//                    JRViewer viewer = new JRViewer(jasperPrint);
//                    JFrame f = Application.launchMainFrame3(viewer, "Sample", true);
//                    f.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
//
//                    JRViewer viewer2 = new JRViewer(jasperPrint2);
//                    JFrame f2 = Application.launchMainFrame3(viewer2, "Sample", true);
//                    f2.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
                    JasperPrintManager.printReport(jasperPrint, false);
                    JasperPrintManager.printReport(jasperPrint2, true);
                } catch (JRException e) {
                    JOptionPane.showMessageDialog(null, "Failed To Print, Please Check the Printer");
                    throw new RuntimeException(e);
                }
                if (print.prints == 2) {
                    S1_billing_history_items.add_billing_history_items(items); //uncomment this
                }

            }
        });

        Center.setCenter(d);
        d.setVisible(true);
    }
    int payments = 1;

    private void test_print(Srpt_liquid_billing rpt, String table_id, List<Srpt_bar_and_resto.field> resto_items, List<Srpt_bar_and_resto.field> bar_items, String guest_name, String guest_id, List<Srpt_history_advance_payments.field> advances, List<Srpt_accomodation.field> accom, List<Srpt_others.field> rpt_others) {

        Window p = (Window) this;
        Dlg_billing_report nd = Dlg_billing_report.create(p, true);
        nd.setTitle("");

        nd.do_pass(rpt, "rpt_billing_liquid.jrxml", table_id, resto_items, bar_items, guest_name, guest_id, advances, accom, rpt_others, tbl_category_ALM, my_guest);
        nd.setCallback(new Dlg_billing_report.Callback() {

            @Override
            public void ok(CloseDialog closeDialog, Dlg_billing_report.OutputData data) {
                closeDialog.ok();
                set_bill_discount(data.discount, data.rate, data.guest_id, data.guest_name);
            }
        });
        Toolkit tk = Toolkit.getDefaultToolkit();
        int xSize = ((int) tk.getScreenSize().
                getWidth());
        int ySize = ((int) tk.getScreenSize().
                getHeight());
        nd.setSize(xSize, ySize);
        nd.setVisible(true);

    }

    private void save_and_print(Dlg_pay.to_print_save prints) {
        //        
    }

    private void process_pay(CloseDialog cd, Dlg_pay.OutputData data, final to_disc to1, final int a, final to_credit to2, final int b, final String member_id, double dollar_rate, double dollar_tendered, double peso) {

        setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        String tbl_no = S1_cash_advance.get_room_id(lbl_table_no.getText());
//        JOptionPane.showMessageDialog(null, tbl_no);
        final to_pay tp = new to_pay(
                data.tendered, new Date(), lbl_cashier_name.getText(), data.orders, lbl_or_no.
                getText(), dollar_rate, dollar_tendered);
        if (a == 0) {
//
            Svc_1.pay2(tp, lbl_cashier_name.getText(), to1, to2, b, member_id, my_guest, tbl_no, user_id, lbl_or_no.
                    getText(), tbl_location_id, peso, my_guest_size, table_id, table_name, gross_sales, bank_php, bank_usd, advance_credit_card, guest_ids);
        } else {
            Svc_1.pay(tp, lbl_cashier_name.getText(), to1, to2, b, member_id, my_guest, tbl_no, user_id, lbl_or_no.
                    getText(), tbl_location_id, peso, my_guest_size, table_id, table_name, gross_sales, bank_php, bank_usd, advance_credit_card, guest_ids);
        }
        String do_print = System.getProperty("do_print", "false");
//        System.out.println("do_print: " + do_print);
        if (do_print.equals("true")) {
            printing();
        }
//      
        if (b == 2) {
            Prompt.call("Credit Transaction Posted to Ledger");
        }
        if (b == 3) {
            Prompt.call("Balance Updated");
        }
        String open_drawer = System.getProperty("open_drawer", "false");
        if (open_drawer.equals("true")) {
            CashDrawer.open();
        }
//        S1_check_in.update_room_order(lbl_table_no.getText());
        lbl_table_no.setText("0");
        lbl_amount.setText("0.00");
        lbl_rate.setText("0");
        lbl_advance_payment.setText("0");
        lbl_guest_total.setText("0");
        lbl_oders_payment.setText("0");
        lbl_guest_no.setText("");

        Prompt.call("Payment Successful");
        updateReceipt();
        if ((user_id.equals("5")) || (user_id.equals("0")) || (user_id.equals("6"))) {
            orders_model.clear();
            jg_orders.setModel(orders_model);
            my_order = 0;
            clear_room();
            clear_items();
            init_cashier();
            init_items();
            if (user_id.equals("0")) {
//                JOptionPane.showMessageDialog(null, "adadad");
                init_rooms();
            } else {
//                table_location_id = "";
                init_rooms();
            }
//            init_rooms();
        } else {
            clear_orders();
        }
        tbl_customer_tables_details_ALM.clear();
        tbl_customer_tables_details_M.fireTableDataChanged();
        my_guest.clear();
        set_or();
        lbl_next_customer.setText("NEXT CUSTOMER PLEASE");
        lbl_prepare.setText("PREPARE (0)");
        setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        payments = 0;
        sp_orders.updateUI();
    }

    private void clear_orders() {
        orders_model.clear();
        jg_orders.setModel(orders_model);
    }

    private void printing() {

        Svc_1.print_receipt(this, lbl_or_no.getText());
    }

    private void updateReceipt() {
        String or = "" + Svc_1.get_latest_or();
        lbl_or_no.setText(or);
    }

    private void back() {
        if (System.getProperty("version", "ordering").
                equals("ordering")) {
            tf_search.setVisible(false);
            jLabel6.setVisible(false);
            cb_table_location.setVisible(true);

        }
//        user_id = "5";
//        lbl_table_no.setText("0");
//        btn_add_order.setVisible(false);
//        btn_back.setVisible(false);
//        clear_categories();
//        clear_room();
//        item_model.clear();
//        jg_items.setModel(item_model);
//        init_cashier();
//        init_items();
//        init_catogories();
//        init_rooms();
//        pnl_category.setVisible(false);
//        pnl_holder_guest_details.setVisible(true);
        my_order = 0;
        lbl_table_no.setText("0");
        btn_add_order.setVisible(false);
        btn_back.setVisible(false);
        pnl_category.setVisible(false);
        clear_room();
        init_cashier();
        ord = 0;
        init_tbl_customer_tables_details();
        init_items();
        init_catogories();
        init_rooms();
//        pnl_holder_guest_details.setVisible(true);
        my_guest.clear();
        final String ui_items = System.getProperty("ui_items", "list");
        if (ui_items.equals("list")) {
            tbl_table_orders_ALM.clear();
            tbl_orders_M.fireTableDataChanged();
            tbl_customer_tables_details_ALM.clear();
            tbl_customer_tables_details_M.fireTableDataChanged();
            js_items.setVisible(false);
            sp_orders.setVisible(true);
        } else {
            item_model.clear();
            jg_items.setModel(item_model);
            js_items.setVisible(false);
            sp_orders.setVisible(true);
        }
        tf_search.setVisible(false);
        jPanel8.setVisible(true);
        jLabel6.setVisible(false);
        jButton10.setVisible(true);
        btn_voider.setVisible(true);
        btn_clear_all.setVisible(false);
        cb_table_location.setVisible(true);
        jButton11.setVisible(true);
        btn_standby.setVisible(true);
        btn_logout.setVisible(true);
//        btn_remit.setVisible(true);
        btn_expenses.setVisible(true);
        btn_charge_to_room.setVisible(true);
        jLabel15.setVisible(true);
    }
    List<Dlg_check_liquid.to_guests> my_guest = new ArrayList();

    private void add_room_order() {
        final String ui_items = System.getProperty("ui_items", "list");
        int row = 0;
        if (ui_items.equals("list")) {
            row = tbl_table_orders_ALM.size();
            if (row <= 0) {
                return;
            }
        } else {
            row = orders_model.size();
            if (row <= 0) {
                return;
            }
        }

        List<S2_search.to_orders> datas = new ArrayList();
        List<S2_search.to_items_status> to_sub = new ArrayList();
        if (ui_items.equals("list")) {
            for (int i = 0; i < row; i++) {
                Object value = tbl_table_orders_ALM.getElementAt(i);
                S2_search.to_orders t = (S2_search.to_orders) value;
                datas.add(t);
            }
        } else {
            for (int i = 0; i < row; i++) {
                Object value = orders_model.getElementAt(i);
                S2_search.to_orders t = (S2_search.to_orders) value;
                datas.add(t);
            }
        }

        if (System.getProperty("version", "ordering").
                equals("ordering")) {
            tf_search.setVisible(false);
            jLabel6.setVisible(false);
        }
        boolean check = false;
        check = S2_guest_charges.select_guests(lbl_table_no.getText());

        if ((my_guest.size() == 1 && check == false && !datas.isEmpty())) {
            check_ins_ordering();
        }
//        if (user_id.equals("6")) {
//            S1_check_in.add_order_rooms3(datas, lbl_table_no.getText(), my_guest, to_sub);
//        } else {
//            JOptionPane.showMessageDialog(null, my_guest.size());
        String order_no = S1_check_in.add_order_rooms(datas, lbl_table_no.getText(), split_guest, to_sub, user_id);

        String print = System.getProperty("print_orders", "false");
        if (print.equals("true")) {
            prepare_order2(order_no);
        }
//        }

//        user_id = "5";
        my_order = 0;
        lbl_table_no.setText("0");
        btn_add_order.setVisible(false);
        btn_back.setVisible(false);
        clear_room();
        init_cashier();
        ord = 0;
        init_tbl_customer_tables_details();

        init_items();
        init_catogories();
        init_rooms();
//        pnl_holder_guest_details.setVisible(true);
        my_guest.clear();
        if (ui_items.equals("list")) {
            tbl_table_orders_ALM.clear();
            tbl_orders_M.fireTableDataChanged();
            tbl_customer_tables_details_ALM.clear();
            tbl_customer_tables_details_M.fireTableDataChanged();

            js_items.setVisible(false);
            sp_orders.setVisible(true);

        } else {
            item_model.clear();
            jg_items.setModel(item_model);
            js_items.setVisible(false);
            sp_orders.setVisible(true);
        }

        pnl_category.setVisible(false);
        tf_search.setVisible(false);
        jLabel6.setVisible(false);
//        cb_table_location.setVisible(true);]
        jPanel8.setVisible(true);
        jButton10.setVisible(true);
        btn_voider.setVisible(true);
        btn_clear_all.setVisible(false);
//        JOptionPane.showMessageDialog(null, "Order Added");

        cb_table_location.setVisible(true);
        jButton11.setVisible(true);
        btn_standby.setVisible(true);
        btn_logout.setVisible(true);
//        btn_remit.setVisible(true);
        btn_expenses.setVisible(true);
        btn_charge_to_room.setVisible(true);
        jLabel15.setVisible(true);
        Prompt.call("Order Added");

    }

    private void bill_casa() {

        int row = 0;
        row = jg_orders.getSelectedIndex();
        if (row < 0) {
            return;
        }
//        init_items();
        Object value1 = new Object();
        value1 = orders_model.getElementAt(row);
        final S2_search.to_rooms table = (S2_search.to_rooms) value1;

        final String ui_items = System.getProperty("ui_items", "list");
        String table_name = S1_prepare_order1.get_table_id(lbl_table_no.getText());
//            JOptionPane.showMessageDialog(null, table_name);
        String business_name = System.getProperty("business_name", "");
        String operated_by = System.getProperty("operated_by", "");
        String address = System.getProperty("address", "");
        String telephone_number = System.getProperty("telephone_number", "");
        String transaction_no = "";
        String cashier_name = to_users.get_user();
//        JOptionPane.showMessageDialog(null, to_users.get_user() + " = " + cashier_name);
        List<Dlg_check_liquid.to_guests> datas2 = my_guest;
        String guest = "";
//         JOptionPane.showMessageDialog(null, my_guest.size());
        if (my_guest.size() == 1) {
            for (Dlg_check_liquid.to_guests to : datas2) {
                guest = to.name;

            }
        }

//      
        String waiter_name = guest.toUpperCase();
        String tin_no = System.getProperty("tin_no", "");
        String min_no = System.getProperty("min_no", "");
        String serial_no = System.getProperty("serial_no", "");
        String permit_no = System.getProperty("permit_no", "");
        String or_no = lbl_table_no.getText();
        String trans_no = System.getProperty("trans_no", "");
        String pos_no = System.getProperty("pos_no", "");
//            S1_prepare_order1.to_print_order to1 = new S1_prepare_order1.to_print_order(table_name, business_name, operated_by, address, telephone_number, transaction_no, cashier_name, waiter_name, tin_no, min_no, serial_no, permit_no, or_no, trans_no, pos_no);
//            S1_prepare_order1.bill_table(to1);
        List<rpt_orders1.field> datas = new ArrayList();
        if (ui_items.equals("list")) {
            rpt_orders1 rpt = new rpt_orders1(table_name, business_name, operated_by, address, telephone_number, transaction_no, cashier_name, waiter_name, tin_no, min_no, serial_no, permit_no, or_no, trans_no, pos_no, 0, 0);
            for (int i = 0; i < tbl_customer_tables_details_ALM.size(); i++) {
                Object value = tbl_customer_tables_details_ALM.getElementAt(i);
                S2_search.to_items s = (S2_search.to_items) value;
                rpt_orders1.field f = new rpt_orders1.field(
                        i,
                        s.qty,
                        s.desc.toUpperCase(),
                        s.price,
                        s.discount);
                if (s.qty * s.price != 0) {
                    datas.add(f);
                    rpt.fields.add(f);

                }

            }
            if (rpt.fields.isEmpty()) {
                Prompt.call("NOTHING TO PRINT");
            } else {
                Window p = (Window) this;
                Dlg_billing_report2 nd = Dlg_billing_report2.create(p, true);
                nd.setTitle("");
                nd.do_pass(rpt, "rpt_my_orders_2_1.jrxml", datas, tbl_customer_tables_details_ALM, table.id);
                nd.setCallback(new Dlg_billing_report2.Callback() {

                    @Override
                    public void ok(CloseDialog closeDialog, Dlg_billing_report2.OutputData data) {
                        closeDialog.ok();
                        set_bill_discount(data.discount, data.rate, "", "");
                    }
                });
                nd.setLocationRelativeTo(this);

                nd.setVisible(true);
            }

//            setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
//            rpt_orders1.print_to_place(rpt);
//            setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        } else {
            rpt_orders1 rpt = new rpt_orders1(table_name, business_name, operated_by, address, telephone_number, transaction_no, cashier_name, waiter_name, tin_no, min_no, serial_no, permit_no, or_no, trans_no, pos_no, 0, 0);
            for (int i = 0; i < item_model.size(); i++) {
                Object value = item_model.getElementAt(i);
                S2_search.to_items s = (S2_search.to_items) value;
                rpt_orders1.field f = new rpt_orders1.field(
                        i,
                        s.qty,
                        s.desc,
                        s.price,
                        s.discount);
                rpt.fields.add(f);
            }

        }

    }

    private void set_bill_discount(String discount, double rate, String guest_id, String guest_name) {

        int row = 0;
        row = jg_orders.getSelectedIndex();
        if (row < 0) {
            return;
        }
        Object value1 = new Object();
        value1 = orders_model.getElementAt(row);
        final S2_search.to_rooms table = (S2_search.to_rooms) value1;

        S1_bill_discounts.to_bill_discounts to1 = new S1_bill_discounts.to_bill_discounts(-1, discount, rate, FitIn.
                toInt(table.id), guest_id, 0, guest_name);
        S1_bill_discounts.add_data(to1); //
    }

    private void billing() {

        int row = 0;
        row = jg_orders.getSelectedIndex();
        if (row < 0) {
            return;
        }
//        init_items();
        Object value1 = new Object();
        value1 = orders_model.getElementAt(row);
        final S2_search.to_rooms table = (S2_search.to_rooms) value1;

        final String ui_items = System.getProperty("ui_items", "list");
        if (System.getProperty("version", "ordering").
                equals("ordering")) {
            bill_casa();
        } else {

            String busi_name = System.getProperty("business_name", "");
            double room_rate = 100;
            String guest_name = "";
            String where_bill = "";
            List<Dlg_check_liquid.to_guests> guest = my_guest;
            int u = 0;
            int guest_no = 0;
            String guest_id = "";
            if (my_guest.isEmpty()) {
                int h = 0;
                for (Dlg_check_liquid.to_guests g : guest) {
                    if (h == 0) {
                        guest_name = guest_name + g.name + "";
                    } else {
                        guest_name = guest_name + ", " + g.name + "";
                    }
                    guest_no++;
                    h++;
                }

            } else {
                for (Dlg_check_liquid.to_guests t : guest) {
                    if (u == 0) {
                        guest_name = guest_name + t.name + "";
                        guest_id = t.id;
                    } else {
                        guest_name = guest_name + ", " + t.name + "";
                    }
                    guest_no++;
                    u++;
                }
            }
            if (guest_no > 1) {
                guest_id = "zzz";
            }
            guest_name = guest_name.toUpperCase();
            Date d = new Date();
            try {
                d = DateType.datetime.parse(lbl_check_date.getText());
            } catch (ParseException ex) {
                Logger.getLogger(Dashboard1.class.getName()).
                        log(Level.SEVERE, null, ex);
            }

            String SUBREPORT_DIR = System.getProperty("img_path", "C:\\Users\\i1\\") + "img_templates\\rpt\\";
            String aw = DateType.liquid.format(new Date());
            String my_date = "Billing Statement";
            String day = DateType.d.format(new Date());
            my_date = DateType.day.format(new Date()) + " " + day + " " + DateType.month_year.
                    format(new Date()) + ": Billing";

            String table_no = "1";
            String check_in = DateType.liquid.format(d) + " - " + aw;
            String transfers = "none";
            String accomodation = "";// + (count) + " x nights @ " + FitIn.fmt_wc_0(table_rate);
            String accomodation_1 = "";// + (count) + " x nights @ " + lbl_rate.getText();
            double accom_total = 0;//((count) * table_rate) * guest_no;
            String img_path = System.getProperty("img_path", "C:\\Users\\i1\\");
            double to_pay = 0;

            double dollar_rate = S1_currency.ret_dollar(DateType.sf.format(new Date()));
            double total_charges = FitIn.toDouble(lbl_oders_payment.getText());
            double discount = 0;
            List<Srpt_bar_and_resto.field> rpt_bar_and_resto = new ArrayList();
            List<Srpt_bar_and_resto.field> rpt_bar = new ArrayList();
//            List<Srpt_bar_and_resto.field> rpt_bar_and_resto_group = new ArrayList();
            List<Srpt_others.field> rpt_others = new ArrayList();
            List<S2_search.to_items> datas = new ArrayList();
            List<S2_search.to_items> sames = new ArrayList();
            List<Srpt_bar_and_resto.field> resto_items = new ArrayList();
            List<Srpt_bar_and_resto.field> bar_items = new ArrayList();
            List<Srpt_bar_and_resto.field> regroup3 = new ArrayList();
            String accomodation_id = System.getProperty("accomodation", "11");
            List<S1_room_accomodation.to_room_accomodations> data_accom = new ArrayList();//S1_room_accomodation.ret_data_billing(table.id);
            Date dates = new Date();
            int i_date = 0;
            accom_total = 0;
            int days = 0;
            for (S1_room_accomodation.to_room_accomodations cd : data_accom) {
                where_bill = "";
                double qty = 1;
                String check_ins = "";
                String check_outs = "";
                Date md = new Date();
                try {
                    if (cd.check_out == null) {
                        md = new Date();
                    } else {
                        md = DateType.datetime.parse(cd.check_out);
                    }

                } catch (ParseException ex) {
                    Logger.getLogger(Dashboard1.class.getName()).
                            log(Level.SEVERE, null, ex);
                }
                i_date++;
                Date nd = new Date();
                check_ins = DateType.sf.format(nd);
                try {
                    nd = DateType.datetime.parse(cd.check_in);
                } catch (ParseException ex) {
                    Logger.getLogger(Dashboard1.class.getName()).
                            log(Level.SEVERE, null, ex);
                }
                int nights = DateUtils.count_days(nd, md) + 1;
//                        my_guest_size
                String description = cd.description;
                double price = cd.price / my_guest_size;
                price = (my_guest.size() * price);
                Date da = new Date();
//                int count_days = DateUtils.count_days(nd, md);
//                count_days += 1;
                Date a = new Date();
                a = nd;

                double rate = 0;

                Date start = new Date();
                Date end = new Date();
                try {
                    if (cd.check_out == null) {
                        end = new Date();
                    } else {
                        end = DateType.datetime.parse(cd.check_out);
                    }
                    start = DateType.datetime.parse(cd.check_in);
                } catch (ParseException ex) {
                    Logger.getLogger(Dashboard1.class.getName()).
                            log(Level.SEVERE, null, ex);
                }
                String date_stayed = "( " + DateType.month_date.format(start) + " - " + DateType.month_date.
                        format(end) + " ) - ";
//                accom_total += rate;
                if (days != 0) {
                    if (data_accom.size() > 1) {
                        if (nights != 1) {
                            nights = nights - 1;
                        }
                    }
                }
                Srpt_accomodation.field tbar = new Srpt_accomodation.field(qty, nights, description, rate, rate, date_stayed, "ACCOMODATION", 0);
                days = 1;
                days++;
            }
            List<Srpt_accomodation.field> accom = new ArrayList();
            accom.clear();
            String saved_prod = "";
            if (ui_items.equals("list")) {
                datas = tbl_customer_tables_details_ALM;
                double ch = 0;
                List<Srpt_bar_and_resto.field> regroup = new ArrayList();

                for (S2_search.to_items t1 : datas) {

                    Date date = new Date();
                    try {
                        date = DateType.datetime.parse(t1.date_added);
                    } catch (ParseException ex) {
                        Logger.getLogger(Dashboard1.class.getName()).
                                log(Level.SEVERE, null, ex);
                    }

                    if (t1.cat_id.equals("10")) {
//                        System.out.println("RESTAURANT: "+t1.desc+ " qty: "+t1.qty+ " price: "+t1.price+ " date: "+t1.date_added);
                        double amount = (t1.price * t1.qty) - t1.discount;
                        Srpt_bar_and_resto.field tbar = new Srpt_bar_and_resto.field("RESTAURANT", date, amount, t1.qty, t1.discount);
                        regroup.add(tbar);

                        String s = DateType.sf.format(date) + " 00:00:00";
                        Date d1 = new Date();
                        try {
                            d1 = DateType.datetime.parse(s);
                        } catch (ParseException ex) {
                            Logger.getLogger(Dlg_billing_history.class.getName()).
                                    log(Level.SEVERE, null, ex);
                        }

                        Srpt_bar_and_resto.field tbar2 = new Srpt_bar_and_resto.field(t1.desc, d1, amount, t1.qty, t1.discount);

                        resto_items.add(tbar2);
                        ch += t1.price;
                    } else if (t1.cat_id.equals("12")) {
                        double amount = (t1.price * t1.qty) - t1.discount;
                        Srpt_bar_and_resto.field tbar = new Srpt_bar_and_resto.field("BAR", date, amount, t1.qty, t1.discount);
                        regroup3.add(tbar);

                        String s = DateType.sf.format(date) + " 00:00:00";
                        Date d1 = new Date();
                        try {
                            d1 = DateType.datetime.parse(s);
                        } catch (ParseException ex) {
                            Logger.getLogger(Dlg_billing_history.class.getName()).
                                    log(Level.SEVERE, null, ex);
                        }
                        double amount2 = (t1.price * t1.qty) - t1.discount;
                        Srpt_bar_and_resto.field tbar2 = new Srpt_bar_and_resto.field(t1.desc, d1, amount2, t1.qty, t1.discount);
                        bar_items.add(tbar2);

                        ch += t1.price;
                    } else if (t1.cat_id.equals(accomodation_id)) {

                        Date now = new Date();
                        Date date_added = new Date();

                        try {
                            date_added = DateType.datetime.parse(t1.date_added);
                        } catch (ParseException ex) {
                            Logger.getLogger(Dashboard1.class.getName()).
                                    log(Level.SEVERE, null, ex);
                        }
//                        z
                        double qty = t1.qty;
                        int nights = t1.nights;
                        String description = t1.desc;
                        double price = 0;
                        double amount = (t1.price * t1.qty) - t1.discount;

                        String guest_name1 = "";
                        if (my_guest.size() > 1) {
                            for (Dlg_check_liquid.to_guests t : guest) {
                                if (t.id.equals(t1.guest_id)) {
                                    guest_name1 = " - " + t.name.toUpperCase();
                                }
                            }
                        }

                        nights = 1;
                        nights = FitIn.toInt("" + qty);

                        String date_stayed = "( " + DateType.month_date.format(date_added) + " - " + DateType.month_date.
                                format(now) + " )" + guest_name1;
                        Srpt_accomodation.field t = new Srpt_accomodation.field(qty, nights, description, price, amount, date_stayed, "ACCOMODATION", 0);
                        accom.add(t);
                        accom_total += amount;
                    } else {
                        double amount = (t1.price * t1.qty) - t1.discount;

                        Srpt_others.field tbar = new Srpt_others.field(t1.category_name.
                                toUpperCase(), t1.desc, t1.qty, amount, t1.discount);
                        rpt_others.add(tbar);
                        ch += t1.price;
                    }

                }

                String my_data = "";
                List<Srpt_bar_and_resto.field> regroup2 = new ArrayList();
                for (Srpt_bar_and_resto.field ss : regroup) {
                    if (!DateType.sf.format(ss.getDate_added()).
                            equals(my_data)) {
                        double amount = ss.getTotal() - ss.getDiscount_amount();
                        Srpt_bar_and_resto.field tbar = new Srpt_bar_and_resto.field(ss.
                                getDesc(), ss.getDate_added(), ss.getTotal(), ss.
                                getQty(), ss.getDiscount_amount());
                        regroup2.add(tbar);
                    }
                    my_data = DateType.sf.format(ss.getDate_added());
                }
                System.out.println("WAWWE");
                for (Srpt_bar_and_resto.field ss2 : regroup2) {
                    double am = 0;
                    double qty = 0;
                    double dis = 0;
                    for (Srpt_bar_and_resto.field ss : regroup) {
                        if (DateType.sf.format(ss2.getDate_added()).
                                equals(DateType.sf.format(ss.getDate_added()))) {
                            am += ss.getTotal();
                            dis += ss.getDiscount_amount();
                        }
                    }

                    Srpt_bar_and_resto.field tbar = new Srpt_bar_and_resto.field(ss2.
                            getDesc(), ss2.getDate_added(), am, ss2.getQty(), dis);
                    rpt_bar_and_resto.add(tbar);
                }

                String my_data3 = "";
                List<Srpt_bar_and_resto.field> regroup33 = new ArrayList();
                for (Srpt_bar_and_resto.field ss : regroup3) {
                    if (!DateType.sf.format(ss.getDate_added()).
                            equals(my_data3)) {
                        double amount = ss.getTotal() - ss.getDiscount_amount();
                        Srpt_bar_and_resto.field tbar = new Srpt_bar_and_resto.field(ss.
                                getDesc().
                                toUpperCase(), ss.getDate_added(), ss.getTotal(), ss.
                                getQty(), ss.getDiscount_amount());
                        regroup33.add(tbar);

                    }
                    my_data3 = DateType.sf.format(ss.getDate_added());
                }

                for (Srpt_bar_and_resto.field ss2 : regroup33) {

                    double am = 0;
                    double qty = 0;
                    for (Srpt_bar_and_resto.field ss : regroup3) {
                        if (DateType.sf.format(ss2.getDate_added()).
                                equals(DateType.sf.format(ss.getDate_added()))) {
                            am += ss.getTotal();
                        }
                    }
                    Srpt_bar_and_resto.field tbar = new Srpt_bar_and_resto.field(ss2.
                            getDesc().
                            toUpperCase(), ss2.getDate_added(), am, ss2.getQty(), ss2.getDiscount_amount());
//                    System.out.println(am + " 33");
                    rpt_bar.add(tbar);
                }
                List<Srpt_others.field> accom2 = new ArrayList();
                List<String> cats = S1_category.ret_cb_data();
                for (String s : cats) {

                    for (Srpt_others.field a : rpt_others) {

                        if (s.equalsIgnoreCase(a.getCategory())) {
                            accom2.add(a);
                        }
                    }
                }
                total_charges = ch;
                to_pay = total_charges + accom_total;
                List<Srpt_accomodation.field> accom3 = new ArrayList();
                accom3 = accom;
                double dollars = S1_currency.ret_dollar(DateType.sf.format(new Date()));
                double dollar_rate1 = advance_usd * dollars;
                double dollar_rate2 = bank_usd * dollars;
                dollar_rate1 += dollar_rate2;
                double advance_payment = FitIn.toDouble(lbl_advance_payment.
                        getText());
                advance_payment += bank_php;
                to_pay = to_pay - (advance_payment + dollar_rate1 + advance_credit_card);
                double dollar = S1_currency.ret_dollar(DateType.sf.format(new Date()));

                List<Srpt_history_advance_payments.field> advances = new ArrayList();
                List<Dlg_check_liquid.to_guests> guest_selected = my_guest;

                int sel = 0;
                for (Dlg_check_liquid.to_guests g : guest_selected) {
                    if (g.status == true) {
                        sel++;
                    }
                }
                if (sel == 0) {
                    for (Dlg_check_liquid.to_guests g : guest_selected) {
                        advances.addAll(Srpt_history_advance_payments.ret_data("" + g.room_guest_id));
                    }
                } else {
                    for (Dlg_check_liquid.to_guests g : guest_selected) {
                        if (g.status == true) {
                            advances.addAll(Srpt_history_advance_payments.
                                    ret_data("" + g.room_guest_id));
                        }
                    }
                }
                double peso1 = 0;
                double dollar1 = 0;
                double peso_bank1 = 0;
                double usd_bank = 0;
                double credit1 = 0;
                for (Srpt_history_advance_payments.field ad : advances) {
                    peso1 += ad.getPhp_cash();
                    dollar1 += ad.getUsd_cash();
                    peso_bank1 += ad.getPhp_bank();
                    usd_bank += ad.getUsd_bank();

                    double credit_rate = ad.getCredit_card_rate();
                    credit_rate = (credit_rate / 100) * ad.getCredit_card();
                    double credit_total = ad.getCredit_card();//+ credit_rate;
                    credit1 += credit_total;
                }

                double dollar_to_pay = to_pay / dollar_rate;
                String s = df.format(dollar_to_pay);
                dollar_to_pay = FitIn.toDouble(s);
                Srpt_liquid_billing rpt = new Srpt_liquid_billing(
                        busi_name, room_rate, accomodation, SUBREPORT_DIR, rpt_bar_and_resto, rpt_bar, accom2, accom3, advances, new ArrayList(), my_date, guest_id, table_no, check_in, transfers, accomodation_1, accom_total, img_path, to_pay, guest_name, dollar, total_charges, discount, dollar_rate, peso1, dollar1, 0, 0, 0, peso_bank1, usd_bank, credit1, dollar_to_pay, new ArrayList());
                Window p = (Window) this;
                Dlg_billing_report nd = Dlg_billing_report.create(p, true);
                nd.setTitle("");
                nd.do_pass(rpt, "rpt_billing_liquid.jrxml", table.id, resto_items, bar_items, guest_name, guest_id, advances, accom, rpt_others, tbl_category_ALM, my_guest);
                nd.setCallback(new Dlg_billing_report.Callback() {

                    @Override
                    public void ok(CloseDialog closeDialog, Dlg_billing_report.OutputData data) {
                        closeDialog.ok();
                        set_bill_discount(data.discount, data.rate, data.guest_id, data.guest_name);
                    }
                });
                Toolkit tk = Toolkit.getDefaultToolkit();
                int xSize = ((int) tk.getScreenSize().
                        getWidth());
                int ySize = ((int) tk.getScreenSize().
                        getHeight());
                nd.setSize(xSize, ySize);
                nd.setVisible(true);
            } else {
                List<S2_search.to_items> datas1 = new ArrayList();
                for (int i = 0; i < item_model.size(); i++) {
                    Object value = item_model.getElementAt(i);
                    S2_search.to_items t = (S2_search.to_items) value;
                    datas1.add(t);
                }
                datas = datas1;
            }
        }
        lbl_amount.setText("0.00");
        tbl_customer_tables_details_ALM.clear();
        tbl_customer_tables_details_M.fireTableDataChanged();
    }
    double bank_php = 0;
    double bank_usd = 0;
    DecimalFormat df = new DecimalFormat("#,###");

    private void bill() {

        if (System.getProperty("version", "ordering").
                equals("ordering")) {
            bill_casa();
        } else {

            String guest = cb_guest.getSelectedItem().
                    toString();

            String where_charge = "";

            if (guest.equals("ALL")) {
                bill_all();
            } else {
                where_charge = where_charge + " where table_no = '" + lbl_table_no.
                        getText() + "' and status<>'" + "1" + "' and guest_name like '%" + guest + "%'";
                Date d = new Date();
                try {
                    d = DateType.datetime.parse(lbl_check_date.getText());
                } catch (ParseException ex) {
                    Logger.getLogger(Dashboard1.class.getName()).
                            log(Level.SEVERE, null, ex);
                }
                int count = S2_search.ret_guest_charge_count(lbl_table_no.
                        getText(), where_charge);
                String guest_id = "-1";
                String my_date = "Billing";
                String table_no = lbl_table_no.getText();
                String check_in = DateType.liquid.format(d) + " - " + my_date;
                String transfers = cb_guest.getSelectedItem().
                        toString();
                String accomodation = lbl_table_no.getText();
                double accom_total = FitIn.toDouble(lbl_rate.getText());
                if (System.getProperty("version", "ordering").
                        equals("ordering")) {
                    guest_id = "-1";
                } else {
                    guest_id = S2_guest_charges.select_guest_id(guest);
                    my_date = DateType.liquid.format(new Date()) + " Billing";
                    String aw = DateType.liquid.format(new Date());
                    table_no = lbl_table_no.getText();
                    check_in = DateType.liquid.format(d) + " - " + aw;
                    transfers = "none";
                    accomodation = "" + count + " x nights @ " + lbl_rate.
                            getText();
                    accom_total = FitIn.toDouble(lbl_rate.getText());
                }
                String img_path = System.getProperty("img_path", ImgPath.getPath() + "img_templates\\");
                double to_pay = FitIn.toDouble(lbl_guest_total.getText());
                final to_date_from.to_guest_billing to = new to_date_from.to_guest_billing(my_date, guest_id, table_no, check_in, transfers, accomodation, accom_total, img_path, to_pay);
                Executor.doExecute(this, new Executor.Task() {

                    @Override
                    public void work_on() {
                        String version = System.getProperty("version", "ordering");
                        if (version.equals("ordering")) {
                            rpt_report.pdf_viewer_guest_billing(to, "rpt_guest_billing_ordering_3");
                        } else {
                            rpt_report.pdf_viewer_guest_billing(to, "rpt_guest_billing_4_4");
                        }

                    }
                });
            }
        }
    }

    private void bill_all() {
        String guest = cb_guest.getSelectedItem().
                toString();
        if (guest.equals("ALL")) {
        } else {
        }
//       
        String where_charge = "";

//        if (guest.equals("ALL")) {
//            return;
//        }
        where_charge = where_charge + " where table_no = '" + lbl_table_no.
                getText() + "' and status<>'" + "1" + "' ";
        Date d = new Date();
        try {
            d = DateType.datetime.parse(lbl_check_date.getText());
        } catch (ParseException ex) {
            Logger.getLogger(Dashboard1.class.getName()).
                    log(Level.SEVERE, null, ex);
        }
        int count = S2_search.ret_guest_charge_count(lbl_table_no.getText(), where_charge);
        String guest_id = "-1";
        String my_date = "Billing";
        String table_no = lbl_table_no.getText();
        String check_in = DateType.liquid.format(d) + " - " + my_date;
        String transfers = cb_guest.getSelectedItem().
                toString();
        String accomodation = lbl_table_no.getText();
        double accom_total = FitIn.toDouble(lbl_rate.getText());
        if (System.getProperty("version", "ordering").
                equals("ordering")) {
            guest_id = "-1";
        } else {

            guest_id = S2_guest_charges.select_guest_id(guest);
            my_date = DateType.liquid.format(new Date()) + " Billing";
            String aw = DateType.liquid.format(new Date());
            table_no = S1_check_in.get_table_id(lbl_table_no.getText());
            check_in = DateType.liquid.format(d) + " - " + aw;
            transfers = "none";
            accomodation = "" + count + " x nights @ " + lbl_rate.getText();
            accom_total = FitIn.toDouble(lbl_rate.getText());
        }
        double to_pay = FitIn.toDouble(lbl_guest_total.getText());
        String img_path = System.getProperty("img_path", ImgPath.getPath() + "img_templates\\");
        final to_date_from.to_guest_billing to = new to_date_from.to_guest_billing(my_date, guest_id, table_no, check_in, transfers, accomodation, accom_total, img_path, to_pay);
        Executor.doExecute(this, new Executor.Task() {

            @Override
            public void work_on() {
                String version = System.getProperty("version", "ordering");
                if (version.equals("ordering")) {
                    if (item_model.isEmpty()) {
                        rpt_report.pdf_viewer_guest_billing(to, "rpt_guest_billing_ordering_1_1");
                    } else {
                        if (user_id.equals("6")) {
                            rpt_report.pdf_viewer_guest_billing(to, "rpt_guest_billing_ordering_2_1_1");
                        } else {
                            rpt_report.pdf_viewer_guest_billing(to, "rpt_guest_billing_ordering_2");
                        }
                    }

                } else {
                    if (item_model.isEmpty()) {
                        if (user_id.equals("6")) {
                            rpt_report.pdf_viewer_guest_billing(to, "rpt_guest_billing_5_1");

                        } else {
                            rpt_report.pdf_viewer_guest_billing(to, "rpt_guest_billing_4_3_1_1_1");
                        }

                    } else {
                        if (user_id.equals("6")) {
                            rpt_report.pdf_viewer_guest_billing(to, "rpt_guest_billing_6_1");
                        } else {
                            rpt_report.pdf_viewer_guest_billing(to, "rpt_guest_billing_4_1_2_1_1");
                        }

                    }
                }

            }
        });

    }

    private void remitance() {
        Window p = (Window) this;
        Dlg_cashout nd = Dlg_cashout.create(p, true);
        nd.setTitle("");
        nd.do_pass();
        nd.setCallback(new Dlg_cashout.Callback() {

            @Override
            public void ok(CloseDialog closeDialog, Dlg_cashout.OutputData data) {
                closeDialog.ok();
            }
        });
        nd.setLocationRelativeTo(this);

        nd.setVisible(true);
    }

    private void advance_payment() {
        String guest = cb_guest.getSelectedItem().
                toString();
        if (guest.equals("ALL")) {
            JOptionPane.showMessageDialog(null, "CHOOSE GUEST");
            return;
        }
        String room_no = lbl_table_no.getText();
        String guest_id = S1_cash_advance.get_guest_id(guest);
        double paid = FitIn.toDouble(lbl_advance_payment.getText());
        double to_pay = ((FitIn.toDouble(lbl_rate.getText()) + FitIn.toDouble(lbl_oders_payment.
                getText())) - paid);
        Window p = (Window) this;
        Dlg_advance_payment nd = Dlg_advance_payment.create(p, true);
        nd.setTitle("");
        nd.do_pass(room_no, guest_id, guest, paid, to_pay, "", room_guest_id, advance_usd);
        nd.setCallback(new Dlg_advance_payment.Callback() {

            @Override
            public void ok(CloseDialog closeDialog, Dlg_advance_payment.OutputData data) {
//                closeDialog.ok();
                set_guest_orders();
            }
        });
        nd.setLocationRelativeTo(this);

        nd.setVisible(true);
    }

    private void prepare_order() {

        int row = item_model.size();
        if (item_model.isEmpty()) {
            return;
        }

        String table_name = S1_prepare_order1.get_table_id(lbl_table_no.getText());
        List<S5_printing_assemlby.to_printing_assembly> datas = S5_printing_assemlby.
                ret_data("");
//        JOptionPane.showMessageDialog(null, table_name);
        int[] assembly = new int[datas.size()];
        int j = 0;
        for (S5_printing_assemlby.to_printing_assembly t : datas) {
            assembly[j] = t.id;
//            
            if (t.place.equalsIgnoreCase("NORMAL")) {
            } else {
                int start = 0;
                for (int r = 0; r < row; r++) {
                    Object value = item_model.getElementAt(r);
                    S2_search.to_items s = (S2_search.to_items) value;
                    S2_search.to_items to = new S2_search.to_items(s.name, s.uom, s.desc, s.price, s.qty, s.img_path, s.qty2, s.guest_id, s.cat_id, s.category_name, s.printing_assembly, s.status, s.disc_name, s.disc_rate, s.discount, s.customer_name, s.customer_address, s.customer_address, s.date_added, s.group_id, s.nights, s.guest_no, s.check_out, s.room_guest_id, s.user_name, s.item_package_id, s.sub_category_name, s.sub_category_id, s.order_no);
                    if (s.status == 0 && s.printing_assembly == assembly[j]) {
                        start++;
                        break;
                    }
                }
                if (start > 0) {
//                    JOptionPane.showMessageDialog(null, table_name + " " + assembly[j] + " " + t.place);
                    setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
                    S1_prepare_order1.to_prepare_receipt to1 = new S1_prepare_order1.to_prepare_receipt(table_name, "" + assembly[j], t.place, lbl_table_no.
                            getText(), cb_guest.getSelectedItem().
                                    toString());
                    S1_prepare_order1.prepare_food(to1);
                    S5_printing_assemlby.update_order_status(table_name, "" + assembly[j]);
                    setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
                }
            }
            j++;
        }
        lbl_prepare.setText("PREPARE ( 0 )");
        int to_prepare = 0;
        int i = 0;
    }

    private void prepare_order2(String order_no) {
        final String ui_items = System.getProperty("ui_items", "list");
        String table_name = S1_prepare_order1.get_table_name(lbl_table_no.
                getText());
        List<S5_printing_assemlby.to_printing_assembly> datas = S5_printing_assemlby.ret_data("");
        String table_id = lbl_table_no.getText();
        int[] assembly = new int[datas.size()];
        int j = 0;

        String business_name = System.getProperty("business_name", "Liquid Dive Dumaguete");
        String address = System.getProperty("address", "Dauin, Negros Oriental");
        String contact_no = System.getProperty("contact_no", "1235566");
        String date = DateType.datetime2.format(new Date());
        String room_no = table_name;
        String guess_names = "";
        List<Dlg_check_liquid.to_guests> guest = my_guest;
        int u = 0;
        for (Dlg_check_liquid.to_guests t : guest) {
            if (u == 0) {
                guess_names = guess_names + t.name + "";

            } else {
                guess_names = guess_names + ", " + t.name + "";
            }

            u++;
        }

        String print_to = "";
        String receipt_footer = System.getProperty("receipt_footer", "This is not an Official BIR Receipt");
        String cashier_name = to_users.getUser_screen_name();

        Srpt_billing_statement rpt_billing_statement = new Srpt_billing_statement(business_name, address, contact_no, date, room_no, guess_names, print_to, receipt_footer, cashier_name, order_no);
        Srpt_billing_statement rpt_billing_stab_bar_and_resto = new Srpt_billing_statement(business_name, address, contact_no, date, room_no, guess_names, "Bar and Resto", receipt_footer, cashier_name, order_no);
        Srpt_billing_statement rpt_billing_stab_kitchen = new Srpt_billing_statement(business_name, address, contact_no, date, room_no, guess_names, "Kitchen", receipt_footer, cashier_name, order_no);

        for (S5_printing_assemlby.to_printing_assembly t : datas) {
            assembly[j] = t.id;
            if (t.place.equalsIgnoreCase("NORMAL")) {
            } else {
                rpt_orders rpt = new rpt_orders(table_name + " (" + cb_table_location.
                        getSelectedItem().
                        toString() + ")", t.place,
                        to_users.username1);
                int state = 0;
                if (ui_items.equals("list")) {

                } else {
                    for (int i = 0; i < orders_model.size(); i++) {
                        Object value = orders_model.getElementAt(i);
                        S2_search.to_orders tt = (S2_search.to_orders) value;
                        if (tt.printing_assembly == assembly[j]) {
                            rpt_orders.field f = new rpt_orders.field(
                                    tt.desc,
                                    tt.qty,
                                    tt.price);
                            rpt.fields.add(f);
                            state++;

                        }
                    }
                }

//                if (state > 0) {
//                    setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
//                    rpt_orders.print_to_place(rpt);
//                    setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
//                }
            }
            j++;
        }

        for (int i = 0; i < tbl_table_orders_ALM.size(); i++) {
            Object value = tbl_table_orders_ALM.getElementAt(i);
            S2_search.to_orders tt = (S2_search.to_orders) value;

            String item_code = tt.name;
            String description = tt.desc;
            String assembly1 = "" + tt.printing_assembly;
            double qty = tt.qty;
            double selling_price = tt.price;
            double discount = (tt.disc_rate / 100) * (qty * selling_price);

            double amount = (qty * selling_price) - discount;
            String qty1 = "" + qty;
            String types_no_wo_qty = System.getProperty("catid_orders_wo_qty", "");
            String[] l_types_no_wo_qty = types_no_wo_qty.split(",");
            String cat_id = tt.cat_id;
            String sub_cat_id = Srpt_billing_statement.ret_types_num(item_code);
            for (String s : l_types_no_wo_qty) {
                if (sub_cat_id.equalsIgnoreCase(s)) {
                    qty1 = "";
                }
            }
            String table_no_id = table_name;
            String date_added = DateType.dash2.format(new Date());
            String guest_id = "";
            String guest_name = guess_names;
            String user_name = to_users.getUser_screen_name();
            double net_due = amount - discount;
            Srpt_billing_statement.field field_billing_statement = new Srpt_billing_statement.field(item_code, description, assembly1, qty, selling_price, discount,
                    amount, "", cat_id, sub_cat_id, true, order_no, table_no_id, date_added, guest_id, guest_name, user_name, net_due, 0);
            rpt_billing_statement.fields.add(field_billing_statement);

            if (tt.printing_assembly == 3) {
                Srpt_billing_statement.field field_stab_bar_and_resto = new Srpt_billing_statement.field(item_code, description, assembly1, qty,
                        selling_price, discount, amount, "", cat_id, sub_cat_id, true, order_no, table_no_id, date_added, guest_id, guest_name, user_name, net_due, 0);
                rpt_billing_stab_bar_and_resto.fields.add(field_stab_bar_and_resto);
            }
            if (tt.printing_assembly == 4) {
                Srpt_billing_statement.field field_stab_kitchen = new Srpt_billing_statement.field(item_code, description, assembly1, qty,
                        selling_price, discount, amount, "", cat_id, sub_cat_id, true, order_no, table_no_id, date_added, guest_id, guest_name, user_name, net_due, 0);
                rpt_billing_stab_kitchen.fields.add(field_stab_kitchen);
            }

        }
        Window p = (Window) this;
        Dlg_print_orders nd = Dlg_print_orders.create(p, true);
        nd.setTitle("");
        List<S2_search.to_items> orders = tbl_customer_tables_details_ALM;
        nd.do_pass(order_no, rpt_billing_statement, rpt_billing_stab_bar_and_resto, rpt_billing_stab_kitchen, orders);
        nd.setCallback(new Dlg_print_orders.Callback() {

            @Override
            public void ok(CloseDialog closeDialog, Dlg_print_orders.OutputData data) {
                closeDialog.ok();

            }
        });
        nd.setLocationRelativeTo(this);
        nd.setVisible(true);
        lbl_prepare.setText("PREPARE ( 0 )");
    }

    private void charge_to_room() {
//        int row = jg_orders.getSelectedIndex();
//        if (row < 0) {
//            return;
//        }
//        Object value1 = orders_model.getElementAt(row);
//        final S2_search.to_rooms t1 = (S2_search.to_rooms) value1;
//
//        int r = item_model.size();
//        final List<S2_search.to_orders> datas = new ArrayList();
//        final List<S2_search.to_items_status> to_sub = new ArrayList();
//        for (int i = 0; i < r; i++) {
//            Object value = item_model.getElementAt(i);
//            S2_search.to_items t = (S2_search.to_items) value;
//            S2_search.to_orders tt = new S2_search.to_orders(t.name, t.uom, t.desc, t.price, t.qty, t.img_path, t.qty, to_sub, t.price * t.qty, t.cat_id, t.category_name, t.printing_assembly, t.disc_name, t.disc_rate, t.discount, t.customer_name, t.customer_address, t.customer_address, t.group_id);
//            datas.add(tt);
//        }
//
//        Window p = (Window) this;
//        dlg_charge_to_room nd = dlg_charge_to_room.create(p, true);
//        nd.setTitle("");
////        nd.do_pass("");
//        nd.setCallback(new dlg_charge_to_room.Callback() {
//
//            @Override
//            public void ok(CloseDialog closeDialog, dlg_charge_to_room.OutputData data) {
//                closeDialog.ok();
//                S1_check_in.charge_order_to_romm(datas, t1.id, to_sub, data.guest_id, data.guest_name, data.table_id);
//                Prompt.call("ORDER CHARGE TO ROOM " + data.table_name);
//                init_items();
//            }
//        });
//        nd.setLocationRelativeTo(this);
//
//        nd.setVisible(true);

        Window p = (Window) this;
        Dlg_addtl_cashins nd = Dlg_addtl_cashins.create(p, true);
        nd.setTitle("");
//        nd.do_pass("");
        nd.setCallback(new Dlg_addtl_cashins.Callback() {

            @Override
            public void ok(CloseDialog closeDialog, Dlg_addtl_cashins.OutputData data) {
                closeDialog.ok();
            }
        });
        nd.setLocationRelativeTo(this);
        nd.setVisible(true);
    }

    private void void_order() {
        int row = jg_orders.getSelectedIndex();
        if (row < 0) {
            return;
        }

        Object value = orders_model.getElementAt(row);
        final S2_search.to_rooms t = (S2_search.to_rooms) value;

        Window p = (Window) this;
        Dlg_void_table_order nd = Dlg_void_table_order.create(p, true);
        nd.setTitle("");
        nd.do_pass(t.room, t.to_guest);
        nd.setCallback(new Dlg_void_table_order.Callback() {

            @Override
            public void ok(CloseDialog closeDialog, Dlg_void_table_order.OutputData data) {
//                closeDialog.ok();
//                myInit();
                init_items();
            }
        });
//        nd.setLocationRelativeTo(this);
        Center.setCenter(nd);

        nd.setVisible(true);
    }

    private void stock_in_out() {
        Window p = (Window) this;
        Dlg_stockout nd = Dlg_stockout.create(p, true);
        nd.setTitle("");
//        nd.do_pass("");
        nd.setCallback(new Dlg_stockout.Callback() {

            @Override
            public void ok(CloseDialog closeDialog, Dlg_stockout.OutputData data) {
//                closeDialog.ok();
            }
        });
        Toolkit tk = Toolkit.getDefaultToolkit();
        int xSize = ((int) tk.getScreenSize().
                getWidth());
        int ySize = ((int) tk.getScreenSize().
                getHeight());

        nd.setSize(xSize, ySize);
        nd.setVisible(true);
    }
    int type_id = 0;

    private void pm_tbl_users(MouseEvent evt) {

        String version = System.getProperty("version", "ordering");
        if (version.equals("ordering") || version.equals("resto")) {
            final String ui_items = System.getProperty("ui_items", "list");
            if (open_item == 1) {
                if (ui_items.equals("list")) {
                    int idx = tbl_category.getSelectedRow();
                    if (idx < 0) {
                        return;
                    }
                    final String category = tbl_category.getModel().
                            getValueAt(idx, 0).
                            toString();
                    pm_category.removeAll();
                    pm_category1.removeAll();
                    List<String> categories = new ArrayList();
                    categories = S1_categories.ret_categories_for_cb();
                    for (final String cat : categories) {
                        JMenu c = new JMenu(cat);
                        int j = 0;
                        if (cat.equalsIgnoreCase(category)) {
                            c.setSelected(true);
                            Icon im1 = new ImageIcon(this.getClass().
                                    getResource("/POS/mini_icons/award_star_gold.png"));
                            c.setIcon(im1);
                            j = 1;
                            List<String> t = new ArrayList();
                            t = S1_categories.ret_category_types_for_cb(cat);
                            for (final String s : t) {
                                JMenu types = new JMenu(s);
                                types.addActionListener(new ActionListener() {

                                    @Override
                                    public void actionPerformed(ActionEvent ae) {
                                        final S6_items.to_types to = S6_items.
                                                select_type(cat, s);
                                        type_id = Integer.parseInt(to.type_id);
                                        init_items();
                                    }
                                });
                                types.addMouseListener(new MouseListener() {

                                    @Override
                                    public void mouseClicked(MouseEvent me) {
                                    }

                                    @Override
                                    public void mousePressed(MouseEvent me) {
                                    }

                                    @Override
                                    public void mouseReleased(MouseEvent me) {
                                    }

                                    @Override
                                    public void mouseEntered(MouseEvent me) {
                                        type_name = s;
                                        final S6_items.to_types to = S6_items.
                                                select_type(cat, s);
                                        type_id = Integer.parseInt(to.type_id);
                                        init_items();
                                    }

                                    @Override
                                    public void mouseExited(MouseEvent me) {
                                    }
                                });
                                types.setFont(new java.awt.Font("Tahoma", 1, 14));
//                                c.add(types);
                                JCheckBoxMenuItem types1 = new JCheckBoxMenuItem("ADD ITEM");
                                types1.setFont(new java.awt.Font("Tahoma", 1, 14));
                                types1.addActionListener(new ActionListener() {

                                    @Override
                                    public void actionPerformed(ActionEvent ae) {
                                        add_item();
                                    }
                                });
                                types.add(types1);
                                pm_category.add(types);
                            }

                            break;
                        }
                    }
                } else {
                    int row = jg_categories.getSelectedIndex();
                    if (row < 0) {
                        return;
                    }
                }

                if (evt.isPopupTrigger()) {
                    pm_category.show(evt.getComponent(), evt.getX(), evt.getY());
                }
            }

        }

    }
    String type_name = "";

    private void add_item() {
//         pm_tbl_users(evt);add_item();
        Window p = (Window) this;
        Dlg_add3 nd = Dlg_add3.create(p, true);
        nd.setTitle("");
        nd.do_pass2(cat_name, category_id, type_id, type_name);
        nd.setCallback(new Dlg_add3.Callback() {

            @Override
            public void ok(CloseDialog closeDialog, Dlg_add3.OutputData data) {
//                closeDialog.ok();
                init_items2();
            }
        });
//        Center.setCenter(nd);

//       ;
//        FullS
        Toolkit tk = Toolkit.getDefaultToolkit();
        int xSize = ((int) tk.getScreenSize().
                getWidth());
        int ySize = ((int) tk.getScreenSize().
                getHeight());
        nd.setSize(xSize, ySize);
        nd.setVisible(true);

    }

    private void cashier_sales() {
        String user = to_users.ret_user(to_users.username1);
//        JOptionPane.showMessageDialog(null, user);
        String session = "" + S12_cashier_sessions.get_cashier_ses_id(user);
//        JOptionPane.showMessageDialog(null, session  + " "+user);
        Window p = (Window) this;
        Dlg_cashier_sales_all nd = Dlg_cashier_sales_all.create(p, true);
        nd.setTitle("");
        nd.do_pass(session);
        nd.setCallback(new Dlg_cashier_sales_all.Callback() {

            @Override
            public void ok(CloseDialog closeDialog, Dlg_cashier_sales_all.OutputData data) {
                closeDialog.ok();
            }
        });
        Toolkit tk = Toolkit.getDefaultToolkit();
        int xSize = ((int) tk.getScreenSize().
                getWidth());
        int ySize = ((int) tk.getScreenSize().
                getHeight());

        nd.setSize(xSize, ySize);
        nd.setVisible(true);

    }
    private ArrayListModel tbl_customer_tables_details_ALM;
    private Tblcustomer_tables_detailsModel tbl_customer_tables_details_M;
    int ord = 0;

    private void init_tbl_customer_tables_details() {
        tbl_customer_tables_details_ALM = new ArrayListModel();
        tbl_customer_tables_details_M = new Tblcustomer_tables_detailsModel(tbl_customer_tables_details_ALM);
        tbl_items.getTableHeader().
                setPreferredSize(new Dimension(100, 40));
        tbl_items.setModel(tbl_customer_tables_details_M);
        tbl_items.setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        tbl_items.setRowHeight(25);
        int amount = 0;
        int size = 0;
        int a1 = 0;
        int a2 = 0;
        int a3 = 0;

        if (my_order == 1) {
            amount = 100;
        } else {
            a1 = 60;
            a2 = 80;
            a3 = 140;
        }
        if (ord == 0) {
            size = 200;
        } else {
            size = 0;
        }
//        if(my_order = =0){
//            size
//        }

        int[] tbl_widths_customer_tables_details = {40, 100, 80, a1, a2, a3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
        for (int i = 0, n = tbl_widths_customer_tables_details.length; i < n; i++) {
            if (i == 1) {
                continue;
            }
            TableWidthUtilities.setColumnWidth(tbl_items, i, tbl_widths_customer_tables_details[i]);
        }
        TableUtility.align_row_to_Center(tbl_items, 2);
        TableUtility.align_row_to_Center(tbl_items, 4);
        TableUtility.align_column_to_Center(tbl_items, 2);
        TableUtility.align_column_to_Center(tbl_items, 4);
        Dimension d = tbl_items.getTableHeader().
                getPreferredSize();
        d.height = 30;
        tbl_items.getTableHeader().
                setPreferredSize(d);
        tbl_items.getTableHeader().
                setFont(new java.awt.Font("Arial", Font.BOLD, 12));
        tbl_items.setRowHeight(30);
        tbl_items.setFont(new java.awt.Font("Arial", 1, 12));
        TableWidthUtilities.setColumnRightRenderer(tbl_items, 2);
        TableWidthUtilities.setColumnRightRenderer(tbl_items, 3);
        TableWidthUtilities.setColumnRightRenderer(tbl_items, 4);

    }

    private void loadData_customer_tables_details(List<S2_search.to_items> acc) {
        tbl_customer_tables_details_ALM.clear();
        tbl_customer_tables_details_ALM.addAll(acc);
    }

    public static class Tblcustomer_tables_detailsModel extends AbstractTableAdapter {

        public static String[] COLUMNS = {
            "Qty", "Description", "Price", "Discount", "Amount", "Date", "AMOUNT", "guest_id", "cat_id", "category_name", "printing_assembly", "status", "disc_name", "disc_rate", "discount", "customer_name", "customer_id", "customer_address", "DATE ADDED", "ADDED BY"
        };

        public Tblcustomer_tables_detailsModel(ListModel listmodel) {
            super(listmodel, COLUMNS);
        }

        @Override
        public boolean isCellEditable(int row, int column) {
            if (column == 1) {
                return true;
            }
            return false;
        }

        @Override
        public Class getColumnClass(int col) {
            if (col == 1000) {
                return Boolean.class;
            }
            return Object.class;
        }

        @Override
        public Object getValueAt(int row, int col) {
            S2_search.to_items tt = (S2_search.to_items) getRow(row);
            switch (col) {
                case 0:
                    return " " + ("" + tt.qty);
                case 1:
                    return " " + tt.desc;
                case 2:
                    return FitIn.fmt_wc_0(tt.price) + " ";
                case 3:
                    return FitIn.fmt_wc_0(tt.discount) + " ";
                case 4:

                    return FitIn.fmt_wc_0((tt.qty * tt.price) - tt.discount) + " ";
                case 5:
                    return " " + DateType.convert_slash3(tt.date_added);
                case 6:
                    return FitIn.fmt_wc_0((tt.qty * tt.price) - tt.discount);
                case 7:
                    return tt.guest_id;
                case 8:
                    return tt.cat_id;
                case 9:
                    return tt.category_name;
                case 10:
                    return tt.printing_assembly;
                case 11:
                    return tt.status;
                case 12:
                    return tt.disc_name;
                case 13:
                    return tt.disc_rate;
                case 14:
                    return tt.discount;
                case 15:
                    return tt.customer_name;
                case 16:
                    return tt.customer_id;
                case 17:
                    return tt.customer_address;
                case 18:
                    return DateType.convert_jan_1_2013_datetime(tt.date_added);
                default:

                    return tt.user_name;
            }
        }
    }

    private void data_cols() {
        loadData_customer_tables_details(new ArrayListModel());
    }

    private ArrayListModel tbl_table_orders_ALM;
    private Tblcustomer_orders_detailsModel tbl_orders_M;

    private void init_tbl_orders_details() {
        tbl_table_orders_ALM = new ArrayListModel();
        tbl_orders_M = new Tblcustomer_orders_detailsModel(tbl_table_orders_ALM);
        tbl_orders.getTableHeader().
                setPreferredSize(new Dimension(100, 40));
        tbl_orders.setModel(tbl_orders_M);
        tbl_orders.setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        tbl_orders.setRowHeight(25);
        int[] tbl_widths_customer_tables_details = {0, 0, 80, 100, 100, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};
        for (int i = 0, n = tbl_widths_customer_tables_details.length; i < n; i++) {
            if (i == 3) {
                continue;
            }
            TableWidthUtilities.setColumnWidth(tbl_orders, i, tbl_widths_customer_tables_details[i]);
        }
        Dimension d = tbl_orders.getTableHeader().
                getPreferredSize();
        d.height = 30;
        tbl_orders.getTableHeader().
                setPreferredSize(d);
        tbl_orders.getTableHeader().
                setFont(new java.awt.Font("Arial", Font.BOLD, 12));
        tbl_orders.setRowHeight(35);
        tbl_orders.setFont(new java.awt.Font("Arial", 1, 12));
    }

    private void loadData_orders_details(List<S2_search.to_orders> acc) {

        tbl_table_orders_ALM.addAll(acc);
    }

    public static class Tblcustomer_orders_detailsModel extends AbstractTableAdapter {

        public static String[] COLUMNS = {
            "name", "uom", "QTY", "DESCRIPTION", "PRICE", "img_path", "AMOUNT", "to_sub", "amount_to_pay", "cat_id", "category_name", "printing_assembly", "disc_name", "disc_rate", "discount", "customer_name", "customer_id", "customer_address"
        };

        public Tblcustomer_orders_detailsModel(ListModel listmodel) {
            super(listmodel, COLUMNS);
        }

        @Override
        public boolean isCellEditable(int row, int column) {
            if (column == 1) {
                return true;
            }
            return false;
        }

        @Override
        public Class getColumnClass(int col) {
            if (col == 1000) {
                return Boolean.class;
            }
            return Object.class;
        }

        @Override
        public Object getValueAt(int row, int col) {
            S2_search.to_orders tt = (S2_search.to_orders) getRow(row);
            switch (col) {
                case 0:
                    return tt.name;
                case 1:
                    return tt.uom;
                case 2:
                    return FitIn.toInt("" + tt.qty);
                case 3:
                    return tt.desc;
                case 4:
                    return FitIn.fmt_wc_0(tt.price);
                case 5:
                    return tt.img_path;
                case 6:
                    return FitIn.fmt_wc_0((tt.price * tt.qty) - tt.discount);
                case 7:
                    return tt.to_sub;
                case 8:
                    return tt.amount_to_pay;
                case 9:
                    return tt.cat_id;
                case 10:
                    return tt.category_name;
                case 11:
                    return tt.printing_assembly;
                case 12:
                    return tt.disc_name;
                case 13:
                    return tt.disc_rate;
                case 14:
                    return tt.discount;
                case 15:
                    return tt.customer_name;
                case 16:
                    return tt.customer_id;
                default:
                    return tt.customer_address;
            }
        }
    }

    private void data_orders() {
        loadData_orders_details(new ArrayListModel());
    }

    private void expenses() {
        Window p = (Window) this;
        Dlg_expenses nd = Dlg_expenses.create(p, true);
        nd.setTitle("");

        nd.setCallback(new Dlg_expenses.Callback() {

            @Override
            public void ok(CloseDialog closeDialog, Dlg_expenses.OutputData data) {
                closeDialog.ok();
            }
        });
        nd.setLocationRelativeTo(this);

        nd.setVisible(true);
    }

    private void blind() {
        Window p = (Window) this;
        Dlg_blind nd = Dlg_blind.create(p, true);
        nd.setTitle("");

        nd.setCallback(new Dlg_blind.Callback() {

            @Override
            public void ok(CloseDialog closeDialog, Dlg_blind.OutputData data) {
                closeDialog.ok();
            }
        });
        Toolkit tk = Toolkit.getDefaultToolkit();
        int xSize = ((int) tk.getScreenSize().
                getWidth());
        int ySize = ((int) tk.getScreenSize().
                getHeight());

        nd.setSize(xSize, ySize);
        nd.setVisible(true);
    }
    private ArrayListModel tbl_category_ALM;
    private TblcategoryModel tbl_category_M;

    private void init_tbl_category() {
        tbl_category_ALM = new ArrayListModel();
        tbl_category_M = new TblcategoryModel(tbl_category_ALM);
        tbl_category.getTableHeader().
                setPreferredSize(new Dimension(100, 40));
        tbl_category.setModel(tbl_category_M);
        tbl_category.setSelectionMode(ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        tbl_category.setRowHeight(25);
        int[] tbl_widths_category = {100, 0, 0};
        for (int i = 0, n = tbl_widths_category.length; i < n; i++) {
            if (i == 0) {
                continue;
            }
            TableWidthUtilities.setColumnWidth(tbl_category, i, tbl_widths_category[i]);
        }
        TableUtility.align_row_to_Center(tbl_category, 0);
        Dimension d = tbl_category.getTableHeader().
                getPreferredSize();
        d.height = 30;
        tbl_category.getTableHeader().
                setPreferredSize(d);
        tbl_category.getTableHeader().
                setFont(new java.awt.Font("Arial", Font.BOLD, 12));
        tbl_category.setRowHeight(40);
        tbl_category.setFont(new java.awt.Font("Arial", 1, 12));
    }

    private void loadData_category(List<to_name_cat> acc) {
        tbl_category_ALM.clear();
        tbl_category_ALM.addAll(acc);
    }

    public static class TblcategoryModel extends AbstractTableAdapter {

        public static String[] COLUMNS = {
            "", "cat_num", "img_path"
        };

        public TblcategoryModel(ListModel listmodel) {
            super(listmodel, COLUMNS);
        }

        @Override
        public boolean isCellEditable(int row, int column) {
            if (column == 1) {

            }
            return false;
        }

        @Override
        public Class getColumnClass(int col) {
            if (col == 1000) {
                return Boolean.class;
            }
            return Object.class;
        }

        @Override
        public Object getValueAt(int row, int col) {
            to_name_cat tt = (to_name_cat) getRow(row);
            switch (col) {
                case 0:
                    return tt.name.toUpperCase();
                case 1:
                    return tt.num;
                default:
                    return tt.img_path;
            }
        }
    }

    private void data_categories() {
        loadData_category(new ArrayListModel());
    }

    private void credit_cards() {
        Window p = (Window) this;
        Dlg_credit_card_ins nd = Dlg_credit_card_ins.create(p, true);
        nd.setTitle("");

        nd.setCallback(new Dlg_credit_card_ins.Callback() {

            @Override
            public void ok(CloseDialog closeDialog, Dlg_credit_card_ins.OutputData data) {
                closeDialog.ok();
            }
        });
        nd.setLocationRelativeTo(this);

        nd.setVisible(true);
    }

    private void billings() {
        Window p = (Window) this;
        Dlg_billing_history nd = Dlg_billing_history.create(p, true);
        nd.setTitle("");

        nd.setCallback(new Dlg_billing_history.Callback() {

            @Override
            public void ok(CloseDialog closeDialog, Dlg_billing_history.OutputData data) {
                closeDialog.ok();
            }
        });
        Toolkit tk = Toolkit.getDefaultToolkit();
        int xSize = ((int) tk.getScreenSize().
                getWidth());
        int ySize = ((int) tk.getScreenSize().
                getHeight());

        nd.setSize(xSize, ySize);
        nd.setVisible(true);
    }

    private void outside_cash() {

        Window p = (Window) this;
        Dlg_receipts nd = Dlg_receipts.create(p, true);
        nd.setTitle("");

        nd.setCallback(new Dlg_receipts.Callback() {

            @Override
            public void ok(CloseDialog closeDialog, Dlg_receipts.OutputData data) {
                closeDialog.ok();
            }
        });
        nd.setLocationRelativeTo(this);

        nd.setVisible(true);

    }

    private void staff_prepaid() {
        Window p = (Window) this;
        Dlg_employee_advance_payment nd = Dlg_employee_advance_payment.create(p, true);
        nd.setTitle("");

        nd.setCallback(new Dlg_employee_advance_payment.Callback() {

            @Override
            public void ok(CloseDialog closeDialog, Dlg_employee_advance_payment.OutputData data) {
                closeDialog.ok();
            }
        });
        nd.setLocationRelativeTo(this);

        nd.setVisible(true);
    }

    private void get_sub_categories(MouseEvent evt) {
        pum_sub_category.removeAll();
        int row = tbl_category.getSelectedRow();
        if (row < 0) {
            return;
        }

        to_name_cat to = (to_name_cat) tbl_category_ALM.get(tbl_category.
                convertRowIndexToModel(row));
        List<to_category_type> datas = S1_category_type.ret_data(to.name);
        if (datas.size() > 0) {
            my_types = "";
            init_items();
            JMenuItem it = new JMenuItem("NONE");
            pum_sub_category.add(it);
            it.addActionListener(new ActionListener() {

                @Override
                public void actionPerformed(ActionEvent e) {
                    my_types = "";
                    init_items();
                }
            });
            for (final to_category_type t : datas) {
                JMenuItem item = new JMenuItem(t.type_name);
                pum_sub_category.add(item);

                item.addActionListener(new ActionListener() {

                    @Override
                    public void actionPerformed(ActionEvent e) {
                        my_types = t.type_name;
                        init_items();
                    }
                });
            }
            Point p = tbl_category.getLocation();
            pum_sub_category.show(evt.getComponent(), p.x + 150, evt.getY());
        }
        if (datas.isEmpty()) {
            my_types = "";
            init_items();
        }
    }
    List<Dlg_check_liquid.to_guests> split_guest = new ArrayList();

    private void split_order() {

        Window p = (Window) this;
        Dlg_split_orders nd = Dlg_split_orders.create(p, true);
        nd.setTitle("");
        nd.do_pass(split_guest);
        nd.setCallback(new Dlg_split_orders.Callback() {

            @Override
            public void ok(CloseDialog closeDialog, Dlg_split_orders.OutputData data) {
                closeDialog.ok();
                split_guest = data.split_guest;
                lbl_split.setText("" + split_guest.size());
            }
        });

        nd.setLocationRelativeTo(this);

        nd.setVisible(true);
    }

//<editor-fold defaultstate="collapsed" desc=" save bar orders ">
    private void save_and_print2(to_print_save print) {
        int row = 0;
        row = jg_orders.getSelectedIndex();
        if (row < 0) {
            return;
        }

        List<Dlg_check_liquid.to_guests> ok = my_guest;
        int yy = 0;
        String guest_ids = "";
        String guest_names = "";
        String room_guest_ids = "";
        for (Dlg_check_liquid.to_guests tt : ok) {
            if (yy == 0) {
                guest_ids = guest_ids + tt.id;
                guest_names = guest_names + tt.name;
                room_guest_ids = room_guest_ids + tt.room_guest_id;
            } else {
                guest_ids = guest_ids + "," + tt.id;
                guest_names = guest_names + "," + tt.name;
                room_guest_ids = room_guest_ids + "," + tt.room_guest_id;
            }
            yy++;
        }

        Object value = new Object();
        value = orders_model.getElementAt(row);
        final S2_search.to_rooms t = (S2_search.to_rooms) value;
        int id = Integer.parseInt(S1_billing_history.increment_id());
        String room_id = t.id;
        String room_name = t.room;
        String checkin_date = t.date_added;
        String checkout_date = DateType.datetime.format(new Date());
        int status = 0;
        double gross_sales1 = gross_sales;
        double to_pay = print.to_pay;
        double adv_peso = print.adv_peso;
        double adv_usd = print.adv_usd;
        double paid_peso = print.paid_peso;
        double paid_dollar = print.paid_dollar;
        double paid_credit = print.paid_credit;
        double dollar_rate = print.dollar_rate;
        double discount = print.discount;
        double discount_rate = print.discount_rate;
        String discount_name = print.discount_name;
        String user_name = to_users.ret_user(to_users.username1);
        S1_billing_history.to_billing_histories bh = new S1_billing_history.to_billing_histories(
                id, room_id, room_name, guest_ids, guest_names, checkin_date, checkout_date, status, gross_sales1, to_pay, adv_peso, adv_usd, paid_peso, paid_dollar, paid_credit, dollar_rate, discount, discount_rate, discount_name, room_guest_ids, user_name, bank_php, bank_usd, advance_credit_card);

        List<S1_billing_history_items.to_billing_history_items> items = new ArrayList();
        List<S2_search.to_items> results = tbl_customer_tables_details_ALM;
        for (S2_search.to_items s : results) {
            int ids = 0;
            String room_ids = t.id;
            String room_names = t.name;
            String or_no = lbl_or_no.getText();
            double qty = s.qty;
            String product_name = s.name;
            String description = s.desc;
            double price = s.price;
            String img_path = s.img_path;
            int statuss = 0;
            int guest_id = s.guest_no;
            String guest_name = "guest_name";
            String cat_id = s.cat_id;
            String cat_name = s.category_name;
            String date_added = s.date_added;
            int printing_assembly = s.printing_assembly;
            String disc_name = s.disc_name;
            double disc_rate = s.disc_rate;
            String discounts = s.disc_name;
            String user_names = user_name;
            int billing_history_id = id;
            S1_billing_history_items.to_billing_history_items item = new S1_billing_history_items.to_billing_history_items(ids, room_ids, room_names, or_no, qty, product_name, description, price, img_path, statuss, guest_id, guest_name, cat_id, cat_name, date_added, printing_assembly, disc_name, disc_rate, discounts, user_names, billing_history_id, s.discount);
            items.add(item);
        }

        S1_billing_history.add_billing_histories(bh, print.payable, print.due, advance_credit_card); //uncomment this
        S1_billing_history_items.add_billing_history_items(items); //uncomment this

    }
//</editor-fold>
}
